"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[1417],{9712:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var t=n(5893),i=n(1151);const r={title:"Cypress.sinon"},c=void 0,a={id:"api/utilities/sinon",title:"Cypress.sinon",description:"Cypress automatically includes Sinon.JS and exposes it as",source:"@site/docs/api/utilities/sinon.mdx",sourceDirName:"api/utilities",slug:"/api/utilities/sinon",permalink:"/api/utilities/sinon",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/utilities/sinon.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",frontMatter:{title:"Cypress.sinon"},sidebar:"api",previous:{title:"Cypress.Promise",permalink:"/api/utilities/promise"},next:{title:"Overview",permalink:"/api/node-events/overview"}},o={},l=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:3},{value:"Examples",id:"Examples",level:2},{value:"<code>match.string</code>",id:"matchstring",level:3},{value:"See also",id:"See-also",level:2}];function d(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components},{Icon:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Icon",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:["Cypress automatically includes ",(0,t.jsx)(s.a,{href:"http://sinonjs.org/",children:"Sinon.JS"})," and exposes it as\n",(0,t.jsx)(s.code,{children:"Cypress.sinon"}),". Because commands ",(0,t.jsx)(s.a,{href:"/api/commands/spy",children:(0,t.jsx)(s.code,{children:"cy.spy"})})," and\n",(0,t.jsx)(s.a,{href:"/api/commands/stub",children:(0,t.jsx)(s.code,{children:"cy.stub"})})," are already wrapping Sinon methods, the most\ncommon use for ",(0,t.jsx)(s.code,{children:"Cypress.sinon"})," is to provide flexible\n",(0,t.jsx)(s.a,{href:"https://sinonjs.org/releases/latest/matchers/",children:"matchers"})," when doing assertions."]}),"\n",(0,t.jsx)(s.h2,{id:"Syntax",children:"Syntax"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-javascript",children:"Cypress.sinon.match(value)\nCypress.sinon.match.<matcher name>\n"})}),"\n",(0,t.jsx)(s.h3,{id:"Usage",children:"Usage"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(n,{name:"check-circle",color:"green"})," ",(0,t.jsx)(s.strong,{children:"Correct Usage"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-javascript",children:"Cypress.sinon.match.string\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(n,{name:"exclamation-triangle",color:"red"})," ",(0,t.jsx)(s.strong,{children:"Incorrect Usage"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-javascript",children:"cy.sinon.match.string // Errors, cannot be chained off 'cy'\n"})}),"\n",(0,t.jsx)(s.h2,{id:"Examples",children:"Examples"}),"\n",(0,t.jsx)(s.h3,{id:"matchstring",children:(0,t.jsx)(s.code,{children:"match.string"})}),"\n",(0,t.jsxs)(s.p,{children:["This example comes from the recipe\n",(0,t.jsx)(s.a,{href:"https://github.com/cypress-io/cypress-example-recipes#testing-the-dom",children:"Root style"}),".\nImagine an application code where the method ",(0,t.jsx)(s.code,{children:"setProperty"})," is called to change a\nCSS variable:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"document.querySelector('input[type=color]').addEventListener('change', (e) => {\n  document.documentElement.style.setProperty(\n    '--background-color',\n    e.target.value\n  )\n})\n"})}),"\n",(0,t.jsxs)(s.p,{children:["We can write a test to confirm that the method ",(0,t.jsx)(s.code,{children:"setProperty"})," was called with two\nstrings; we don't care about value of the first string, but we do want to check\nif it was indeed a string."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-javascript",children:"cy.document()\n  .its('documentElement.style')\n  .then((style) => {\n    cy.spy(style, 'setProperty').as('setColor')\n  })\n\ncy.get('input[type=color]').invoke('val', '#ff0000').trigger('change')\n\n// we don't care about '--background-color' exact\n// value but know it should be a string\ncy.get('@setColor').should(\n  'have.been.calledWith',\n  Cypress.sinon.match.string,\n  '#ff0000'\n)\n"})}),"\n",(0,t.jsx)(s.h2,{id:"See-also",children:"See also"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"https://example.cypress.io/commands/spies-stubs-clocks",children:"Spies, stubs & clocks"}),"\nexample page"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"https://sinonjs.org/releases/latest/matchers/",children:"Sinon matchers"})," documentation\npage"]}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/app/references/bundled-libraries",children:"Bundled Libraries"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/api/commands/spy",children:(0,t.jsx)(s.code,{children:"cy.spy()"})})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/api/commands/stub",children:(0,t.jsx)(s.code,{children:"cy.stub()"})})}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/app/guides/stubs-spies-and-clocks",children:"Stubs, Spies, and Clocks"})," guide"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>a,a:()=>c});var t=n(7294);const i={},r=t.createContext(i);function c(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);