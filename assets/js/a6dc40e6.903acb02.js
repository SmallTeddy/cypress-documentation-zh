"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[4614],{108:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var s=t(5893),i=t(1151);const o={title:"Open Mode",sidebar_position:60},r=void 0,a={id:"app/core-concepts/open-mode",title:"Open Mode",description:"What you'll learn",source:"@site/docs/app/core-concepts/open-mode.mdx",sourceDirName:"app/core-concepts",slug:"/app/core-concepts/open-mode",permalink:"/app/core-concepts/open-mode",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/core-concepts/open-mode.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",sidebarPosition:60,frontMatter:{title:"Open Mode",sidebar_position:60},sidebar:"app",previous:{title:"Retry-ability",permalink:"/app/core-concepts/retry-ability"},next:{title:"Best Practices",permalink:"/app/core-concepts/best-practices"}},l={},c=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"Launchpad",id:"Launchpad",level:3},{value:"Specs",id:"Specs",level:3},{value:"Last updated",id:"Last-updated",level:4},{value:"Latest runs",id:"Latest-runs",level:4},{value:"Average duration",id:"Average-duration",level:4},{value:"Flake annotation",id:"Flake-annotation",level:4},{value:"Running Specs",id:"Running-Specs",level:4},{value:"Runs",id:"Runs",level:3},{value:"Debug",id:"Debug",level:3},{value:"What does the Debug page show?",id:"What-does-the-Debug-page-show",level:4},{value:"Cloud Run Notifications",id:"Cloud-Run-Notifications",level:3},{value:"Test Runner",id:"Test-Runner",level:2},{value:"Command Log",id:"Command-Log",level:2},{value:"Open files in your IDE",id:"Open-files-in-your-IDE",level:3},{value:"Time traveling",id:"Time-traveling",level:3},{value:"Pinning snapshots",id:"Pinning-snapshots",level:3},{value:"1. Pinned snapshots",id:"1-Pinned-snapshots",level:4},{value:"2. Event hitbox",id:"2-Event-hitbox",level:4},{value:"3. Snapshot menu panel",id:"3-Snapshot-menu-panel",level:4},{value:"Page events",id:"Page-events",level:3},{value:"Instrument panel",id:"Instrument-panel",level:3},{value:"Routes",id:"Routes",level:4},{value:"Stubs",id:"Stubs",level:4},{value:"Spies",id:"Spies",level:4},{value:"Preview pane",id:"Preview-pane",level:2},{value:"Application Under Test <E2EOnlyBadge></E2EOnlyBadge>",id:"Application-Under-Test",level:3},{value:"Component Under Test <ComponentOnlyBadge></ComponentOnlyBadge>",id:"Component-Under-Test",level:3},{value:"Selector Playground",id:"Selector-Playground",level:2},{value:"Uniqueness",id:"Uniqueness",level:3},{value:"Best practices",id:"Best-practices",level:3},{value:"Finding selectors",id:"Finding-selectors",level:3},{value:"Running experiments",id:"Running-experiments",level:3},{value:"Editing a selector",id:"Editing-a-selector",level:4},{value:"Switching to contains",id:"Switching-to-contains",level:4},{value:"Disabling highlights",id:"Disabling-highlights",level:4},{value:"Keyboard shortcuts",id:"Keyboard-shortcuts",level:2},{value:"Debugging",id:"Debugging",level:2},{value:"Errors",id:"Errors",level:3},{value:"Console output",id:"Console-output",level:3},{value:"Special commands",id:"Special-commands",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components},{AnatomyOfAnError:t,ComponentOnlyBadge:o,DefaultSelectorPriority:r,DocsImage:a,DocsVideo:l,E2EOnlyBadge:c,Icon:d,TabItem:h,Tabs:u}=n;return t||p("AnatomyOfAnError",!0),o||p("ComponentOnlyBadge",!0),r||p("DefaultSelectorPriority",!0),a||p("DocsImage",!0),l||p("DocsVideo",!0),c||p("E2EOnlyBadge",!0),d||p("Icon",!0),h||p("TabItem",!0),u||p("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.h5,{id:"What-youll-learn",children:[(0,s.jsx)(d,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The different sections of the Cypress app in open mode"}),"\n",(0,s.jsx)(n.li,{children:"The information surfaced in the app's Command Log"}),"\n",(0,s.jsx)(n.li,{children:"How to use the Selector Playground to find unique selectors"}),"\n",(0,s.jsx)(n.li,{children:"Debugging tools available in the app in open mode"}),"\n"]})]}),"\n",(0,s.jsxs)(n.p,{children:["The Cypress App has powerful features for creating, configuring,\nbrowsing, and most importantly running your tests once you ",(0,s.jsx)(n.a,{href:"/app/get-started/open-the-app",children:"open the app"}),".\nOpen mode is the heart of the Cypress testing experience."]}),"\n",(0,s.jsx)(n.h3,{id:"Launchpad",children:"Launchpad"}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/the-launchpad.png",alt:"The Launchpad"}),"\n",(0,s.jsx)(n.p,{children:"The Launchpad is your portal to Cypress, helping with onboarding, choosing a\ntesting type and launching a browser."}),"\n",(0,s.jsxs)(n.p,{children:["Once you get comfortable with Cypress you might find you don't need the\nLaunchpad any more. In this case\n",(0,s.jsxs)(n.a,{href:"/app/references/command-line#cypress-open",children:["you can run ",(0,s.jsx)(n.code,{children:"cypress open"})," with the ",(0,s.jsx)(n.code,{children:"--browser"})," and ",(0,s.jsx)(n.code,{children:"--component"})," or ",(0,s.jsx)(n.code,{children:"--e2e"})," options"]}),"\nto go straight to the Specs page."]}),"\n",(0,s.jsx)(n.h3,{id:"Specs",children:"Specs"}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/spec-explorer.png",alt:"Specs"}),"\n",(0,s.jsx)(n.p,{children:"On choosing your browser in the Launchpad, you'll be presented with a list of\nyour specs, their names, locations, and information about your latest recorded\nruns. Here you can launch specs by clicking them, create new blank or example\nspecs, or search specs by name (handy for large test suites)."}),"\n",(0,s.jsx)(n.p,{children:"We've made the following spec data available directly on the Specs page:"}),"\n",(0,s.jsx)(n.h4,{id:"Last-updated",children:"Last updated"}),"\n",(0,s.jsx)(n.p,{children:"This column tells you when the code of this spec was last updated, using local\nfile data from git or your own filesystem. It surfaces the change history of\nyour tests, so you can quickly find the most relevant specs as you're browsing\nyour project."}),"\n",(0,s.jsx)(n.p,{children:"This column will vary from machine to machine, as it reflects the state of the\ncode as stored on that computer."}),"\n",(0,s.jsx)(n.h4,{id:"Latest-runs",children:"Latest runs"}),"\n",(0,s.jsx)(n.p,{children:"This column shows the last time the spec was run, and the last four returned\nstatuses. Results are scoped to your current git branch if available, falling\nback to the default branch if not, then finally all branches."}),"\n",(0,s.jsx)(n.p,{children:"With this intelligence you can monitor, run, and fix tests locally within CI\nworkflows, and then further dig into your results by clicking through to Cypress\nCloud."}),"\n",(0,s.jsx)(n.p,{children:"The runs data is sourced from Cypress Cloud so it\nwill be the same everywhere."}),"\n",(0,s.jsx)(n.h4,{id:"Average-duration",children:"Average duration"}),"\n",(0,s.jsx)(n.p,{children:"This column indicates the time taken to run the entire spec file, averaged over\nthe last four runs, so that you can quickly identify and take action to improve\nthe performance of your long-running tests."}),"\n",(0,s.jsx)(n.p,{children:"Again, this analysis comes from Cypress Cloud."}),"\n",(0,s.jsx)(n.h4,{id:"Flake-annotation",children:"Flake annotation"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)("strong",{children:"What is a flaky test?"}),(0,s.jsxs)(n.p,{children:["A test is considered to be ",(0,s.jsx)(n.a,{href:"/cloud/features/flaky-test-management",children:"flaky"})," when it\ncan pass and fail across multiple retry attempts without any code changes."]})]}),"\n",(0,s.jsx)(n.p,{children:"Specs with flaky tests are flagged with an indicator beside the spec name. This\nmeans you can easily discern which areas of your application might result in an\nunreliable user experience."}),"\n",(0,s.jsxs)(n.p,{children:["The flake indicator will display if any tests in the given spec have been flaky\nin your latest runs (limited to 4). Hovering over the indicator will show a\ntooltip with the following analytics, based off the last ",(0,s.jsx)(n.strong,{children:"50"})," runs:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Rate (flaky runs divided by total runs)"}),"\n",(0,s.jsx)(n.li,{children:"Severity (flaky rate at a glance)"}),"\n",(0,s.jsx)(n.li,{children:"Last flaky (how many runs ago)"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Clicking on the flake indicator will take you to the spec's\n",(0,s.jsx)(n.a,{href:"https://cloud.cypress.io/projects/7s5okt/analytics/flaky-tests",children:"Flaky Test Analytics in Cypress Cloud"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"Running-Specs",children:"Running Specs"}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/spec-page.png",alt:"Specs"}),"\n",(0,s.jsxs)(n.p,{children:["To run a spec, simply click the row with the spec you would like to run. You\nwill be taken to the ",(0,s.jsx)(n.a,{href:"#Test-Runner",children:"Test Runner"})," and the spec will execute. You\ncan narrow down the list of specs by typing into the search bar (1)."]}),"\n",(0,s.jsxs)(n.p,{children:["It is also possible to run multiple specs sequentially using the\n",(0,s.jsx)(n.a,{href:"/app/references/experiments#End-to-End-Testing",children:(0,s.jsx)(n.code,{children:"experimentalRunAllSpecs"})}),"\n(2)."]}),"\n",(0,s.jsxs)(n.admonition,{type:"caution",children:[(0,s.jsx)("strong",{children:"Experimental Run All Specs"}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"experimentalRunAllSpecs"})," currently works with End to End Testing."]}),(0,s.jsxs)(n.p,{children:["Running multiple specs sequentially is currently an\n",(0,s.jsx)(n.a,{href:"/app/references/configuration#Experiments",children:"experimental feature"})," and it may\nchange in the future. There are some known limitations outlined in this\n",(0,s.jsx)(n.a,{href:"https://github.com/cypress-io/cypress/discussions/21628",children:"GitHub Discussion"}),"."]}),(0,s.jsx)(n.p,{children:"Running a large number of specs sequentially can consume more resources."})]}),"\n",(0,s.jsx)(n.h3,{id:"Runs",children:"Runs"}),"\n",(0,s.jsxs)(n.p,{children:["When you configure the open source Cypress app to record tests to\n",(0,s.jsx)(n.a,{href:"/cloud/get-started/introduction",children:"Cypress Cloud"}),", you'll see data from your latest\n",(0,s.jsx)(n.a,{href:"/cloud/features/recorded-runs#Latest-Runs",children:"recorded runs"})," directly in the Cypress app. This increased visibility into your\ntest history allows you to debug your tests faster and more effectively, all\nwithin your local workflow."]}),"\n",(0,s.jsx)(n.p,{children:"If you're not sure whether you're logged in, you can always check using the\nprofile control in the top right of the window."}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/recorded-runs.jpg",alt:"Recorded Runs"}),"\n",(0,s.jsxs)(n.p,{children:["Cypress uses Git to show runs for your branch. Ensure that version control is\nproperly configured and that you are sending Git information to Cypress Cloud. Under some\nenvironment setups (e.g. ",(0,s.jsx)(n.code,{children:"docker"}),"/",(0,s.jsx)(n.code,{children:"docker-compose"}),"), you may have to pass git\ninformation using\n",(0,s.jsx)(n.a,{href:"/app/continuous-integration/overview#Git-information",children:"custom environment variables"}),".\nIf no runs are found for your current branch, all runs for your project are\nshown as a fallback."]}),"\n",(0,s.jsxs)(n.p,{children:["The title of each run is taken from the\n",(0,s.jsx)(n.a,{href:"https://www.educative.io/edpresso/git-commit-message-simply-explained",children:"git commit message"}),"\nfor that change, and clicking on it will take you to the corresponding run page\nin Cypress Cloud."]}),"\n",(0,s.jsx)(n.h3,{id:"Debug",children:"Debug"}),"\n",(0,s.jsxs)(n.p,{children:["The Debug page allows you to easily debug failed CI test runs from within the\nCypress app. From this page, you can review, rerun, and debug failed CI test\nruns that are recorded to ",(0,s.jsx)(n.a,{href:"/cloud/get-started/introduction",children:"Cypress Cloud"})," - all\nwithout leaving the Cypress app."]}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/debug-page.png",alt:"Debug"}),"\n",(0,s.jsxs)(n.p,{children:["This feature eliminates the tedious process of switching between Cypress, your\nlocal editor, and CI output, in order to fix failed tests. It does this by\nenabling you to use the app to run only the tests that\nfailed in your last recorded test run, as well as review the\n",(0,s.jsx)(n.a,{href:"/cloud/features/test-replay",children:"Test Replay"})," and other artifacts like screenshots,\nvideos, and logs from your tests."]}),"\n",(0,s.jsx)(n.h4,{id:"What-does-the-Debug-page-show",children:"What does the Debug page show?"}),"\n",(0,s.jsxs)(n.p,{children:["The Debug page shows the latest completed\n",(0,s.jsx)(n.a,{href:"/cloud/features/recorded-runs#Latest-Runs",children:"test run"})," that matches the ",(0,s.jsx)(n.code,{children:"HEAD"})," commit\n(the commit currently checked out in the working directory) of your local\nproject. Users can see and switch to relevant runs within the Debug page. If no\nrun is found for your current commit, then Cypress shows the most recent run in\nyour branch's history up until the current commit. The first ",(0,s.jsx)(n.strong,{children:"100"})," failed\ntests are listed, with a link to Cypress Cloud to review the full run."]}),"\n",(0,s.jsxs)(n.p,{children:["To use this feature, you must ensure that git is properly configured for your\nproject and that you are sending git information to Cypress Cloud. Under some\nenvironment setups (e.g. ",(0,s.jsx)(n.code,{children:"docker"}),"/",(0,s.jsx)(n.code,{children:"docker-compose"}),"), you may have to pass git\ninformation using\n",(0,s.jsx)(n.a,{href:"/app/continuous-integration/overview#Git-information",children:"custom environment variables"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"Cloud-Run-Notifications",children:"Cloud Run Notifications"}),"\n",(0,s.jsxs)(n.p,{children:["You can receive notifications in the Cypress app for recorded runs directly from\nCypress Cloud. Learn more about ",(0,s.jsx)(n.a,{href:"/cloud/features/recorded-runs#Notifications",children:"Cloud Run Notifications"}),"."]}),"\n",(0,s.jsx)(a,{src:"/img/cloud/runs/app-notification.jpg",alt:"App notification on macOS"}),"\n",(0,s.jsx)(n.h2,{id:"Test-Runner",children:"Test Runner"}),"\n",(0,s.jsx)(n.p,{children:"At the core of the app is the Test Runner itself. Cypress runs tests\ninteractively, allowing you to see commands as they execute while also viewing\nthe Application or Component Under Test, and exploring its DOM."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Like the experience of the Cypress app's open mode for debugging tests? You can get the same\nexperience in ",(0,s.jsx)(n.a,{href:"/cloud/features/test-replay",children:"Test Replay"})," for runs recorded in CI in Cypress Cloud."]})}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/test-runner.png",alt:"The Test Runner"}),"\n",(0,s.jsx)(n.h2,{id:"Command-Log",children:"Command Log"}),"\n",(0,s.jsxs)(n.p,{children:["The left-hand side of the Test Runner is a visual representation of your test\nsuite. Each test block is properly nested and each test, when clicked, displays\nevery Cypress command executed within the test's block as well as any commands\nexecuted in relevant ",(0,s.jsx)(n.code,{children:"before"}),", ",(0,s.jsx)(n.code,{children:"beforeEach"}),", ",(0,s.jsx)(n.code,{children:"afterEach"}),", and ",(0,s.jsx)(n.code,{children:"after"})," hooks."]}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/command-log.png",alt:"Cypress app","width-600":!0}),"\n",(0,s.jsx)(n.h3,{id:"Open-files-in-your-IDE",children:"Open files in your IDE"}),"\n",(0,s.jsxs)(n.p,{children:["There are some places in the Command Log that display a link to the relevant\nfile where the code is located. Clicking on this link will open the file in your\n",(0,s.jsx)(n.a,{href:"/app/tooling/IDE-integration#File-Opener-Preference",children:"preferred file opener"}),"."]}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/open-file-in-IDE.gif",alt:"Open file in your IDE"}),"\n",(0,s.jsx)(n.h3,{id:"Time-traveling",children:"Time traveling"}),"\n",(0,s.jsxs)(n.p,{children:["Each command, when hovered over, restores the Application or Component Under\nTest (right-hand side) to the state it was in when that command executed. This\nallows you to ",(0,s.jsx)(n.strong,{children:"time travel"})," back to previous states when testing."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["By default, Cypress keeps ",(0,s.jsx)(n.strong,{children:"50"})," tests worth of snapshots and command data for\ntime traveling. If you are seeing extremely high memory consumption in your\nbrowser, you may want to lower the ",(0,s.jsx)(n.code,{children:"numTestsKeptInMemory"})," in your\n",(0,s.jsx)(n.a,{href:"/app/references/configuration#Global",children:"Cypress configuration"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["In the following example, hovering over the ",(0,s.jsx)(n.a,{href:"/api/commands/contains",children:(0,s.jsx)(n.code,{children:"contains"})}),"\ncommand in the Command Log changes the state of the\n",(0,s.jsx)(n.a,{href:"#Application-Under-Test",children:"AUT"})," preview:"]}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/first-test-hover-contains.png",alt:"Hovering over the contains tab highlights the dom element in the App in the Cypress app"}),"\n",(0,s.jsxs)(n.p,{children:["Cypress automatically travels back in time to a snapshot of when a hovered-over\ncommand resolved. Additionally, since ",(0,s.jsx)(n.a,{href:"/api/commands/contains",children:(0,s.jsx)(n.code,{children:"cy.contains()"})}),"\nfinds DOM elements on the page, Cypress also highlights the element and scrolls\nit into view (to the top of the page)."]}),"\n",(0,s.jsxs)(n.p,{children:["Also note that as we hover over the ",(0,s.jsx)(n.a,{href:"/api/commands/contains",children:(0,s.jsx)(n.code,{children:"contains"})}),"\ncommand, Cypress reverts back to the URL that was present when the snapshot was\ntaken."]}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/first-test-url-revert.png",alt:"The url address bar shows https://example.cypress.io/"}),"\n",(0,s.jsx)(n.h3,{id:"Pinning-snapshots",children:"Pinning snapshots"}),"\n",(0,s.jsxs)(n.p,{children:["Each command, when clicked on, displays extra information in the dev tools\nconsole. Clicking also ",(0,s.jsx)(n.strong,{children:"pins"})," the Application or Component Under Test\n(right-hand side) to its previous state, or ",(0,s.jsx)(n.strong,{children:"snapshot"}),", when the command\nexecuted."]}),"\n",(0,s.jsxs)(n.p,{children:["In the following example, clicking on the ",(0,s.jsx)(n.code,{children:"CLICK"})," command highlights it in\npurple, and does three other things worth noting:"]}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/first-test-click-revert.png",alt:"A click on the click command in the Command Log with Cypress app labeled as 1, 2, 3"}),"\n",(0,s.jsx)(n.h4,{id:"1-Pinned-snapshots",children:"1. Pinned snapshots"}),"\n",(0,s.jsxs)(n.p,{children:["We have now ",(0,s.jsx)(n.strong,{children:"pinned"})," this snapshot. Hovering over other commands will not\nrevert to them. This gives us a chance to manually inspect the DOM of our\napplication under test at the time the snapshot was taken."]}),"\n",(0,s.jsx)(n.h4,{id:"2-Event-hitbox",children:"2. Event hitbox"}),"\n",(0,s.jsxs)(n.p,{children:["Since ",(0,s.jsx)(n.a,{href:"/api/commands/click",children:(0,s.jsx)(n.code,{children:".click()"})})," is an action command, that means we also\nsee a red hitbox at the coordinates the event took place."]}),"\n",(0,s.jsx)(n.h4,{id:"3-Snapshot-menu-panel",children:"3. Snapshot menu panel"}),"\n",(0,s.jsxs)(n.p,{children:["There is also a new menu panel. Some commands (like action commands) will take\nmultiple snapshots: ",(0,s.jsx)(n.strong,{children:"before"})," and ",(0,s.jsx)(n.strong,{children:"after"}),". We can now cycle through these."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"before"})," snapshot is taken prior to the click event firing. The ",(0,s.jsx)(n.strong,{children:"after"}),"\nsnapshot is taken immediately after the click event. Although this click event\ncaused our browser to load a new page, it's not an instantaneous transition.\nDepending on how fast your page loaded, you may still see the same page, or a\nblank screen as the page is unloading and in transition."]}),"\n",(0,s.jsxs)(n.p,{children:["When a command causes an immediate visual change in our application, cycling\nbetween before and after will update our snapshot. We can see this in action by\nclicking the ",(0,s.jsx)(n.code,{children:"TYPE"})," command in the Command Log. Now, clicking ",(0,s.jsx)(n.strong,{children:"before"})," will\nshow us the input in a default state, showing the placeholder text. Click\n",(0,s.jsx)(n.strong,{children:"after"})," will show us what the input looks like when the ",(0,s.jsx)(n.code,{children:"TYPE"})," command has\ncompleted."]}),"\n",(0,s.jsx)(n.h3,{id:"Page-events",children:"Page events"}),"\n",(0,s.jsx)(n.p,{children:"In addition to showing all the commands that were called, the command log also\nshows important events from your application or component when they occur.\nNotice these look different (they are gray and without a number)."}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/first-test-page-load.png",alt:"Command log shows 'Page load --page loaded--' and 'New url https://example.cypress.io/'"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Cypress logs out page events for:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Network XHR Requests"}),"\n",(0,s.jsx)(n.li,{children:"URL hash changes"}),"\n",(0,s.jsx)(n.li,{children:"Page Loads"}),"\n",(0,s.jsx)(n.li,{children:"Form Submissions"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"Instrument-panel",children:"Instrument panel"}),"\n",(0,s.jsxs)(n.p,{children:["For certain commands like ",(0,s.jsx)(n.a,{href:"/api/commands/intercept",children:(0,s.jsx)(n.code,{children:"cy.intercept()"})}),",\n",(0,s.jsx)(n.a,{href:"/api/commands/stub",children:(0,s.jsx)(n.code,{children:"cy.stub()"})}),", and ",(0,s.jsx)(n.a,{href:"/api/commands/spy",children:(0,s.jsx)(n.code,{children:"cy.spy()"})}),", an extra\ninstrument panel is displayed above the test to give more information about the\nstate of your tests."]}),"\n",(0,s.jsx)(n.h4,{id:"Routes",children:"Routes"}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/instrument-panel-routes.png",alt:"Routes Instrument Panel"}),"\n",(0,s.jsx)(n.h4,{id:"Stubs",children:"Stubs"}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/instrument-panel-stubs.png",alt:"Stubs Instrument Panel"}),"\n",(0,s.jsx)(n.h4,{id:"Spies",children:"Spies"}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/instrument-panel-spies.png",alt:"Spies Instrument Panel"}),"\n",(0,s.jsx)(n.h2,{id:"Preview-pane",children:"Preview pane"}),"\n",(0,s.jsx)(n.p,{children:"The right-hand side of the Test Runner is where the Application or Component\nUnder Test is rendered."}),"\n",(0,s.jsxs)(n.h3,{id:"Application-Under-Test",children:["Application Under Test ",(0,s.jsx)(c,{})]}),"\n",(0,s.jsxs)(n.p,{children:["In\n",(0,s.jsx)(n.a,{href:"/app/core-concepts/testing-types#What-is-E2E-Testing",children:"E2E Testing"}),",\nthe right-hand side of the Test Runner is used to display the Application Under\nTest (AUT): the application that was navigated to using a\n",(0,s.jsx)(n.a,{href:"/api/commands/visit",children:(0,s.jsx)(n.code,{children:"cy.visit()"})})," or any subsequent routing calls made from\nthe visited application."]}),"\n",(0,s.jsx)(n.p,{children:"In the example below, we wrote the following code in our test file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"cy.visit('https://example.cypress.io')\n\ncy.title().should('include', 'Kitchen Sink')\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the corresponding application preview below, you can see\n",(0,s.jsx)(n.code,{children:"https://example.cypress.io"})," is being displayed in the right-hand side. Not only\nis the application visible, but it is fully interactive. You can open your\ndeveloper tools to inspect elements as you would in your normal application. The\nDOM is completely available for debugging."]}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/application-under-test.png",alt:"Application Under Test"}),"\n",(0,s.jsxs)(n.p,{children:["The AUT also displays in the size and orientation specified in your tests. You\ncan change the size or orientation with the\n",(0,s.jsx)(n.a,{href:"/api/commands/viewport",children:(0,s.jsx)(n.code,{children:"cy.viewport()"})})," command or in your\n",(0,s.jsx)(n.a,{href:"/app/references/configuration#Viewport",children:"Cypress configuration"}),". If the AUT\ndoes not fit within the current browser window, it is scaled appropriately to\nfit within the window."]}),"\n",(0,s.jsx)(n.p,{children:"The current size and scale of the AUT is displayed in the top right corner of\nthe window."}),"\n",(0,s.jsxs)(n.p,{children:["The image below shows that our application is displaying at ",(0,s.jsx)(n.code,{children:"1000px"})," width,\n",(0,s.jsx)(n.code,{children:"660px"})," height and scaled to ",(0,s.jsx)(n.code,{children:"100%"}),"."]}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/viewport-scaling.png",alt:"Viewport Scaling"}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"The right-hand side may also be used to display syntax errors in your spec file\nthat prevent the tests from running."})}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/aut-error-e2e.png",alt:"Errors"}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["Internally, the AUT renders within an iframe. This can sometimes cause\nunexpected behaviors\n",(0,s.jsx)(n.a,{href:"/api/commands/window#Cypress-uses-2-different-windows",children:"explained here."})]})}),"\n",(0,s.jsxs)(n.h3,{id:"Component-Under-Test",children:["Component Under Test ",(0,s.jsx)(o,{})]}),"\n",(0,s.jsxs)(n.p,{children:["In\n",(0,s.jsx)(n.a,{href:"/app/core-concepts/testing-types#What-is-Component-Testing",children:"Component testing"}),",\nthe right-hand side of the Test Runner is used to display the Component Under\nTest (CUT): the component that was mounted using the\n",(0,s.jsx)(n.a,{href:"/api/commands/mount",children:(0,s.jsx)(n.code,{children:"cy.mount()"})})," command."]}),"\n",(0,s.jsx)(n.p,{children:"In the following example, we have the following test in our spec file:"}),"\n",(0,s.jsxs)(u,{children:[(0,s.jsx)(h,{value:"React",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"it('should have password input of type password', () => {\n  mount(<LoginForm />)\n  cy.contains('Password').find('input').should('have.attr', 'type', 'password')\n})\n"})})}),(0,s.jsx)(h,{value:"Vue",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"it('should have password input of type password', () => {\n  mount(LoginForm)\n  cy.contains('Password').find('input').should('have.attr', 'type', 'password')\n})\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["In the corresponding Component Preview below, you can see the ",(0,s.jsx)(n.code,{children:"LoginForm"}),"\ncomponent is being displayed in the right-hand side. Not only is the component\nvisible, but it is fully interactable. You can open your developer tools to\ninspect elements as you would in your normal application. The DOM is completely\navailable for debugging."]}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/component-under-test.png",alt:"Cypress app showing mounted component and password assertion"}),"\n",(0,s.jsxs)(n.p,{children:["The CUT also displays in the size and orientation specified in your tests. You\ncan change the size or orientation with the\n",(0,s.jsx)(n.a,{href:"/api/commands/viewport",children:(0,s.jsx)(n.code,{children:"cy.viewport()"})})," command or in your\n",(0,s.jsx)(n.a,{href:"/app/references/configuration#Viewport",children:"Cypress configuration"}),". If the CUT\ndoes not fit within the current browser window, it is scaled appropriately to\nfit within the window."]}),"\n",(0,s.jsx)(n.p,{children:"The current size and scale of the CUT is displayed in the top right corner of\nthe window."}),"\n",(0,s.jsxs)(n.p,{children:["The image below shows that our application is displaying at ",(0,s.jsx)(n.code,{children:"500px"})," width,\n",(0,s.jsx)(n.code,{children:"500px"})," height and scaled to ",(0,s.jsx)(n.code,{children:"100%"}),"."]}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/viewport-scaling-ct.png",alt:"Cypress app showing mounted component test viewport scale"}),"\n",(0,s.jsx)(n.p,{children:"The right-hand side may also be used to display syntax errors in your spec file\nthat prevent the tests from running."}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/aut-error-ct.png",alt:"Cypress app showing error as application under test"}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["Internally, the AUT renders within an iframe. This can sometimes cause\nunexpected behaviors\n",(0,s.jsx)(n.a,{href:"/api/commands/window#Cypress-uses-2-different-windows",children:"explained here."})]})}),"\n",(0,s.jsx)(n.h2,{id:"Selector-Playground",children:"Selector Playground"}),"\n",(0,s.jsx)(n.p,{children:"The Selector Playground is an interactive feature that helps you:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Determine a unique selector for an element."}),"\n",(0,s.jsx)(n.li,{children:"See what elements match a given selector."}),"\n",(0,s.jsx)(n.li,{children:"See what element matches a string of text."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Need a low code approach to create tests? Use\n",(0,s.jsx)(n.a,{href:"/app/guides/cypress-studio",children:"Cypress Studio"})," to record your browser\ninteractions."]})}),"\n",(0,s.jsx)(l,{src:"/img/snippets/selector-playground.mp4",title:"Selector Playground demo"}),"\n",(0,s.jsx)(n.h3,{id:"Uniqueness",children:"Uniqueness"}),"\n",(0,s.jsxs)(n.p,{children:["Cypress will automatically calculate a ",(0,s.jsx)(n.strong,{children:"unique selector"})," to use targeted\nelement by running through a series of selector strategies."]}),"\n",(0,s.jsx)(r,{}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Cypress allows you to control how a selector is determined. Use the ",(0,s.jsx)(n.a,{href:"/api/cypress-api/selector-playground-api",children:"Cypress.SelectorPlayground"}),"\nAPI to control the selectors you want returned."]})}),"\n",(0,s.jsx)(n.h3,{id:"Best-practices",children:"Best practices"}),"\n",(0,s.jsx)(n.p,{children:"You may find yourself struggling to write good selectors because:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Your application or component uses dynamic ID's and class names"}),"\n",(0,s.jsx)(n.li,{children:"Your tests break whenever there are CSS or content changes"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To help with these common challenges, the Selector Playground automatically\nprefers certain ",(0,s.jsx)(n.code,{children:"data-*"})," attributes when determining a unique selector."]}),"\n",(0,s.jsxs)(n.p,{children:["Please read our\n",(0,s.jsx)(n.a,{href:"/app/core-concepts/best-practices#Selecting-Elements",children:"Best Practices guide"})," on\nhelping you target elements and prevent tests from breaking on CSS or JS\nchanges."]}),"\n",(0,s.jsx)(n.h3,{id:"Finding-selectors",children:"Finding selectors"}),"\n",(0,s.jsxs)(n.p,{children:["To open the Selector Playground, click the ",(0,s.jsx)(d,{name:"crosshairs"})," button\nnext to the URL at the top of the Test Runner. Hover over elements in your app\nto preview a unique selector for that element in the tooltip."]}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/open-selector-playground.gif",alt:"Opening selector playground and hovering over elements"}),"\n",(0,s.jsxs)(n.p,{children:["Click on the element and its selector will appear at the top. From there, you\ncan copy it to your clipboard ( ",(0,s.jsx)(d,{name:"copy"})," ) or print it to the\nconsole ( ",(0,s.jsx)(d,{name:"terminal"})," )."]}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/copy-selector-in-selector-playground.gif",alt:"Clicking an element, copying its selector to clipboard, printing it to the console"}),"\n",(0,s.jsx)(n.h3,{id:"Running-experiments",children:"Running experiments"}),"\n",(0,s.jsx)(n.p,{children:"The box at the top that displays the selector is also a text input."}),"\n",(0,s.jsx)(n.h4,{id:"Editing-a-selector",children:"Editing a selector"}),"\n",(0,s.jsx)(n.p,{children:"When you edit the selector, it will show you how many elements match and\nhighlight those elements in your app."}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/typing-a-selector-to-find-in-playground.gif",alt:"Type a selector to see what elements it matches"}),"\n",(0,s.jsx)(n.h4,{id:"Switching-to-contains",children:"Switching to contains"}),"\n",(0,s.jsxs)(n.p,{children:["You can also experiment with what ",(0,s.jsx)(n.a,{href:"/api/commands/contains",children:(0,s.jsx)(n.code,{children:"cy.contains()"})}),"\nwould yield given a string of text. Click on ",(0,s.jsx)(n.code,{children:"cy.get"})," and switch to\n",(0,s.jsx)(n.code,{children:"cy.contains"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Type in text to see which element it matches. Note that\n",(0,s.jsx)(n.a,{href:"/api/commands/contains",children:(0,s.jsx)(n.code,{children:"cy.contains()"})})," only yields the first element that\nmatches the text, even if multiple elements on the page contain the text."]}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/cy-contains-in-selector-playground.gif",alt:"Experiment with cy.contains"}),"\n",(0,s.jsx)(n.h4,{id:"Disabling-highlights",children:"Disabling highlights"}),"\n",(0,s.jsx)(n.p,{children:"If you would like to interact with your app while the Selector Playground is\nopen, the element highlighting might get in the way. Toggling the highlighting\noff will allow you to interact with your app more easily."}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/turn-off-highlight-in-selector-playground.gif",alt:"Turn off highlighting"}),"\n",(0,s.jsx)(n.h2,{id:"Keyboard-shortcuts",children:"Keyboard shortcuts"}),"\n",(0,s.jsx)(n.p,{children:"There are keyboard shortcuts to quickly perform common actions from within\nCypress."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Key"}),(0,s.jsx)(n.th,{children:"Action"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"r"})}),(0,s.jsx)(n.td,{children:"Rerun tests"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"s"})}),(0,s.jsx)(n.td,{children:"Stop tests"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"f"})}),(0,s.jsx)(n.td,{children:"Bring focus to 'specs' window"})]})]})]}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/keyboard-shortcuts.png",alt:"Tooltips show keyboard shortcuts"}),"\n",(0,s.jsx)(n.h2,{id:"Debugging",children:"Debugging"}),"\n",(0,s.jsx)(n.p,{children:"In addition to the features already mentioned, Cypress comes with a host of\ndebugging tools to help you understand a test. You can:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["See detailed information about ",(0,s.jsx)(n.a,{href:"#Errors",children:"errors"})," that occur."]}),"\n",(0,s.jsxs)(n.li,{children:["Receive additional ",(0,s.jsx)(n.a,{href:"#Console-output",children:"console output"})," about each command."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#Special-commands",children:"Pause commands"})," and step through them iteratively.","\n","\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"Errors",children:"Errors"}),"\n",(0,s.jsx)(t,{}),"\n",(0,s.jsx)(n.h3,{id:"Console-output",children:"Console output"}),"\n",(0,s.jsx)(n.p,{children:"Besides commands being interactive, they also output additional debugging\ninformation to your console."}),"\n",(0,s.jsxs)(n.p,{children:["Open up your Dev Tools and click on the ",(0,s.jsx)(n.code,{children:"GET"})," for the ",(0,s.jsx)(n.code,{children:".action-email"})," class\nselector."]}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/first-test-console-output.png",alt:"Cypress app with get command pinned and console log open showing the yielded element"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"We can see Cypress output additional information in the console:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Command (that was issued)"}),"\n",(0,s.jsx)(n.li,{children:"Yielded (what was returned by this command)"}),"\n",(0,s.jsx)(n.li,{children:"Elements (the number of elements found)"}),"\n",(0,s.jsx)(n.li,{children:"Selector (the argument we used)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We can even expand what was returned and inspect each individual element or even\nright click and inspect them in the Elements panel!"}),"\n",(0,s.jsx)(n.h3,{id:"Special-commands",children:"Special commands"}),"\n",(0,s.jsx)(n.p,{children:"In addition to having a helpful UI, there are also special commands dedicated to\nthe task of debugging, for example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/api/commands/pause",children:"cy.pause()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/api/commands/debug",children:"cy.debug()"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In the following example, we've added a ",(0,s.jsx)(n.a,{href:"/api/commands/pause",children:"cy.pause()"}),"\ncommand to this test:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('My First Test', () => {\n  it('clicking \"type\" shows the right headings', () => {\n    cy.visit('https://example.cypress.io')\n\n    cy.pause()\n\n    cy.contains('type').click()\n\n    // Should be on a new URL which includes '/commands/actions'\n    cy.url().should('include', '/commands/actions')\n\n    // Get an input, type into it and verify that the value has been updated\n    cy.get('[data-testid=\"action-email\"]')\n      .type('fake@email.com')\n      .should('have.value', 'fake@email.com')\n  })\n})\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now, when the test runs, Cypress provides us a UI (similar to debugger) to step\nforward through each command in the test."}),"\n",(0,s.jsx)(a,{src:"/img/app/core-concepts/open-mode/first-test-paused.png",alt:"Cypress app shows label saying 'Paused' with Command Log showing 'Pause'"}),"\n",(0,s.jsx)(n.p,{children:"In action:"}),"\n",(0,s.jsx)(l,{src:"/img/snippets/first-test-debugging-30fps.mp4",title:"Pause test runner demo"})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var s=t(7294);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);