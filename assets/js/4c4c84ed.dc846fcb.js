"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[7342],{198:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=i(5893),s=i(1151);const r={title:"Migrating from Selenium"},a=void 0,o={id:"app/guides/migration/selenium-to-cypress",title:"Migrating from Selenium",description:"What you'll learn",source:"@site/docs/app/guides/migration/selenium-to-cypress.mdx",sourceDirName:"app/guides/migration",slug:"/app/guides/migration/selenium-to-cypress",permalink:"/app/guides/migration/selenium-to-cypress",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/guides/migration/selenium-to-cypress.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",frontMatter:{title:"Migrating from Selenium"},sidebar:"app",previous:{title:"Migrating from Protractor",permalink:"/app/guides/migration/protractor-to-cypress"},next:{title:"Network Requests",permalink:"/app/guides/network-requests"}},l={},c=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"Top 5 reasons to migrate",id:"Top-5-reasons-to-migrate",level:2},{value:"1. Reduction of Flakiness",id:"1-Reduction-of-Flakiness",level:3},{value:"2. Ease of Setup",id:"2-Ease-of-Setup",level:3},{value:"3. Infinitely Expandable",id:"3-Infinitely-Expandable",level:3},{value:"4. Strong Community Support",id:"4-Strong-Community-Support",level:3},{value:"5. Ease of Use",id:"5-Ease-of-Use",level:3},{value:"Evaluating Suitability for Migration",id:"Evaluating-Suitability-for-Migration",level:2},{value:"Getting started with Cypress",id:"Getting-started-with-Cypress",level:2},{value:"Strategy and Considerations",id:"Strategy-and-Considerations",level:2},{value:"Migrating test cases",id:"Migrating-test-cases",level:2},{value:"Multiple tabs",id:"Multiple-tabs",level:5},{value:"File upload",id:"File-upload",level:5},{value:"GraphQL",id:"GraphQL",level:5},{value:"Migrating test cases with Cucumber",id:"Migrating-test-cases-with-Cucumber",level:2},{value:"Integration with CI/CD Pipeline",id:"Integration-with-CICD-Pipeline",level:2},{value:"Integration with the current Pipeline",id:"Integration-with-the-current-Pipeline",level:3},{value:"Cypress Cloud",id:"Cypress-Cloud",level:3},{value:"Test Replay",id:"Test-Replay",level:5},{value:"Parallelization",id:"Parallelization",level:5},{value:"Analytics and Reporting",id:"Analytics-and-Reporting",level:5},{value:"Conclusion",id:"Conclusion",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h5:"h5",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components},{CypressRunCommands:i,Icon:r}=n;return i||p("CypressRunCommands",!0),r||p("Icon",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.h5,{id:"What-youll-learn",children:[(0,t.jsx)(r,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The advantages and limitations of Selenium and Cypress"}),"\n",(0,t.jsx)(n.li,{children:"Strategies and considerations for migration"}),"\n",(0,t.jsx)(n.li,{children:"How to migrate test cases to Cypress"}),"\n",(0,t.jsx)(n.li,{children:"How to integrate Cypress with your CI/CD pipeline"}),"\n"]})]}),"\n",(0,t.jsx)(n.p,{children:"While both Selenium and Cypress are popular tools for web automation,\neach framework possesses distinct strengths and weaknesses. For instance,\nCypress stands out as one of the easiest automation frameworks to begin with,\nwhile Selenium boasts the status of being one of the oldest and most widely used frameworks."}),"\n",(0,t.jsx)(n.p,{children:"Taking a closer look at Selenium WebDriver reveals its longevity and extensive library of\ndocumentation and troubleshooting guides. Supported by an active community, Selenium benefits\nfrom robust documentation across multiple languages including Java, JavaScript, Python, C#, and\nRuby. Its widespread adoption is further evidenced by its integration into various low-code\ntools, underscoring its versatility in browser interaction."}),"\n",(0,t.jsxs)(n.p,{children:["A key differentiator of Cypress, not only from Selenium but also from other test automation frameworks,\nis its ",(0,t.jsx)(n.a,{href:"/app/get-started/why-cypress#%E6%9E%B6%E6%9E%84",children:"unique approach"})," of running tests\ninside an interactive browser rather than against one. This approach ",(0,t.jsx)(n.a,{href:"/app/get-started/why-cypress#%E6%8A%97%E6%B3%A2%E5%8A%A8",children:"minimizes flakiness"}),"\nand grants users greater control over both the framework and the application under test. Cypress's ability to wait for page loading without explicit\ndeclaration allows for a pause in execution until application is fully ready. Additionally, Cypress simplifies test recording\nwithout requiring complex configurations or setups, facilitating easy troubleshooting and bug\nreporting with access to screenshots, videos, and time travel debugging."]}),"\n",(0,t.jsxs)(n.p,{children:["Furthermore, the addition of ",(0,t.jsx)(n.a,{href:"/app/component-testing/get-started",children:"Component Testing"})," to Cypress has fostered\n",(0,t.jsx)(n.a,{href:"https://www.cypress.io/blog/2023/01/26/what-cypress-component-testing-means-for-qa-teams",children:"collaboration"})," between testing and development teams,\nenabling them to work with the same tools and language. This alignment streamlines the testing process and promotes\nconsistency and efficiency across teams."]}),"\n",(0,t.jsx)(n.h2,{id:"Top-5-reasons-to-migrate",children:"Top 5 reasons to migrate"}),"\n",(0,t.jsx)(n.p,{children:"While migration is often perceived as a hassle, investing in Cypress is undoubtedly worthwhile.\nIn fact, migrating to Cypress may not even pose a significant challenge."}),"\n",(0,t.jsx)(n.h3,{id:"1-Reduction-of-Flakiness",children:"1. Reduction of Flakiness"}),"\n",(0,t.jsx)(n.p,{children:"One of the primary benefits of Cypress is its ability to reduce flakiness in tests. Occasional\ntest failures can undermine trust in the testing framework. Cypress addresses this concern by\noffering features such as automatic retries and implicit waiting on the application, effectively\nminimizing flakiness and enhancing test reliability."}),"\n",(0,t.jsx)(n.h3,{id:"2-Ease-of-Setup",children:"2. Ease of Setup"}),"\n",(0,t.jsxs)(n.p,{children:["Unlike traditional test automation frameworks that require cumbersome setup processes, Cypress\nstreamlines the setup with just two Node.js commands: ",(0,t.jsx)(n.a,{href:"/app/get-started/install-cypress",children:"'npm install'"}),"\nand ",(0,t.jsx)(n.a,{href:"/app/get-started/open-the-app#cypress-open",children:"'npx cypress open'"}),".\nWithin seconds, users can have their first test up and running. Since Cypress utilizes\nlocally installed browsers, there's no need for complex configurations or additional installations."]}),"\n",(0,t.jsx)(n.h3,{id:"3-Infinitely-Expandable",children:"3. Infinitely Expandable"}),"\n",(0,t.jsxs)(n.p,{children:["Recognizing the diverse needs of web applications, Cypress offers extensibility through various\n",(0,t.jsx)(n.a,{href:"/app/plugins/plugins-list",children:"plugins"}),". These plugins, many of which are contributed by the\ncommunity, allow users to tailor their testing framework to specific project requirements, ensuring flexibility and scalability."]}),"\n",(0,t.jsx)(n.h3,{id:"4-Strong-Community-Support",children:"4. Strong Community Support"}),"\n",(0,t.jsxs)(n.p,{children:["Cypress boasts a vibrant community that contributes plugins and prioritizes documentation.\nWith extensive documentation, support initiatives like the ",(0,t.jsx)(n.a,{href:"https://www.cypress.io/ambassadors",children:"Ambassador program"}),", and a ",(0,t.jsx)(n.a,{href:"https://discord.com/invite/cypress",children:"Discord\ncommunity"})," of over 10,000 testers and developers, Cypress users benefit from a wealth of resources and\nassistance, making it a highly supported testing framework."]}),"\n",(0,t.jsx)(n.h3,{id:"5-Ease-of-Use",children:"5. Ease of Use"}),"\n",(0,t.jsxs)(n.p,{children:["Compared to Selenium, Cypress offers a more intuitive and user-friendly experience. Features like the ",(0,t.jsx)(n.a,{href:"/app/core-concepts/open-mode#Selector-Playground",children:"selector\nplayground"})," and\n",(0,t.jsx)(n.a,{href:"/app/guides/cypress-studio",children:"Cypress Studio"})," simplify test writing and\ndebugging, allowing users to focus on creating effective tests without the need for constant navigation between the test server and browser. This\nstreamlined approach enhances productivity and accelerates the testing process."]}),"\n",(0,t.jsxs)(n.p,{children:["Cypress ",(0,t.jsx)(n.a,{href:"/cloud/features/test-replay",children:"Test Replay"}),", which provides\nthe ability to time travel and interactively debug tests that ran in your CI/CD pipeline, is not a capability that Selenium provides."]}),"\n",(0,t.jsx)(n.p,{children:"With Cypress, testing becomes not only more reliable and efficient but also more enjoyable for developers and QA professionals alike."}),"\n",(0,t.jsx)(n.h2,{id:"Evaluating-Suitability-for-Migration",children:"Evaluating Suitability for Migration"}),"\n",(0,t.jsx)(n.p,{children:"In order for a migration to proceed smoothly, it's important to conduct a thorough analysis of the existing test cases\nand framework functionality. This analysis serves as a cornerstone for determining the priority of test case migration since\nnot all test cases need to be migrated at once. Depending on the organization's needs, emphasis may be placed on high-priority cases rather\nthan quick wins. Additionally, it is essential to evaluate whether any business or organization-specific logic embedded within the framework\ncan be rebuilt or migrated to JavaScript or TypeScript."}),"\n",(0,t.jsxs)(n.p,{children:["If the current test automation framework employs the ",(0,t.jsx)(n.a,{href:"https://www.selenium.dev/documentation/test_practices/encouraged/page_object_models/",children:"Page Object Model"}),",\nit may be advantageous to start with simpler tasks before tackling more complex test cases. Beginning with low-hanging fruit allows for the migration\nof selectors and basic interactions, providing you with a gradual introduction to the framework."]}),"\n",(0,t.jsx)(n.p,{children:"It's important to note that if the Selenium framework relies on XPath, migration will necessitate changing those selectors.\nWhile the 'cypress-xpath' plugin remains functional, it is deprecated and may not be the optimal solution in the long term."}),"\n",(0,t.jsx)(n.h2,{id:"Getting-started-with-Cypress",children:"Getting started with Cypress"}),"\n",(0,t.jsx)(n.p,{children:"Installing and configuring Cypress is very easy and we have provided step-by-step guides to help you get started."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["First ",(0,t.jsx)(n.a,{href:"/app/get-started/install-cypress",children:"install Cypress"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Then ",(0,t.jsx)(n.a,{href:"/app/get-started/open-the-app",children:"open the Cypress app"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Check out our in-depth ",(0,t.jsx)(n.a,{href:"/app/end-to-end-testing/writing-your-first-end-to-end-test",children:"E2E getting started guide"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"And now you're all set to start the migration."}),"\n",(0,t.jsx)(n.h2,{id:"Strategy-and-Considerations",children:"Strategy and Considerations"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["If the current automation framework supports Cucumber, jump to the section ",(0,t.jsx)(n.a,{href:"#Migrating-test-cases-with-Cucumber",children:"Migrating test cases with Cucumber"}),"."]})}),"\n",(0,t.jsx)(n.p,{children:"Before starting to write any code, take the time to assess the architecture of your framework. A well-structured\nframework will be a great deal easier to maintain and expand in the future."}),"\n",(0,t.jsx)(n.p,{children:"Some questions to discuss:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Will we use Page-objects?"}),"\n",(0,t.jsx)(n.li,{children:"Will we mock API calls?"}),"\n",(0,t.jsx)(n.li,{children:"How will we divide the tests?"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For example: While the utilization of the Page Object Model (POM) has been widely discussed and embraced as a best\npractice, there remains divergence in opinion regarding its implementation. Some advocate for a minimalist approach,\nwherein the POM solely comprises page selectors, while others advocate for a more comprehensive approach that includes\nboth selectors and all possible page actions. It's crucial to engage in team discussions to align on POM structure,\nthereby avoiding surprises during the initial pull request."}),"\n",(0,t.jsxs)(n.p,{children:["Another critical consideration is whether the team intends to leverage\n",(0,t.jsx)(n.a,{href:"/api/commands/intercept",children:(0,t.jsx)(n.code,{children:"cy.intercept()"})})," to stub API calls.\nWhile this approach reduces the need for end-to-end tests, it significantly increases the number of smaller tests.\nFor some teams, the heightened maintenance overhead may outweigh the benefits. However, stubbing API requests can diminish\nbackend dependencies and enhance framework stability."]}),"\n",(0,t.jsxs)(n.p,{children:["In larger applications, locating specific tests within the framework can prove challenging. Therefore, establishing\nguidelines for ",(0,t.jsx)(n.a,{href:"/app/core-concepts/writing-and-organizing-tests",children:"test organization"})," is essential for creating a maintainable framework. Some teams prefer organizing tests\nbased on application functionality, while others opt for organization by webpage. While performance and functionality\nremain unaffected, clear guidelines on test placement are imperative for framework maintainability."]}),"\n",(0,t.jsx)(n.p,{children:"These considerations serve as a roadmap toward crafting a well-structured, easily maintainable, and enjoyable-to-use framework.\nInvesting time in contemplation and extensive team discussions regarding these questions will yield significant dividends in the long run."}),"\n",(0,t.jsx)(n.h2,{id:"Migrating-test-cases",children:"Migrating test cases"}),"\n",(0,t.jsx)(n.p,{children:"With thorough preparation underway, it's time to initiate the actual migration process."}),"\n",(0,t.jsxs)(n.p,{children:["One of the first things to migrate would be all page-objects or selectors, and depending on the frontend framework the\ndevelopers are using, this could be a quick find and replace. For instance, in Vue.js the selector in Selenium would be\n",(0,t.jsx)(n.code,{children:"vl-checkbox"})," while in Cypress this would be ",(0,t.jsx)(n.code,{children:".vl-checkbox"}),". This will allow you to quickly have Cypress tests that can\nbe used to test your application. This may also be an opportunity to review your tests to see how subject to change the\nselectors are today. Cypress documents many best practices about how to write robust tests and the section on\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/best-practices#Selecting-Elements",children:"selecting elements"})," is a great resource to review."]}),"\n",(0,t.jsxs)(n.p,{children:["One of the most significant changes between Selenium and Cypress is the actual testing syntax.\nWhile Selenium will run a class or different scenarios, Cypress will run every ",(0,t.jsx)(n.code,{children:"it"})," in a ",(0,t.jsx)(n.code,{children:"*.cy.js"})," file.\nSo, the flow of a test should be transferred inside an ",(0,t.jsx)(n.code,{children:"it"}),". To make matters more structured, it is possible to add\nseveral ",(0,t.jsx)(n.code,{children:"it"}),"s inside a ",(0,t.jsx)(n.code,{children:"describe"}),". This allows you as the user to create a subdivision akin to test suites and test cases."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"describe('General information', () => {\n  beforeEach(() => {\n    cy.get('#loginButton').click()\n  })\n\n  it('Header is visible', () => {\n    cy.get('#header').should('be.visible')\n  })\n\n  it('Footer is visible', () => {\n    cy.get('#footer').should('be.visible')\n  })\n})\n"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"Another big change is that you no longer need any WebDriver definitions. Cypress\ntakes care of opening and closing the browser without any explicit prompting, unlike\nSelenium. Any code that is used to define the WebDriver is now obsolete."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:" WebDriver driver = new ChromeDriver();\n\n WebDriverWait wait = new WebDriverWait(driver, 10);\n\n driver.quit();\n"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"Next would be to replace all the potential actions. The following code is fairly\nstandard in Selenium frameworks."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'wait.until(EC.element_to_be_clickable((By.ID, "myButton"))).click()\n'})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"It is fairly easy to change this line of code to work inside a Cypress framework.\nIt could even be done with a find and replace. In Cypress, the command would be the\nfollowing:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Javascript",children:"cy.get('#myButton').click()\n"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.p,{children:["Any wait until functionality that you have been using in Selenium is no longer required\nin Cypress. This functionality is ",(0,t.jsx)(n.a,{href:"/app/core-concepts/retry-ability",children:"built in"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The next vital part to migrate would be the ",(0,t.jsx)(n.a,{href:"/app/references/assertions",children:"assertions"}),". We can all agree assertions\nare moderately vital to a test automation framework. The next piece of code is a\npython Selenium assertion to validate if a button is visible. While it is possible\nto add third-party libraries, the built-in assertions of Cypress can tackle a wide\nrange of situations."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'assert driver.find_element(By.ID, "myButton").is_displayed()\n'})}),"\n",(0,t.jsx)(n.p,{children:"In Cypress, the same command would be:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"cy.get('#myButton').should('be.visible')\n"})}),"\n",(0,t.jsx)(n.p,{children:"Considering the easy and clear syntax of Cypress, transferring all the selectors\nmight take the longest. And while copying and pasting the selectors is definitely\nan option, rewriting the selectors might be required to conform to the best practices."}),"\n",(0,t.jsx)(n.h5,{id:"Multiple-tabs",children:"Multiple tabs"}),"\n",(0,t.jsxs)(n.p,{children:["When you have the need to interact with multiple browser tabs in Cypress, an official plugin has been provided to accomplish this\ngoal. The ",(0,t.jsx)(n.a,{href:"https://github.com/cypress-io/cypress/tree/develop/npm/puppeteer",children:"Puppeteer plugin"})," utilizes Puppeteer's browser API\nwith one command within Cypress."]}),"\n",(0,t.jsx)(n.h5,{id:"File-upload",children:"File upload"}),"\n",(0,t.jsxs)(n.p,{children:["Because Selenium cannot interact with the file upload dialog, it provides a way to upload files without opening the dialog. Cypress\nprovides support uploading files through the built-in ",(0,t.jsx)(n.a,{href:"/api/commands/selectfile",children:(0,t.jsx)(n.code,{children:".selectFile()"})})," command. There are\n",(0,t.jsx)(n.a,{href:"https://www.cypress.io/blog/2022/01/19/uploading-files-with-selectfile",children:"many options"})," available to allow you to upload a single\nfile, multiple files, and even drag and drop in Cypress."]}),"\n",(0,t.jsx)(n.h5,{id:"GraphQL",children:"GraphQL"}),"\n",(0,t.jsxs)(n.p,{children:["Given the increasing prominence of GraphQL, the community has responded accordingly. Validating the contents of GraphQL\nrequests or responses is entirely feasible using Cypress's native intercept functionality. This plugin enhances both\nthe stability and usability of the intercept feature: ",(0,t.jsx)(n.a,{href:"https://github.com/Shopify/cypress-graphql",children:"Shopify/cypress-graphql"})]}),"\n",(0,t.jsx)(n.h2,{id:"Migrating-test-cases-with-Cucumber",children:"Migrating test cases with Cucumber"}),"\n",(0,t.jsxs)(n.p,{children:["If you're currently using a Cucumber framework, ",(0,t.jsx)(n.a,{href:"https://github.com/badeball/cypress-cucumber-preprocessor",children:"this Cypress plugin"})," can assist you\nin transitioning smoothly. Although it alters the conventional ",(0,t.jsx)(n.code,{children:"describe"})," and ",(0,t.jsx)(n.code,{children:"it"})," functionality, the adjustment process should\nbe relatively straightforward."]}),"\n",(0,t.jsxs)(n.p,{children:["The main difference would be that instead of adding the whole flow into a single ",(0,t.jsx)(n.code,{children:"it"})," section, you add the different steps into\nan ",(0,t.jsx)(n.code,{children:"it"})," like section, where the ",(0,t.jsx)(n.code,{children:"it"})," is replaced with the standard Gherkin syntax."]}),"\n",(0,t.jsx)(n.p,{children:"The first snippet comprises plain Cypress code, whereas the second snippet demonstrates the Cucumber version."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'it("I should see a search bar", () => {\n  cy.visit("https://www.duckduckgo.com");\n  cy.get("input").should(\n    "have.attr",\n    "placeholder",\n    "Search the web without being tracked"\n  )\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { When, Then } from '@badeball/cypress-cucumber-preprocessor'\n\nWhen('I visit duckduckgo.com', () => {\n  cy.visit('https://www.duckduckgo.com')\n})\n\nThen('I should see a search bar', () => {\n  cy.get('input').should(\n    'have.attr',\n    'placeholder',\n    'Search the web without being tracked'\n  )\n})\n"})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"As evident, the actual code or logic remains unchanged. The difference lies in the\nstructure of the spec file and the framework's architecture."}),"\n",(0,t.jsx)(n.h2,{id:"Integration-with-CICD-Pipeline",children:"Integration with CI/CD Pipeline"}),"\n",(0,t.jsx)(n.h3,{id:"Integration-with-the-current-Pipeline",children:"Integration with the current Pipeline"}),"\n",(0,t.jsx)(n.p,{children:"Cypress can be integrated into any pipeline technology using its headless runner. This headless runner leverages\nthe Electron browser, ensuring minimal adaptation of the current CI/CD. Given the widespread usage of Docker in\nmost pipelines today, the Cypress pipeline is no exception. Integration becomes effortless by employing a Node.js\ndocker image or one provided by Cypress via Docker Hub. These Docker images, not only furnished by Cypress,\ninclude various versions of Chrome, Firefox, and Edge."}),"\n",(0,t.jsx)(n.p,{children:"Executing the following command initiates a headless run against the Electron browser. Upon completion, a succinct\ntable is generated, detailing the number of tests for each 'cy.js' file, in addition to the failed, skipped and passed\ntests with the run time of each specific 'cy.js' file. At the bottom of the table, a comprehensive summary displays the\ntotal number of tests run, the duration of the run, and the counts of failed, passed, and skipped tests."}),"\n",(0,t.jsx)(i,{}),"\n",(0,t.jsx)(n.p,{children:"This would completely replace the Selenium step in your current CI/CD workflow."}),"\n",(0,t.jsxs)(n.p,{children:["Learn more about ",(0,t.jsx)(n.a,{href:"/app/continuous-integration/overview",children:"running Cypress tests in Continuous Integration"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"Cypress-Cloud",children:"Cypress Cloud"}),"\n",(0,t.jsxs)(n.p,{children:["The notable distinction in integration between Cypress and Selenium emerges when discussing\n",(0,t.jsx)(n.a,{href:"/cloud/get-started/introduction",children:"Cypress Cloud"}),", a service built on the rich result data coming from tests run in the\nopen source application."]}),"\n",(0,t.jsx)(n.p,{children:"Cypress.io offers its tailored pipeline structure, meticulously designed to execute tests efficiently.\nAccompanying this structure are several advanced features that warrant attention during\nmigration to Cypress. While it's feasible to harness all the advantages of migration without Cypress Cloud,\nit would be remiss not to explore the potential benefits afforded by its features."}),"\n",(0,t.jsx)(n.p,{children:"Some of the core features include:"}),"\n",(0,t.jsx)(n.h5,{id:"Test-Replay",children:(0,t.jsx)(n.a,{href:"/cloud/features/test-replay",children:"Test Replay"})}),"\n",(0,t.jsx)(n.p,{children:"One of the major difficulties in troubleshooting headless testing is having to reproduce the failure in your local\nenvironment in order to debug failures in CI. Cypress Cloud resolves this issue with Test Replay. Test Replay's\ninteractive interface allows for faster debugging, enabling your team to time travel through your application under\ntest to rapidly identify and resolve issues that surfaced in CI. This eliminates the need to reproduce CI issues\nlocally so you can swiftly get back to shipping valuable software for your users. Gain visibility into the events\nleading up to crashes or failures by inspecting the DOM, network events, and console logs of your application under\ntest exactly as they ran in CI."}),"\n",(0,t.jsx)(n.h5,{id:"Parallelization",children:(0,t.jsx)(n.a,{href:"/cloud/features/smart-orchestration/parallelization",children:"Parallelization"})}),"\n",(0,t.jsx)(n.p,{children:"To enhance testing efficiency further, Cypress Cloud offers a built-in solution for test parallelization. With a simple\ntoggle, tests can run in parallel, eliminating the need for complex configurations to run tests concurrently."}),"\n",(0,t.jsxs)(n.p,{children:["Cypress will assign each spec file to an available machine based on our\n",(0,t.jsx)(n.a,{href:"/cloud/features/smart-orchestration/load-balancing#Balance-strategy",children:"balance strategy"}),".\nDue to this balance strategy, the run order of the spec files is not guaranteed when parallelized."]}),"\n",(0,t.jsx)(n.h5,{id:"Analytics-and-Reporting",children:(0,t.jsx)(n.a,{href:"/cloud/features/analytics/overview",children:"Analytics and Reporting"})}),"\n",(0,t.jsxs)(n.p,{children:["The last step in pipeline integration is reporting the results. While most pipelines can report if there is a failure,\nprecise numbers require a bit more configuration. One of the most popular plugins to show reports is\nmochawesome (",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/cypress-mochawesome-reporter",children:"cypress-mochawesome-reporter"}),"). This\nplugin can easily be integrated into most pipeline infrastructure, with the correct CI/CD plugin."]}),"\n",(0,t.jsx)(n.p,{children:"But even without the mochawesome package, any pipeline infrastructure can register the error code (error code 1) if\nthere are test failures. And as soon as this error code is found, webhooks can trigger a notification in your medium of choice."}),"\n",(0,t.jsxs)(n.p,{children:["Cypress Cloud can also serve as an automated pipeline integration, furnishing ",(0,t.jsx)(n.a,{href:"/cloud/features/analytics/overview",children:"built-in analytics and reporting capabilities"}),". This feature grants you visibility into metrics such as run duration,\nflaky tests, and the slowest-performing tests, enabling comprehensive monitoring of test health at scale. Moreover, this\nnegates the necessity of adding another package or dependency, as Cypress Cloud seamlessly interacts with the tests."]}),"\n",(0,t.jsx)(n.h2,{id:"Conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"In this migration guide, we've delved into a diverse array of topics. Beginning with a brief overview of the advantages\nand limitations of both testing frameworks, we've advocated for the feasibility of migration and delved into key design\nconsiderations before initiating the transition."}),"\n",(0,t.jsx)(n.p,{children:"Following this, we've discussed the initial steps of the migration process and prioritized which tests to migrate first.\nRecognizing the significance of the migration process itself, we've devoted attention to exploring various implementations\nand identifying plugins that could enrich the Cypress experience."}),"\n",(0,t.jsx)(n.p,{children:"Welcome to the world of smooth testing!"}),"\n",(0,t.jsxs)(n.p,{children:["Cypress not only competes effectively with established frameworks like Selenium but also introduces a host of enhancements.\nThese enhancements encompass easier setup and maintenance, along with\n",(0,t.jsx)(n.a,{href:"https://go.cypress.io/hubfs/Case-Study_Beamery.pdf",children:"significant quality-of-life improvements"}),". The\n",(0,t.jsx)(n.a,{href:"https://go.cypress.io/hubfs/Case-Study_Perlego%20(1).pdf",children:"minimized flakiness"}),"\nand ",(0,t.jsx)(n.a,{href:"https://go.cypress.io/hubfs/Case-Study_vidyard.pdf",children:"simplified programming experience"})," have positioned Cypress as a premier Test\nAutomation framework, embraced by thousands of development and testing teams."]}),"\n",(0,t.jsx)(n.p,{children:"Migrations have traditionally been perceived as costly and time-intensive endeavors. We trust that this guide has alleviated\nthose concerns. The migration process is not only straightforward but also promises a more stable and efficient framework,\ndelivering substantial benefits in the long run."})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>a});var t=i(7294);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);