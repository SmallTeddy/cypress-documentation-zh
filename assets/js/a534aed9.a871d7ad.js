"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[3800],{8483:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var s=r(5893),o=r(1151);const i={title:"Browser Launch API"},t=void 0,c={id:"api/node-events/browser-launch-api",title:"Browser Launch API",description:"Before Cypress launches a browser, it gives you the opportunity to modify the",source:"@site/docs/api/node-events/browser-launch-api.mdx",sourceDirName:"api/node-events",slug:"/api/node-events/browser-launch-api",permalink:"/api/node-events/browser-launch-api",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/node-events/browser-launch-api.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",frontMatter:{title:"Browser Launch API"},sidebar:"api",previous:{title:"Before Spec API",permalink:"/api/node-events/before-spec-api"},next:{title:"Configuration API",permalink:"/api/node-events/configuration-api"}},a={},l=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:2},{value:"Modify browser launch arguments, preferences, extensions, and environment",id:"Modify-browser-launch-arguments-preferences-extensions-and-environment",level:3},{value:"Modify browser launch arguments:",id:"Modify-browser-launch-arguments",level:4},{value:"Open devtools by default",id:"Open-devtools-by-default",level:5},{value:"Add browser extensions:",id:"Add-browser-extensions",level:4},{value:"Configure browser environment:",id:"Configure-browser-environment",level:4},{value:"Changing browser preferences:",id:"Changing-browser-preferences",level:4},{value:"Modify Electron app switches",id:"Modify-Electron-app-switches",level:3},{value:"Linux/OSX",id:"LinuxOSX",level:4},{value:"Windows",id:"Windows",level:4},{value:"See all Chrome browser switches",id:"See-all-Chrome-browser-switches",level:3},{value:"Examples",id:"Examples",level:2},{value:"Set screen size when running headless",id:"Set-screen-size-when-running-headless",level:3},{value:"Override the device pixel ratio",id:"Override-the-device-pixel-ratio",level:3},{value:"Start fullscreen",id:"Start-fullscreen",level:3},{value:"Use fake video for webcam testing",id:"Use-fake-video-for-webcam-testing",level:3},{value:"Support unique file download mime types",id:"Support-unique-file-download-mime-types",level:3},{value:"Disable <code>--headless=new</code> for Chrome",id:"Disable---headlessnew-for-Chrome",level:3},{value:"Set a Firefox flag",id:"Set-a-Firefox-flag",level:3},{value:"History",id:"History",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components},{CypressConfigFileTabs:r,DocsImage:i,Icon:t,WarningSetupNodeEvents:c}=n;return r||p("CypressConfigFileTabs",!0),i||p("DocsImage",!0),t||p("Icon",!0),c||p("WarningSetupNodeEvents",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Before Cypress launches a browser, it gives you the opportunity to modify the\nbrowser preferences, install extensions, add and remove command-line arguments,\nand modify other options from the\n",(0,s.jsx)(n.a,{href:"/app/plugins/plugins-guide#Using-a-plugin",children:"setupNodeEvents"})," function."]}),"\n",(0,s.jsx)(n.h2,{id:"Syntax",children:"Syntax"}),"\n",(0,s.jsx)(c,{}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser = {}, launchOptions) => {\n        /* ... */\n      })\n    },\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser = {}, launchOptions) => {\n        /* ... */\n      })\n    },\n  },\n})\n"})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(t,{name:"angle-right"})," ",(0,s.jsxs)(n.strong,{children:["browser ",(0,s.jsx)(n.em,{children:"(object)"})]})]}),"\n",(0,s.jsx)(n.p,{children:"An object describing the browser being launched, with the following properties:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"name"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsxs)(n.td,{children:["Machine-friendly name, like ",(0,s.jsx)(n.code,{children:"chrome"}),", ",(0,s.jsx)(n.code,{children:"electron"}),", ",(0,s.jsx)(n.code,{children:"edge"}),", or ",(0,s.jsx)(n.code,{children:"firefox"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"family"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsxs)(n.td,{children:["Rendering engine being used. ",(0,s.jsx)(n.code,{children:"chromium"})," or ",(0,s.jsx)(n.code,{children:"firefox"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"channel"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsxs)(n.td,{children:["Release channel of the browser, such as ",(0,s.jsx)(n.code,{children:"stable"}),", ",(0,s.jsx)(n.code,{children:"dev"}),", or ",(0,s.jsx)(n.code,{children:"canary"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"displayName"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"Human-readable display name for the browser."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"version"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"Full version."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"path"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"Path to the browser on disk. Blank for Electron."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"info"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(Optional)"})," Extra information about the browser (used for display in the browser selector)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"majorVersion"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:"The major version number of the browser."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"isHeadless"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:"Whether the browser is running headlessly."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"isHeaded"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:"Whether the browser displays headed."})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(t,{name:"angle-right"})," ",(0,s.jsxs)(n.strong,{children:["launchOptions ",(0,s.jsx)(n.em,{children:"(object)"})]})]}),"\n",(0,s.jsx)(n.p,{children:"Options that can be modified to control how the browser is launched, with the\nfollowing properties:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"preferences"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"object"})}),(0,s.jsxs)(n.td,{children:["An object describing browser preferences. Differs between browsers. See ",(0,s.jsx)(n.a,{href:"#Changing-browser-preferences",children:"Changing browser preferences"})," for details."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"args"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string[]"})}),(0,s.jsxs)(n.td,{children:["An array of strings that will be passed as command-line args when the browser is launched. Has no effect on Electron. See ",(0,s.jsx)(n.a,{href:"#Modify-browser-launch-arguments",children:"Modify browser launch arguments"})," for details."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"extensions"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string[]"})}),(0,s.jsxs)(n.td,{children:["An array of paths to folders containing unpacked WebExtensions to be loaded before the browser starts. Note: Electron currently only supports Chrome DevTools extensions. See ",(0,s.jsx)(n.a,{href:"#Add-browser-extensions",children:"Add browser extensions"})," for details."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"env"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"object"})}),(0,s.jsxs)(n.td,{children:["An object of environment variables to pass to the launched browser. See ",(0,s.jsx)(n.a,{href:"#Configure-browser-environment",children:"Configure browser environment"})," for details."]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"Usage",children:"Usage"}),"\n",(0,s.jsx)(n.h3,{id:"Modify-browser-launch-arguments-preferences-extensions-and-environment",children:"Modify browser launch arguments, preferences, extensions, and environment"}),"\n",(0,s.jsxs)(n.p,{children:["Using the ",(0,s.jsx)(n.a,{href:"/app/plugins/plugins-guide#Using-a-plugin",children:"setupNodeEvents"}),"\nfunction you can tap into the ",(0,s.jsx)(n.code,{children:"before:browser:launch"})," event and modify how\nCypress launches the browser (e.g. modify arguments, user preferences, and\nextensions)."]}),"\n",(0,s.jsxs)(n.p,{children:["This event will yield you the ",(0,s.jsx)(n.code,{children:"browser"})," object, which gives you information\nabout the browser, and the ",(0,s.jsx)(n.code,{children:"launchOptions"})," object, which allows you to modify\nhow the browser is launched."]}),"\n",(0,s.jsxs)(n.p,{children:["The returned ",(0,s.jsx)(n.code,{children:"launchOptions"})," object will become the new launch options for the\nbrowser."]}),"\n",(0,s.jsx)(n.h4,{id:"Modify-browser-launch-arguments",children:"Modify browser launch arguments:"}),"\n",(0,s.jsx)(n.p,{children:"Here are args available for the currently supported browsers:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://peter.sh/experiments/chromium-command-line-switches/",children:"Chromium-based browsers"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/docs/Mozilla/Command_Line_Options",children:"Firefox"})}),"\n"]}),"\n",(0,s.jsx)(n.h5,{id:"Open-devtools-by-default",children:"Open devtools by default"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser = {}, launchOptions) => {\n        // `args` is an array of all the arguments that will\n        // be passed to browsers when it launches\n        console.log(launchOptions.args) // print all current args\n\n        if (browser.family === 'chromium' && browser.name !== 'electron') {\n          // auto open devtools\n          launchOptions.args.push('--auto-open-devtools-for-tabs')\n        }\n\n        if (browser.family === 'firefox') {\n          // auto open devtools\n          launchOptions.args.push('-devtools')\n        }\n\n        if (browser.name === 'electron') {\n          // auto open devtools\n          launchOptions.preferences.devTools = true\n        }\n\n        // whatever you return here becomes the launchOptions\n        return launchOptions\n      })\n    },\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser = {}, launchOptions) => {\n        // `args` is an array of all the arguments that will\n        // be passed to browsers when it launches\n        console.log(launchOptions.args) // print all current args\n\n        if (browser.family === 'chromium' && browser.name !== 'electron') {\n          // auto open devtools\n          launchOptions.args.push('--auto-open-devtools-for-tabs')\n        }\n\n        if (browser.family === 'firefox') {\n          // auto open devtools\n          launchOptions.args.push('-devtools')\n        }\n\n        if (browser.name === 'electron') {\n          // auto open devtools\n          launchOptions.preferences.devTools = true\n        }\n\n        // whatever you return here becomes the launchOptions\n        return launchOptions\n      })\n    },\n  },\n})\n"})})]}),"\n",(0,s.jsx)(n.h4,{id:"Add-browser-extensions",children:"Add browser extensions:"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser, launchOptions) => {\n        // supply the absolute path to an unpacked extension's folder\n        // NOTE: extensions cannot be loaded in headless Chrome\n        launchOptions.extensions.push('Users/jane/path/to/extension')\n\n        return launchOptions\n      })\n    },\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser, launchOptions) => {\n        // supply the absolute path to an unpacked extension's folder\n        // NOTE: extensions cannot be loaded in headless Chrome\n        launchOptions.extensions.push('Users/jane/path/to/extension')\n\n        return launchOptions\n      })\n    },\n  },\n})\n"})})]}),"\n",(0,s.jsx)(n.h4,{id:"Configure-browser-environment",children:"Configure browser environment:"}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(t,{name:"exclamation-triangle"})," This option is not supported when targeting\nElectron."]})}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser, launchOptions) => {\n        launchOptions.env.CUSTOM_ENV_VALUE = '1'\n\n        return launchOptions\n      })\n    },\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser, launchOptions) => {\n        launchOptions.env.CUSTOM_ENV_VALUE = '1'\n\n        return launchOptions\n      })\n    },\n  },\n})\n"})})]}),"\n",(0,s.jsx)(n.h4,{id:"Changing-browser-preferences",children:"Changing browser preferences:"}),"\n",(0,s.jsx)(n.p,{children:"Here are preferences available for the currently supported browsers:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://src.chromium.org/viewvc/chrome/trunk/src/chrome/common/pref_names.cc?view=markup",children:"Chromium-based browsers"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/electron/electron/blob/master/docs/api/browser-window.md#new-browserwindowoptions",children:"Electron"})}),"\n",(0,s.jsxs)(n.li,{children:["Firefox: visit ",(0,s.jsx)(n.code,{children:"about:config"})," URL within your Firefox browser to see all\navailable preferences."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["If you want to ignore Chrome preferences altogether, you can set ",(0,s.jsx)(n.code,{children:"IGNORE_CHROME_PREFERENCES"})," as an environment variable when running Cypress."]})}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser, launchOptions) => {\n        if (browser.family === 'chromium' && browser.name !== 'electron') {\n          // in Chromium, preferences can exist in Local State, Preferences, or Secure Preferences\n          // via launchOptions.preferences, these can be acccssed as `localState`, `default`, and `secureDefault`\n\n          // for example, to set `somePreference: true` in Preferences:\n          launchOptions.preferences.default['preference'] = true\n\n          return launchOptions\n        }\n\n        if (browser.family === 'firefox') {\n          // launchOptions.preferences is a map of preference names to values\n          launchOptions.preferences['some.preference'] = true\n\n          return launchOptions\n        }\n\n        if (browser.name === 'electron') {\n          // launchOptions.preferences is a `BrowserWindow` `options` object\n          launchOptions.preferences.darkTheme = true\n\n          return launchOptions\n        }\n      })\n    },\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser, launchOptions) => {\n        if (browser.family === 'chromium' && browser.name !== 'electron') {\n          // in Chromium, preferences can exist in Local State, Preferences, or Secure Preferences\n          // via launchOptions.preferences, these can be acccssed as `localState`, `default`, and `secureDefault`\n\n          // for example, to set `somePreference: true` in Preferences:\n          launchOptions.preferences.default['preference'] = true\n\n          return launchOptions\n        }\n\n        if (browser.family === 'firefox') {\n          // launchOptions.preferences is a map of preference names to values\n          launchOptions.preferences['some.preference'] = true\n\n          return launchOptions\n        }\n\n        if (browser.name === 'electron') {\n          // launchOptions.preferences is a `BrowserWindow` `options` object\n          launchOptions.preferences.darkTheme = true\n\n          return launchOptions\n        }\n      })\n    },\n  },\n})\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"Modify-Electron-app-switches",children:"Modify Electron app switches"}),"\n",(0,s.jsxs)(n.p,{children:["The Cypress Launchpad is an Electron application, and its behavior (and the\nbehavior of the bundled-in Electron browser) can be customized using command\nline switches. The supported switches depend on the Electron version, see\n",(0,s.jsx)(n.a,{href:"https://www.electronjs.org/docs/api/command-line-switches",children:"Electron documentation"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["You can pass Electron-specific launch arguments using the\n",(0,s.jsx)(n.code,{children:"ELECTRON_EXTRA_LAUNCH_ARGS"})," environment variable. For example, to disable HTTP\nbrowser cache and ignore certificate errors, you can set the environment\nvariables before running Cypress like below:"]}),"\n",(0,s.jsx)(n.h4,{id:"LinuxOSX",children:"Linux/OSX"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"export ELECTRON_EXTRA_LAUNCH_ARGS=--disable-http-cache --lang=es\n"})}),"\n",(0,s.jsx)(n.h4,{id:"Windows",children:"Windows"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"set ELECTRON_EXTRA_LAUNCH_ARGS=--disable-http-cache --lang=es\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Cypress already sets some the Electron command line switches internally. See\nfile\n",(0,s.jsx)(n.a,{href:"https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/environment.js",children:"packages/server/lib/environment.js"}),".\nThere is no way to see all currently set switches after Electron's launch."]}),"\n",(0,s.jsx)(n.h3,{id:"See-all-Chrome-browser-switches",children:"See all Chrome browser switches"}),"\n",(0,s.jsxs)(n.p,{children:["If you are running Cypress tests using a Chromium-based browser, you can see ALL\ncurrently set command line switches and the browser version information by\nopening a new tab and typing ",(0,s.jsx)(n.code,{children:"chrome://version"})," url."]}),"\n",(0,s.jsx)(i,{src:"/img/api/chrome-switches.png",alt:"See all Chrome switches"}),"\n",(0,s.jsx)(n.h2,{id:"Examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"Set-screen-size-when-running-headless",children:"Set screen size when running headless"}),"\n",(0,s.jsx)(n.p,{children:"When a browser runs headless, there is no physical display. You can override the\ndefault screen size of 1280x720 when running headless as shown below. This will\naffect the size of screenshots and videos taken during the run."}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["This setting changes the display size of the screen and does not affect the\n",(0,s.jsx)(n.code,{children:"viewportWidth"})," and ",(0,s.jsx)(n.code,{children:"viewportHeight"})," set in the\n",(0,s.jsx)(n.a,{href:"/app/references/configuration",children:"Cypress configuration"}),". The ",(0,s.jsx)(n.code,{children:"viewportWidth"}),"\nand ",(0,s.jsx)(n.code,{children:"viewportHeight"})," only affect the size of the application under test\ndisplayed inside the Cypress Test Runner. Read the blog post\n",(0,s.jsx)(n.a,{href:"https://www.cypress.io/blog/2021/03/01/generate-high-resolution-videos-and-screenshots/",children:"Generate High-Resolution Videos and Screenshots"}),"\nfor details."]})}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser, launchOptions) => {\n        if (browser.name === 'chrome' && browser.isHeadless) {\n          // fullPage screenshot size is 1400x1200 on non-retina screens\n          // and 2800x2400 on retina screens\n          launchOptions.args.push('--window-size=1400,1200')\n\n          // force screen to be non-retina (1400x1200 size)\n          launchOptions.args.push('--force-device-scale-factor=1')\n\n          // force screen to be retina (2800x2400 size)\n          // launchOptions.args.push('--force-device-scale-factor=2')\n        }\n\n        if (browser.name === 'electron' && browser.isHeadless) {\n          // fullPage screenshot size is 1400x1200\n          launchOptions.preferences.width = 1400\n          launchOptions.preferences.height = 1200\n        }\n\n        if (browser.name === 'firefox' && browser.isHeadless) {\n          // menubars take up height on the screen\n          // so fullPage screenshot size is 1400x1126\n          launchOptions.args.push('--width=1400')\n          launchOptions.args.push('--height=1200')\n        }\n\n        return launchOptions\n      })\n    },\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser, launchOptions) => {\n        if (browser.name === 'chrome' && browser.isHeadless) {\n          // fullPage screenshot size is 1400x1200 on non-retina screens\n          // and 2800x2400 on retina screens\n          launchOptions.args.push('--window-size=1400,1200')\n\n          // force screen to be non-retina (1400x1200 size)\n          launchOptions.args.push('--force-device-scale-factor=1')\n\n          // force screen to be retina (2800x2400 size)\n          // launchOptions.args.push('--force-device-scale-factor=2')\n        }\n\n        if (browser.name === 'electron' && browser.isHeadless) {\n          // fullPage screenshot size is 1400x1200\n          launchOptions.preferences.width = 1400\n          launchOptions.preferences.height = 1200\n        }\n\n        if (browser.name === 'firefox' && browser.isHeadless) {\n          // menubars take up height on the screen\n          // so fullPage screenshot size is 1400x1126\n          launchOptions.args.push('--width=1400')\n          launchOptions.args.push('--height=1200')\n        }\n\n        return launchOptions\n      })\n    },\n  },\n})\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"Override-the-device-pixel-ratio",children:"Override the device pixel ratio"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser, launchOptions) => {\n        if (browser.name === 'chrome' && browser.isHeadless) {\n          // force screen to behave like retina\n          // when running Chrome headless browsers\n          // (2560x1440 in size by default)\n          launchOptions.args.push('--force-device-scale-factor=2')\n        }\n\n        return launchOptions\n      })\n    },\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser, launchOptions) => {\n        if (browser.name === 'chrome' && browser.isHeadless) {\n          // force screen to behave like retina\n          // when running Chrome headless browsers\n          // (2560x1440 in size by default)\n          launchOptions.args.push('--force-device-scale-factor=2')\n        }\n\n        return launchOptions\n      })\n    },\n  },\n})\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"Start-fullscreen",children:"Start fullscreen"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser = {}, launchOptions) => {\n        if (browser.family === 'chromium' && browser.name !== 'electron') {\n          launchOptions.args.push('--start-fullscreen')\n\n          return launchOptions\n        }\n\n        if (browser.name === 'electron') {\n          launchOptions.preferences.fullscreen = true\n\n          return launchOptions\n        }\n      })\n    },\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser = {}, launchOptions) => {\n        if (browser.family === 'chromium' && browser.name !== 'electron') {\n          launchOptions.args.push('--start-fullscreen')\n\n          return launchOptions\n        }\n\n        if (browser.name === 'electron') {\n          launchOptions.preferences.fullscreen = true\n\n          return launchOptions\n        }\n      })\n    },\n  },\n})\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"Use-fake-video-for-webcam-testing",children:"Use fake video for webcam testing"}),"\n",(0,s.jsx)(n.p,{children:"By default, Cypress passes the Chrome command line switch to enable a fake video\nfor a media stream. This is to better enable testing webcam functionality\nwithout having to have the necessary hardware to test."}),"\n",(0,s.jsx)(i,{src:"/img/api/browser-launch-fake-video.gif",alt:"Enable fake video for testing"}),"\n",(0,s.jsx)(n.p,{children:"You can however send your own video file for testing by passing a Chrome command\nline switch pointing to a video file."}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser = {}, launchOptions) => {\n        if (browser.family === 'chromium' && browser.name !== 'electron') {\n          // Mac/Linux\n          launchOptions.args.push(\n            '--use-file-for-fake-video-capture=cypress/fixtures/my-video.y4m'\n          )\n\n          // Windows\n          // launchOptions.args.push('--use-file-for-fake-video-capture=c:\\\\path\\\\to\\\\video\\\\my-video.y4m')\n        }\n\n        return launchOptions\n      })\n    },\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser = {}, launchOptions) => {\n        if (browser.family === 'chromium' && browser.name !== 'electron') {\n          // Mac/Linux\n          launchOptions.args.push(\n            '--use-file-for-fake-video-capture=cypress/fixtures/my-video.y4m'\n          )\n\n          // Windows\n          // launchOptions.args.push('--use-file-for-fake-video-capture=c:\\\\path\\\\to\\\\video\\\\my-video.y4m')\n        }\n\n        return launchOptions\n      })\n    },\n  },\n})\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"Support-unique-file-download-mime-types",children:"Support unique file download mime types"}),"\n",(0,s.jsx)(n.p,{children:"Cypress supports a myriad of mime types when testing file downloads, but in case\nyou have a unique one, you can add support for it."}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser, options) => {\n        // only Firefox requires all mime types to be listed\n        if (browser.family === 'firefox') {\n          const existingMimeTypes =\n            options.preferences['browser.helperApps.neverAsk.saveToDisk']\n          const myMimeType = 'my/mimetype'\n\n          // prevents the browser download prompt\n          options.preferences['browser.helperApps.neverAsk.saveToDisk'] =\n            `${existingMimeTypes},${myMimeType}`\n\n          return options\n        }\n      })\n    },\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser, options) => {\n        // only Firefox requires all mime types to be listed\n        if (browser.family === 'firefox') {\n          const existingMimeTypes =\n            options.preferences['browser.helperApps.neverAsk.saveToDisk']\n          const myMimeType = 'my/mimetype'\n\n          // prevents the browser download prompt\n          options.preferences['browser.helperApps.neverAsk.saveToDisk'] =\n            `${existingMimeTypes},${myMimeType}`\n\n          return options\n        }\n      })\n    },\n  },\n})\n"})})]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/app/references/recipes#Testing-the-DOM",children:"Check out our example recipe showing how to download and validate CSV and Excel files."})})}),"\n",(0,s.jsxs)(n.h3,{id:"Disable---headlessnew-for-Chrome",children:["Disable ",(0,s.jsx)(n.code,{children:"--headless=new"})," for Chrome"]}),"\n",(0,s.jsxs)(n.p,{children:["Starting in Chrome 112, you can change the value of the ",(0,s.jsx)(n.code,{children:"--headless"})," flag to the\nold value before the ",(0,s.jsx)(n.code,{children:"--headless=new"})," flag was introduced."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"on('before:browser:launch', (browser = {}, launchOptions) => {\n  if (browser.name === 'chrome' && browser.isHeadless) {\n    launchOptions.args = launchOptions.args.map((arg) => {\n      if (arg === '--headless=new') {\n        return '--headless'\n      }\n\n      return arg\n    })\n  }\n\n  return launchOptions\n})\n"})}),"\n",(0,s.jsx)(n.h3,{id:"Set-a-Firefox-flag",children:"Set a Firefox flag"}),"\n",(0,s.jsxs)(n.p,{children:["If we need to set a particular Firefox flag, like ",(0,s.jsx)(n.code,{children:"browser.send_pings"})," we can do\nit via preferences"]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser = {}, launchOptions) => {\n        if (browser.family === 'firefox') {\n          launchOptions.preferences['browser.send_pings'] = true\n        }\n\n        return launchOptions\n      })\n    },\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser = {}, launchOptions) => {\n        if (browser.family === 'firefox') {\n          launchOptions.preferences['browser.send_pings'] = true\n        }\n\n        return launchOptions\n      })\n    },\n  },\n})\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"History",children:"History"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Version"}),(0,s.jsx)(n.th,{children:"Changes"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/app/references/changelog#4-0-0",children:"4.0.0"})}),(0,s.jsxs)(n.td,{children:["New ",(0,s.jsx)(n.code,{children:"options"})," object replaces old ",(0,s.jsx)(n.code,{children:"args"})," as second argument to ",(0,s.jsx)(n.code,{children:"before:browser:launch"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/app/references/changelog#4-0-0",children:"4.0.0"})}),(0,s.jsxs)(n.td,{children:["All Chromium-based browsers, including Electron, have ",(0,s.jsx)(n.code,{children:"chromium"})," set as their ",(0,s.jsx)(n.code,{children:"family"})," property."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/app/references/changelog#4-0-0",children:"4.0.0"})}),(0,s.jsxs)(n.td,{children:["Added ",(0,s.jsx)(n.code,{children:"channel"})," property to browser."]})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,r)=>{r.d(n,{Z:()=>c,a:()=>t});var s=r(7294);const o={},i=s.createContext(o);function t(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);