"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[1627],{4938:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var s=t(5893),i=t(1151);const r={title:"Effective E2E: Cypress App Testing",sidebar_label:"Testing Your App",description:"Discover effective end-to-end testing strategies in Cypress App Testing Guide. Elevate your testing proficiency",sidebar_position:20,slug:"/app/end-to-end-testing/testing-your-app"},o="Testing Your App",a={id:"app/end-to-end-testing/testing-your-app",title:"Effective E2E: Cypress App Testing",description:"Discover effective end-to-end testing strategies in Cypress App Testing Guide. Elevate your testing proficiency",source:"@site/docs/app/end-to-end-testing/testing-your-app.mdx",sourceDirName:"app/end-to-end-testing",slug:"/app/end-to-end-testing/testing-your-app",permalink:"/app/end-to-end-testing/testing-your-app",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/end-to-end-testing/testing-your-app.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",sidebarPosition:20,frontMatter:{title:"Effective E2E: Cypress App Testing",sidebar_label:"Testing Your App",description:"Discover effective end-to-end testing strategies in Cypress App Testing Guide. Elevate your testing proficiency",sidebar_position:20,slug:"/app/end-to-end-testing/testing-your-app"},sidebar:"app",previous:{title:"Your First Test",permalink:"/app/end-to-end-testing/writing-your-first-end-to-end-test"},next:{title:"Get Started",permalink:"/app/component-testing/get-started"}},l={},d=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"<Icon></Icon> Step 1: Start your server",id:"Step-1-Start-your-server",level:2},{value:"Why start a local development server?",id:"Why-start-a-local-development-server",level:3},{value:"<Icon></Icon> Step 2: Visit your server",id:"Step-2-Visit-your-server",level:2},{value:"<Icon></Icon> Step 3: Configure Cypress",id:"Step-3-Configure-Cypress",level:2},{value:"Testing strategies",id:"Testing-strategies",level:2},{value:"Seeding data",id:"Seeding-data",level:3},{value:"Stubbing the server",id:"Stubbing-the-server",level:3},{value:"Generate the fixture stubs ahead of time",id:"Generate-the-fixture-stubs-ahead-of-time",level:4},{value:"Write a single e2e test without stubs, and then stub the rest",id:"Write-a-single-e2e-test-without-stubs-and-then-stub-the-rest",level:4},{value:"Logging in",id:"Logging-in",level:3},{value:"Fully test the login flow -- but only once!",id:"Fully-test-the-login-flow----but-only-once",level:4},{value:"Reusing the login code",id:"Reusing-the-login-code",level:4},{value:"Improving performance",id:"Improving-performance",level:4},{value:"Get started",id:"Get-started",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components},{CypressConfigFileTabs:t,DocsImage:r,Icon:o}=n;return t||u("CypressConfigFileTabs",!0),r||u("DocsImage",!0),o||u("Icon",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"Testing-Your-App",children:"Testing Your App"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.h5,{id:"What-youll-learn",children:[(0,s.jsx)(o,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"How to start your server and test your application with Cypress"}),"\n",(0,s.jsx)(n.li,{children:"How to configure Cypress"}),"\n",(0,s.jsx)(n.li,{children:"Strategies for testing your application including seeding data, stubbing the server, and logging in"}),"\n"]})]}),"\n",(0,s.jsxs)(n.h2,{id:"Step-1-Start-your-server",children:[(0,s.jsx)(o,{name:"terminal"})," Step 1: Start your server"]}),"\n",(0,s.jsxs)(n.p,{children:["Assuming you've successfully\n",(0,s.jsx)(n.a,{href:"/app/get-started/install-cypress",children:"installed Cypress"})," and\n",(0,s.jsx)(n.a,{href:"/app/get-started/open-the-app",children:"opened Cypress"})," in your project, the\nfirst thing you'll want to do is start your local development server that hosts\nthe application."]}),"\n",(0,s.jsxs)(n.p,{children:["It should look something like ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"http://localhost:8080",children:"http://localhost:8080"})}),"."]}),"\n",(0,s.jsxs)(n.admonition,{type:"caution",children:[(0,s.jsx)("strong",{children:"Anti-Pattern"}),(0,s.jsxs)(n.p,{children:["Don't try to start a web server from within Cypress scripts. Read about\n",(0,s.jsx)(n.a,{href:"/app/core-concepts/best-practices#Web-Servers",children:"best practices"})," here."]})]}),"\n",(0,s.jsx)(n.h3,{id:"Why-start-a-local-development-server",children:"Why start a local development server?"}),"\n",(0,s.jsx)(n.p,{children:"You may be wondering - why can't I just visit my application that's already in\nproduction?"}),"\n",(0,s.jsxs)(n.p,{children:["While you certainly ",(0,s.jsx)(n.em,{children:"can"})," test an application that's already deployed, that's\nnot really the ",(0,s.jsx)(n.strong,{children:"sweet spot"})," of Cypress."]}),"\n",(0,s.jsxs)(n.p,{children:["Cypress is built, and optimized around being a tool for your daily local\ndevelopment. In fact, after you start using Cypress for awhile, we believe that\nyou may find it useful to even do ",(0,s.jsx)(n.strong,{children:"all of your development"})," in it."]}),"\n",(0,s.jsxs)(n.p,{children:["Ultimately you'll not only be able to ",(0,s.jsx)(n.strong,{children:"test and develop"})," at the same time, but\nyou'll actually be able to build your application ",(0,s.jsx)(n.strong,{children:"faster"}),' while getting tests\n"for free".']}),"\n",(0,s.jsxs)(n.p,{children:["What's more - since Cypress enables you to do things like ",(0,s.jsx)(n.strong,{children:"stub network\nrequests"})," you can build out your web application without even needing a server\nto provide valid JSON responses."]}),"\n",(0,s.jsx)(n.p,{children:"Last but not least - trying to shoehorn tests to an already built application is\nmuch more difficult than building it as you write tests. You'll likely encounter\na series of initial up front challenges / hurdles that would have otherwise been\navoided writing tests from the start."}),"\n",(0,s.jsxs)(n.p,{children:["The last, and probably most important reason why you want to test against local\nservers, is the ability to ",(0,s.jsx)(n.strong,{children:"control them"}),". When your application is running in\nproduction you can't control it."]}),"\n",(0,s.jsx)(n.p,{children:"When it's running in development you can:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"take shortcuts"}),"\n",(0,s.jsx)(n.li,{children:"seed data by running executable scripts"}),"\n",(0,s.jsx)(n.li,{children:"expose test environment specific routes"}),"\n",(0,s.jsx)(n.li,{children:"disable security features which make automation difficult"}),"\n",(0,s.jsx)(n.li,{children:"reset state on the server / database"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["With that said - you still have the option to have it ",(0,s.jsx)(n.strong,{children:"both ways"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Many of our users run the ",(0,s.jsx)(n.em,{children:"majority"})," of their integration tests against a local\ndevelopment server, but then reserve a smaller set of ",(0,s.jsx)(n.strong,{children:"smoke tests"})," that run\nonly against a deployed production app."]}),"\n",(0,s.jsxs)(n.h2,{id:"Step-2-Visit-your-server",children:[(0,s.jsx)(o,{name:"globe"})," Step 2: Visit your server"]}),"\n",(0,s.jsx)(n.p,{children:"Once your server is running, it's time to visit it."}),"\n",(0,s.jsxs)(n.p,{children:["Let's delete the ",(0,s.jsx)(n.code,{children:"spec.cy.js"})," file created in the previous tutorial now that\nit's no longer needed."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"rm cypress/e2e/spec.cy.js\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now let's create our own spec file called ",(0,s.jsx)(n.code,{children:"home_page.cy.js"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"touch cypress/e2e/home_page.cy.js\n"})}),"\n",(0,s.jsx)(n.p,{children:"Once that file is created, you should see it in the list of spec files."}),"\n",(0,s.jsx)(r,{src:"/img/app/get-started/e2e/v10/testing-your-app-home-page-spec.png",alt:"List of files including home_page.cy.js",width:"75%"}),"\n",(0,s.jsx)(n.p,{children:"Now you'll need to add in the following code in your test file to visit your\nserver:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('The Home Page', () => {\n  it('successfully loads', () => {\n    cy.visit('http://localhost:8080') // change URL to match your dev URL\n  })\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now click on the ",(0,s.jsx)(n.code,{children:"home_page.cy.js"})," file and watch Cypress open your browser."]}),"\n",(0,s.jsx)(n.p,{children:"If you forgot to start your server you'll see the error below:"}),"\n",(0,s.jsx)(r,{src:"/img/app/get-started/e2e/v10/testing-your-app-visit-fail.png",alt:"Error in Cypress showing cy.visit failed",width:"75%"}),"\n",(0,s.jsx)(n.p,{children:"If you've started your server, then you should see your application loaded and\nworking."}),"\n",(0,s.jsxs)(n.h2,{id:"Step-3-Configure-Cypress",children:[(0,s.jsx)(o,{name:"cogs"})," Step 3: Configure Cypress"]}),"\n",(0,s.jsxs)(n.p,{children:["If you think ahead, you'll quickly realize that you're going to be typing this\nURL a lot, since every test is going to need to visit some page of your\napplication. Luckily, Cypress provides a\n",(0,s.jsx)(n.a,{href:"/app/references/configuration",children:"configuration option"})," for this. Let's\nleverage that now."]}),"\n",(0,s.jsxs)(n.p,{children:["Open up your ",(0,s.jsx)(n.a,{href:"/app/references/configuration",children:"configuration file"}),". It starts\nout empty, but let's add the ",(0,s.jsx)(n.code,{children:"baseUrl"})," option."]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  e2e: {\n    baseUrl: 'http://localhost:8080',\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  e2e: {\n    baseUrl: 'http://localhost:8080',\n  },\n})\n"})})]}),"\n",(0,s.jsxs)(n.p,{children:["This will automatically ",(0,s.jsx)(n.strong,{children:"prefix"})," ",(0,s.jsx)(n.a,{href:"/api/commands/visit",children:(0,s.jsx)(n.code,{children:"cy.visit()"})})," and\n",(0,s.jsx)(n.a,{href:"/api/commands/request",children:(0,s.jsx)(n.code,{children:"cy.request()"})})," commands with this baseUrl."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"Whenever you modify your configuration file, Cypress will automatically reboot\nitself and kill any open browsers. This is normal. Click on the spec file again\nto relaunch the browser."})}),"\n",(0,s.jsx)(n.p,{children:"We can now visit a relative path and omit the hostname and port."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('The Home Page', () => {\n  it('successfully loads', () => {\n    cy.visit('/')\n  })\n})\n"})}),"\n",(0,s.jsx)(n.p,{children:"Great! Everything should still be green."}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)("strong",{children:"Configuration Options"}),(0,s.jsx)(n.p,{children:"Cypress has many more configuration options you can use to customize its\nbehavior. Things like where your tests live, default timeout periods,\nenvironment variables, which reporter to use, etc."}),(0,s.jsxs)(n.p,{children:["Check them out in ",(0,s.jsx)(n.a,{href:"/app/references/configuration",children:"Configuration"}),"!"]})]}),"\n",(0,s.jsx)(n.h2,{id:"Testing-strategies",children:"Testing strategies"}),"\n",(0,s.jsxs)(n.p,{children:["You're about to embark on writing tests for your application, and only ",(0,s.jsx)(n.em,{children:"you"}),"\nknow your application, so we don't have a lot of specific advice to give you."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"What to test, where the edge cases and seams are, what regressions you're\nlikely to run into, etc. are entirely up to you, your application, and your\nteam."})}),"\n",(0,s.jsx)(n.p,{children:"That said, modern web testing has a few wrinkles that every team experiences, so\nhere are some quick tips on common situations you're likely to run into."}),"\n",(0,s.jsx)(n.h3,{id:"Seeding-data",children:"Seeding data"}),"\n",(0,s.jsx)(n.p,{children:"Depending on how your application is built - it's likely that your web\napplication is going to be affected and controlled by the server."}),"\n",(0,s.jsx)(n.p,{children:"Typically these days servers communicate with front end apps via JSON, but you\ncould also be running a traditional server-side rendered HTML web application."}),"\n",(0,s.jsxs)(n.p,{children:["Generally the server is responsible for sending responses that reflect some kind\nof ",(0,s.jsx)(n.strong,{children:"state"})," it holds - generally in a database."]}),"\n",(0,s.jsxs)(n.p,{children:["Traditionally when writing ",(0,s.jsx)(n.code,{children:"e2e"})," tests using Selenium, before you automate the\nbrowser you do some kind of ",(0,s.jsx)(n.strong,{children:"set up and tear down"})," on the server."]}),"\n",(0,s.jsx)(n.p,{children:"Perhaps you'll need to generate a user, and seed them with associations and\nrecords. You may be familiar with using things such as fixtures or factories."}),"\n",(0,s.jsx)(n.p,{children:"To test various page states - like an empty view, or a pagination view, you'd\nneed to seed the server so that this state can be tested."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"While there is a lot more to this strategy, you generally have three ways to\nfacilitate this with Cypress:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/api/commands/exec",children:(0,s.jsx)(n.code,{children:"cy.exec()"})})," - to run system commands"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/api/commands/task",children:(0,s.jsx)(n.code,{children:"cy.task()"})})," - to run code in Node via the\n",(0,s.jsx)(n.a,{href:"/app/plugins/plugins-guide#Using-a-plugin",children:"setupNodeEvents"})," function"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/api/commands/request",children:(0,s.jsx)(n.code,{children:"cy.request()"})})," - to make HTTP requests"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If you're running ",(0,s.jsx)(n.code,{children:"node.js"})," on your server, you might add a ",(0,s.jsx)(n.code,{children:"before"})," or\n",(0,s.jsx)(n.code,{children:"beforeEach"})," hook that executes an ",(0,s.jsx)(n.code,{children:"npm"})," task."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('The Home Page', () => {\n  beforeEach(() => {\n    // reset and seed the database prior to every test\n    cy.exec('npm run db:reset && npm run db:seed')\n  })\n\n  it('successfully loads', () => {\n    cy.visit('/')\n  })\n})\n"})}),"\n",(0,s.jsx)(n.p,{children:"Instead of just executing a system command, you may want more flexibility and\ncould expose a series of routes only when running in a test environment."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"For instance, you could compose several requests together to tell your server\nexactly the state you want to create."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('The Home Page', () => {\n  beforeEach(() => {\n    // reset and seed the database prior to every test\n    cy.exec('npm run db:reset && npm run db:seed')\n\n    // seed a post in the DB that we control from our tests\n    cy.request('POST', '/test/seed/post', {\n      title: 'First Post',\n      authorId: 1,\n      body: '...',\n    })\n\n    // seed a user in the DB that we can control from our tests\n    cy.request('POST', '/test/seed/user', { name: 'Jane' })\n      .its('body')\n      .as('currentUser')\n  })\n\n  it('successfully loads', () => {\n    // this.currentUser will now point to the response\n    // body of the cy.request() that we could use\n    // to log in or work with in some way\n\n    cy.visit('/')\n  })\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["While there's nothing really ",(0,s.jsx)(n.em,{children:"wrong"})," with this approach, it does add a lot of\ncomplexity. You will be battling synchronizing the state between your server and\nyour browser - and you'll always need to set up / tear down this state before\ntests (which is slow)."]}),"\n",(0,s.jsx)(n.p,{children:"The good news is that we aren't Selenium, nor are we a traditional e2e testing\ntool. That means we're not bound to the same restrictions."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"With Cypress, there are several other approaches that can offer an arguably\nbetter and faster experience."})}),"\n",(0,s.jsx)(n.h3,{id:"Stubbing-the-server",children:"Stubbing the server"}),"\n",(0,s.jsx)(n.p,{children:"Another valid approach opposed to seeding and talking to your server is to\nbypass it altogether."}),"\n",(0,s.jsxs)(n.p,{children:["While you'll still receive all of the regular HTML / JS / CSS assets from your\nserver and you'll continue to ",(0,s.jsx)(n.a,{href:"/api/commands/visit",children:(0,s.jsx)(n.code,{children:"cy.visit()"})})," it in the same\nway - you can instead ",(0,s.jsx)(n.strong,{children:"stub"})," the JSON responses coming from it."]}),"\n",(0,s.jsxs)(n.p,{children:["This means that instead of resetting the database, or seeding it with the state\nwe want, you can force the server to respond with ",(0,s.jsx)(n.strong,{children:"whatever"})," you want it to.\nIn this way, we not only prevent needing to synchronize the state between the\nserver and browser, but we also prevent mutating state from our tests. That\nmeans tests won't build up state that may affect other tests."]}),"\n",(0,s.jsxs)(n.p,{children:["Another upside is that this enables you to ",(0,s.jsx)(n.strong,{children:"build out your application"}),"\nwithout needing the ",(0,s.jsx)(n.em,{children:"contract"})," of the server to exist. You can build it the way\nyou want the data to be structured, and even test all of the edge cases, without\nneeding a server."]}),"\n",(0,s.jsxs)(n.p,{children:["However - there is likely still a balance here where ",(0,s.jsx)(n.strong,{children:"both"})," strategies are\nvalid (and you should likely do them)."]}),"\n",(0,s.jsx)(n.p,{children:"While stubbing is great, it means that you don't have the guarantees that these\nresponse payloads actually match what the server will send. However, there are\nstill many valid ways to get around this:"}),"\n",(0,s.jsx)(n.h4,{id:"Generate-the-fixture-stubs-ahead-of-time",children:"Generate the fixture stubs ahead of time"}),"\n",(0,s.jsx)(n.p,{children:"You could have the server generate all of the fixture stubs for you ahead of\ntime. This means their data will reflect what the server will actually send."}),"\n",(0,s.jsx)(n.h4,{id:"Write-a-single-e2e-test-without-stubs-and-then-stub-the-rest",children:"Write a single e2e test without stubs, and then stub the rest"}),"\n",(0,s.jsxs)(n.p,{children:["Another more balanced approach is to integrate both strategies. You likely want\nto have a ",(0,s.jsx)(n.strong,{children:"single test"})," that takes a true ",(0,s.jsx)(n.code,{children:"e2e"})," approach and stubs nothing.\nIt'll use the feature for real - including seeding the database and setting up\nstate."]}),"\n",(0,s.jsx)(n.p,{children:"Once you've established it's working you can then use stubs to test all of the\nedge cases and additional scenarios. There are no benefits to using real data in\nthe vast majority of cases. We recommend that the vast majority of tests use\nstub data. They will be orders of magnitude faster, and much less complex."}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)("strong",{children:"Guide: Network Requests"}),(0,s.jsxs)(n.p,{children:["Please read our ",(0,s.jsx)(n.a,{href:"/app/guides/network-requests",children:"Guide on Network Requests"})," for\na much more thorough analysis and approach to accomplishing this."]})]}),"\n",(0,s.jsx)(n.h3,{id:"Logging-in",children:"Logging in"}),"\n",(0,s.jsx)(n.p,{children:"One of the first (and arguably one of the hardest) hurdles you'll have to\novercome in testing is logging into your application."}),"\n",(0,s.jsx)(n.p,{children:"Nothing slows a test suite down like having to log in, but all the good parts of\nyour application most likely require an authenticated user! Here are some tips."}),"\n",(0,s.jsx)(n.h4,{id:"Fully-test-the-login-flow----but-only-once",children:"Fully test the login flow -- but only once!"}),"\n",(0,s.jsx)(n.p,{children:"It's a great idea to get your signup and login flow under test coverage since it\nis very important to all of your users and you never want it to break."}),"\n",(0,s.jsxs)(n.p,{children:["Logging in is one of those features that are ",(0,s.jsx)(n.strong,{children:"mission critical"})," and should\nlikely involve your server. We recommend you test signup and login using your UI\nas a real user would:"]}),"\n",(0,s.jsx)(n.p,{children:"Here's an example alongside seeding your database:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('The Login Page', () => {\n  beforeEach(() => {\n    // reset and seed the database prior to every test\n    cy.exec('npm run db:reset && npm run db:seed')\n\n    // seed a user in the DB that we can control from our tests\n    // assuming it generates a random password for us\n    cy.request('POST', '/test/seed/user', { username: 'jane.lane' })\n      .its('body')\n      .as('currentUser')\n  })\n\n  it('sets auth cookie when logging in via form submission', function () {\n    // destructuring assignment of the this.currentUser object\n    const { username, password } = this.currentUser\n\n    cy.visit('/login')\n\n    cy.get('input[name=username]').type(username)\n\n    // {enter} causes the form to submit\n    cy.get('input[name=password]').type(`${password}{enter}`)\n\n    // we should be redirected to /dashboard\n    cy.url().should('include', '/dashboard')\n\n    // our auth cookie should be present\n    cy.getCookie('your-session-cookie').should('exist')\n\n    // UI should reflect this user being logged in\n    cy.get('h1').should('contain', 'jane.lane')\n  })\n})\n"})}),"\n",(0,s.jsx)(n.p,{children:"You'll likely also want to test your login UI for:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Invalid username / password"}),"\n",(0,s.jsx)(n.li,{children:"Username taken"}),"\n",(0,s.jsx)(n.li,{children:"Password complexity requirements"}),"\n",(0,s.jsx)(n.li,{children:"Edge cases like locked / deleted accounts"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Each of these likely requires a full blown e2e test."}),"\n",(0,s.jsx)(n.h4,{id:"Reusing-the-login-code",children:"Reusing the login code"}),"\n",(0,s.jsxs)(n.p,{children:["At this point there's nothing stopping you copying and pasting the login code\nabove into every one of your tests that needs an authenticated user. Or you\ncould even put all your tests in one big spec file and put the login code in a\n",(0,s.jsx)(n.code,{children:"beforeEach"})," block. But neither of those approaches is particularly\nmaintainable, and they're certainly not very elegant. A much better solution is\nto write a custom ",(0,s.jsx)(n.code,{children:"cy.login()"})," ",(0,s.jsx)(n.a,{href:"/api/cypress-api/custom-commands",children:"command"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Custom commands allow you to easily encapsulate and reuse Cypress test logic.\nThey let you add your own functionality to your test suite and then use it with\nthe same\n",(0,s.jsx)(n.a,{href:"/app/core-concepts/introduction-to-cypress#The-Cypress-Command-Queue",children:"chainable and asynchronous API"}),"\nas the built-in Cypress commands. Lets make the above login example a custom\ncommand and add it to ",(0,s.jsx)(n.code,{children:"cypress/support/commands.js"})," so it can be leveraged in\nany spec file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// In cypress/support/commands.js\n\nCypress.Commands.add('login', (username, password) => {\n  cy.visit('/login')\n\n  cy.get('input[name=username]').type(username)\n\n  // {enter} causes the form to submit\n  cy.get('input[name=password]').type(`${password}{enter}`, { log: false })\n\n  // we should be redirected to /dashboard\n  cy.url().should('include', '/dashboard')\n\n  // our auth cookie should be present\n  cy.getCookie('your-session-cookie').should('exist')\n\n  // UI should reflect this user being logged in\n  cy.get('h1').should('contain', username)\n})\n\n// In your spec file\n\nit('does something on a secured page', function () {\n  const { username, password } = this.currentUser\n  cy.login(username, password)\n\n  // ...rest of test\n})\n"})}),"\n",(0,s.jsx)(n.h4,{id:"Improving-performance",children:"Improving performance"}),"\n",(0,s.jsx)(n.p,{children:'You\'re probably wondering what happened to our advice about logging in "only\nonce". The custom command above will work just fine for testing your secured\npages, but if you have more than a handful of tests, logging in before every\ntest is going to increase the overall run time of your suite.'}),"\n",(0,s.jsxs)(n.p,{children:["Luckily, Cypress provides the ",(0,s.jsx)(n.a,{href:"/api/commands/session",children:(0,s.jsx)(n.code,{children:"cy.session()"})})," command, a\npowerful performance tool that lets you cache the browser context associated\nwith your user and reuse it for multiple tests without going through multiple\nlogin flows! Let's modify the custom ",(0,s.jsx)(n.code,{children:"cy.login()"})," command from our previous\nexample to use ",(0,s.jsx)(n.code,{children:"cy.session()"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"Cypress.Commands.add('login', (username, password) => {\n  cy.session(\n    username,\n    () => {\n      cy.visit('/login')\n      cy.get('input[name=username]').type(username)\n      cy.get('input[name=password]').type(`${password}{enter}`, { log: false })\n      cy.url().should('include', '/dashboard')\n      cy.get('h1').should('contain', username)\n    },\n    {\n      validate: () => {\n        cy.getCookie('your-session-cookie').should('exist')\n      },\n    }\n  )\n})\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)("strong",{children:"Third-Party Login"}),(0,s.jsxs)(n.p,{children:["If your app implements login via a third-party authentication provider such as\n",(0,s.jsx)(n.a,{href:"https://auth0.com/",children:"Auth0"})," or ",(0,s.jsx)(n.a,{href:"https://www.okta.com/",children:"Okta"}),", you can use the\n",(0,s.jsx)(n.a,{href:"/api/commands/origin",children:(0,s.jsx)(n.code,{children:"cy.origin()"})})," command to include their login pages as\npart of your authentication tests."]})]}),"\n",(0,s.jsxs)(n.p,{children:["There's a lot going on here that's out of the scope for this introduction.\nPlease check out the ",(0,s.jsx)(n.a,{href:"/api/commands/session",children:(0,s.jsx)(n.code,{children:"cy.session()"})})," documentation for a\nmore in-depth explanation."]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)("strong",{children:"Authentication Recipes"}),(0,s.jsx)(n.p,{children:"Logging in can be more complex than what we've just covered."}),(0,s.jsx)(n.p,{children:"We've created several recipes covering additional scenarios like dealing with\nCSRF tokens or testing XHR based login forms."}),(0,s.jsxs)(n.p,{children:["Feel free to ",(0,s.jsx)(n.a,{href:"/app/references/recipes",children:"explore these additional logging in"})," recipes."]})]}),"\n",(0,s.jsx)(n.h2,{id:"Get-started",children:"Get started"}),"\n",(0,s.jsx)(n.p,{children:"Ok, we're done talking. Now dive in and get started testing your app!"}),"\n",(0,s.jsx)(n.p,{children:"From here you may want to explore some more of our guides:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/api/table-of-contents",children:"Cypress API"})," to learn what commands are available as\nyou work"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/app/core-concepts/introduction-to-cypress",children:"Introduction to Cypress"}),"\nexplains how Cypress ",(0,s.jsx)(n.em,{children:"really"})," works"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/app/references/command-line",children:"Command Line"})," for running all your tests outside\nvia ",(0,s.jsx)(n.code,{children:"cypress run"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/app/continuous-integration/overview",children:"Continuous Integration"})," for\nrunning Cypress in CI"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/app/guides/cross-browser-testing",children:"Cross Browser Testing"})," for optimally\nrunning tests in CI across Firefox and Chrome-family browsers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(o,{name:"github",inline:"true",contentType:"rwa"})," demonstrations of Cypress\ntesting practices, configuration, and strategies in a real-world project."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var s=t(7294);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);