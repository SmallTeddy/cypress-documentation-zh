"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[2576],{6971:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var o=t(5893),s=t(1151);const r={title:"Configure Component Tests | Cypress Documentation",description:"Configure Cypress for component testing with custom index files, dev servers, and spec patterns.",sidebar_position:30,sidebar_label:"Configuration"},i="Component Testing Configuration",c={id:"app/component-testing/component-framework-configuration",title:"Configure Component Tests | Cypress Documentation",description:"Configure Cypress for component testing with custom index files, dev servers, and spec patterns.",source:"@site/docs/app/component-testing/component-framework-configuration.mdx",sourceDirName:"app/component-testing",slug:"/app/component-testing/component-framework-configuration",permalink:"/app/component-testing/component-framework-configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/component-testing/component-framework-configuration.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",sidebarPosition:30,frontMatter:{title:"Configure Component Tests | Cypress Documentation",description:"Configure Cypress for component testing with custom index files, dev servers, and spec patterns.",sidebar_position:30,sidebar_label:"Configuration"},sidebar:"app",previous:{title:"Styling Components",permalink:"/app/component-testing/styling-components"},next:{title:"Overview",permalink:"/app/component-testing/react/overview"}},a={},p=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"Custom Index File",id:"Custom-Index-File",level:2},{value:"Custom Dev Server",id:"Custom-Dev-Server",level:2},{value:"Spec Pattern for Component Tests",id:"Spec-Pattern-for-Component-Tests",level:2},{value:"Additional Config",id:"Additional-Config",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h5:"h5",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components},{CypressConfigFileTabs:t,Icon:r}=n;return t||u("CypressConfigFileTabs",!0),r||u("Icon",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"Component-Testing-Configuration",children:"Component Testing Configuration"}),"\n",(0,o.jsxs)(n.admonition,{type:"info",children:[(0,o.jsxs)(n.h5,{id:"What-youll-learn",children:[(0,o.jsx)(r,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"How to configure Cypress for component testing"}),"\n",(0,o.jsx)(n.li,{children:"How to use a custom index file"}),"\n",(0,o.jsx)(n.li,{children:"How to use a custom dev server"}),"\n",(0,o.jsx)(n.li,{children:"How to set a custom spec pattern for component tests"}),"\n"]})]}),"\n",(0,o.jsx)(n.p,{children:"When you launch Cypress for the first time in a project, the app will\nautomatically guide you through setup and configuration. You don't need to do\nanything additional to get started."}),"\n",(0,o.jsx)(n.p,{children:'Refer to the "Framework Configuration" guide in each UI framework\'s overview\nguide for a list of supported development servers and how they are configured.'}),"\n",(0,o.jsx)(n.p,{children:"Below are more advanced configuration options you can customize to fit your\nproject."}),"\n",(0,o.jsx)(n.h2,{id:"Custom-Index-File",children:"Custom Index File"}),"\n",(0,o.jsxs)(n.p,{children:["By default, Cypress renders your components into an HTML file located at\n",(0,o.jsx)(n.code,{children:"cypress/support/component-index.html"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"The index file allows you to add in global assets, such as styles, fonts, and\nexternal scripts."}),"\n",(0,o.jsxs)(n.p,{children:["You can provide an alternative path to the file using the ",(0,o.jsx)(n.code,{children:"indexHtmlFile"})," option\nin the ",(0,o.jsx)(n.a,{href:"/app/references/configuration#component",children:"component config"})," options:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"{\n  component: {\n    devServer,\n    indexHtmlFile: '/custom/path/to/component-index.html'\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"Custom-Dev-Server",children:"Custom Dev Server"}),"\n",(0,o.jsxs)(n.p,{children:["A custom function can be passed into the ",(0,o.jsx)(n.code,{children:"devServer"})," option, which allows the\nuse of build systems not provided by Cypress out of the box. These can be from\nthe Cypress community, preview builds not included with the app, or a custom one\nyou create."]}),"\n",(0,o.jsx)(n.p,{children:"The function's signature takes in an object with the following properties as its\nonly parameter and needs to resolve an object containing the port of your dev\nserver and a callback to shut it down."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"interface DevServerOptions {\n  specs: Cypress.Spec[]\n  cypressConfig: Cypress.PluginConfigOptions\n  devServerEvents: NodeJS.EventEmitter\n}\n"})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  component: {\n    async devServer({ specs, cypressConfig, devServerEvents }) {\n      const { port, close } = await startDevServer(\n        specs,\n        cypressConfig,\n        devServerEvents\n      )\n\n      return {\n        port,\n        close,\n      }\n    },\n  },\n})\n"})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  component: {\n    async devServer({\n      specs,\n      cypressConfig,\n      devServerEvents,\n    }: DevServerOptions) {\n      const { port, close } = await startDevServer(\n        specs,\n        cypressConfig,\n        devServerEvents\n      )\n\n      return {\n        port,\n        close,\n      }\n    },\n  },\n})\n"})})]}),"\n",(0,o.jsxs)(n.p,{children:["Any requests triggered during a test using the ",(0,o.jsx)(n.code,{children:"devServerPublicPathRoute"})," as\ndefined in the ",(0,o.jsx)(n.code,{children:"cypressConfig"})," will be forwarded to your server. Cypress will\ntrigger a request for ",(0,o.jsx)(n.code,{children:"[devServerPublicPathRoute]/index.html"})," when a test is\nstarted. Your server needs to reply with the html-file referenced in\n",(0,o.jsx)(n.code,{children:"cypressConfig.indexHtmlFile"})," and inject a script to load the support files and\nthe actual test."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"function createServer(cypressConfig, bundleDir, port = 1234) {\n  const app = express()\n\n  // read kickstart script - see below for an example\n  const clientScript = readFileSync(\n    path.join(__dirname, './client-script.js'),\n    'utf8'\n  )\n\n  app.get(\n    cypressConfig.devServerPublicPathRoute + '/index.html',\n    async (_req, res) => {\n      // read custom index.html file\n      const html = await fs.readFile(\n        path.join(cypressConfig.repoRoot, cypressConfig.indexHtmlFile),\n        { encoding: 'utf8' }\n      )\n\n      // inject kickstart-script\n      const output = html.replace(\n        '</head>',\n        `<script type=\"module\">${clientScript}<\/script></head>`\n      )\n      res.send(output)\n    }\n  )\n\n  // you need to establish some url-to-path-mapping, if your bundler outputs\n  // the full directory structure you can map this one to one\n  app.use(cypressConfig.devServerPublicPathRoute, express.static(bundleDir))\n\n  app.listen(port)\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For a real-world example, you can refer to\n",(0,o.jsx)(n.a,{href:"https://github.com/cypress-io/cypress/blob/466155c2125476374d9f9549530f67d0c6354a41/npm/vite-dev-server/src/plugins/cypress.ts#L82-L92",children:"this loader"}),"\nused by the Vite Dev Server."]}),"\n",(0,o.jsx)(n.p,{children:"The client script must retrieve information on the currently active test from\nthe Cypress instance of the parent frame and load the corresponding bundle. If a\nsupport file is defined, it should be injected at the top of your test bundle or\nloaded before the test script."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const CypressInstance = (window.Cypress = parent.Cypress)\nconst devServerPublicPathRoute = CypressInstance.config(\n  'devServerPublicPathRoute'\n)\n\nlet importPromise = Promise.resolve()\n\n// If you do not bundle your support file along with the tests,\n// you need to add a separate import statement for the support file.\nconst supportFilePath = CypressInstance.config('supportFile')\nif (supportFilePath) {\n  const relative = supportFilePath.replace(\n    CypressInstance.config('projectRoot'),\n    ''\n  )\n  importPromise = importPromise.then(\n    () => import(`${devServerPublicPathRoute}${relative}`)\n  )\n}\n\n// load the spec - you can extend the load function to also load css\nconst { relative } = CypressInstance.spec\nimportPromise = importPromise.then(\n  () => import(`${devServerPublicPathRoute}/${relative}`)\n)\n\n// trigger loading the imports\nCypressInstance.onSpecWindow(window, importPromise)\n\n// then start the test process\nCypressInstance.action('app:window:before:load', window)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For a more complete example you can check out the\n",(0,o.jsx)(n.a,{href:"https://github.com/cypress-io/cypress/blob/develop/npm/vite-dev-server/client/initCypressTests.js",children:"kickstart script used in the vite-devserver."})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"devServerEvents"})," event emitter should be used to notify cypress about\nfinished builds by emitting a ",(0,o.jsx)(n.code,{children:"dev-server:compile:success"})," event and to listen\nfor the ",(0,o.jsx)(n.code,{children:"dev-server:specs:changed"})," event that will notify you about changed\nentry points."]}),"\n",(0,o.jsx)(n.h2,{id:"Spec-Pattern-for-Component-Tests",children:"Spec Pattern for Component Tests"}),"\n",(0,o.jsxs)(n.p,{children:["By default, Cypress looks for spec files anywhere in your project with an\nextension of ",(0,o.jsx)(n.code,{children:".cy.js"}),", ",(0,o.jsx)(n.code,{children:".cy.jsx"}),", ",(0,o.jsx)(n.code,{children:".cy.ts"}),", or ",(0,o.jsx)(n.code,{children:".cy.tsx"}),". However, you can\nchange this behavior for component tests with a custom ",(0,o.jsx)(n.code,{children:"specPattern"})," value. In\nthe following example, we've configured Cypress to look for spec files with\nthose same extensions, but only in the ",(0,o.jsx)(n.code,{children:"src"})," folder or any of its\nsubdirectories."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"{\n  component: {\n    specPattern: 'src/**/*.cy.{js,jsx,ts,tsx}'\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"Additional-Config",children:"Additional Config"}),"\n",(0,o.jsxs)(n.p,{children:["For more information on all the available configuration options, see the\n",(0,o.jsx)(n.a,{href:"/app/references/configuration",children:"configuration reference"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>i});var o=t(7294);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);