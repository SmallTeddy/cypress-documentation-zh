"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[8004],{4612:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var n=s(5893),r=s(1151);const i={title:"Test Retries"},o=void 0,a={id:"app/guides/test-retries",title:"Test Retries",description:"What you'll learn",source:"@site/docs/app/guides/test-retries.mdx",sourceDirName:"app/guides",slug:"/app/guides/test-retries",permalink:"/app/guides/test-retries",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/guides/test-retries.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",frontMatter:{title:"Test Retries"},sidebar:"app",previous:{title:"Stubs, Spies, and Clocks",permalink:"/app/guides/stubs-spies-and-clocks"},next:{title:"Overview",permalink:"/app/continuous-integration/overview"}},l={},d=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"How It Works",id:"How-It-Works",level:2},{value:"The following is a detailed step-by-step example of how test retries works:",id:"The-following-is-a-detailed-step-by-step-example-of-how-test-retries-works",level:4},{value:"Configure Test Retries",id:"Configure-Test-Retries",level:2},{value:"Global Configuration",id:"Global-Configuration",level:3},{value:"Configure retry attempts for all modes",id:"Configure-retry-attempts-for-all-modes",level:4},{value:"Custom Configurations",id:"Custom-Configurations",level:3},{value:"Individual Test(s)",id:"Individual-Tests",level:4},{value:"Test Suite(s)",id:"Test-Suites",level:4},{value:"Screenshots",id:"Screenshots",level:2},{value:"Videos",id:"Videos",level:2},{value:"Only upload videos for specs with failing or retried tests",id:"Only-upload-videos-for-specs-with-failing-or-retried-tests",level:3},{value:"Cypress Cloud",id:"Cypress-Cloud",level:2},{value:"Frequently Asked Questions (FAQs)",id:"Frequently-Asked-Questions-FAQs",level:2},{value:"Will retried tests be counted as more than one test result in my billing?",id:"Will-retried-tests-be-counted-as-more-than-one-test-result-in-my-billing",level:3},{value:"Can I access the current attempt counter from the test?",id:"Can-I-access-the-current-attempt-counter-from-the-test",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components},{CypressConfigFileTabs:s,DocsImage:i,DocsVideo:o,E2EOrCtTabs:a,Icon:l,TestReplayInfo:d}=t;return s||u("CypressConfigFileTabs",!0),i||u("DocsImage",!0),o||u("DocsVideo",!0),a||u("E2EOrCtTabs",!0),l||u("Icon",!0),d||u("TestReplayInfo",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.admonition,{type:"info",children:[(0,n.jsxs)(t.h5,{id:"What-youll-learn",children:[(0,n.jsx)(l,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"How test retries work"}),"\n",(0,n.jsx)(t.li,{children:"How to configure test retries"}),"\n",(0,n.jsx)(t.li,{children:"How to use test retries with screenshots and videos"}),"\n",(0,n.jsx)(t.li,{children:"How to use test retries with Cypress Cloud"}),"\n"]})]}),"\n",(0,n.jsx)(t.p,{children:"Cypress excels at testing complex systems. However, there are\nstill behaviors that are hard to verify and make tests flaky (i.e., unreliable)\nand fail due to unpredictable conditions. Some common race\nconditions that could result in unreliable tests include:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Animations"}),"\n",(0,n.jsx)(t.li,{children:"API calls"}),"\n",(0,n.jsx)(t.li,{children:"Test server / database availability"}),"\n",(0,n.jsx)(t.li,{children:"Resource dependencies availability"}),"\n",(0,n.jsx)(t.li,{children:"Network issues"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["With test retries, Cypress is able to retry failed tests to help ",(0,n.jsx)(t.a,{href:"/cloud/features/flaky-test-management#Flake-Detection",children:"detect test\nflakiness"})," and continuous integration (CI) build failures. By doing so, this will\nsave your team valuable time and resources so you can focus on what matters most\nto you."]}),"\n",(0,n.jsx)(t.h2,{id:"How-It-Works",children:"How It Works"}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.a,{href:"/app/references/experiments#Experimental-Test-Retries",children:"experimental test retries"})," feature introduced in Cypress 13.4.0 offers more options for ",(0,n.jsx)(t.a,{href:"/cloud/features/flaky-test-management#Flake-Detection",children:"detecting flaky tests"}),". Experimental retries give you control over the conditions of when a test should have a status of pass or fail."]})}),"\n",(0,n.jsxs)(t.p,{children:["By default, tests will not retry when they fail. You'll need to\n",(0,n.jsx)(t.a,{href:"#Configure-Test-Retries",children:"enable test retries in your configuration"})," to use this\nfeature."]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  retries: 2,\n})\n"})}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  retries: 2,\n})\n"})})]}),"\n",(0,n.jsxs)(t.p,{children:["Once test retries are enabled, tests can be configured to have X number of retry\nattempts. For example, if test retries have been configured with ",(0,n.jsx)(t.code,{children:"2"})," retry\nattempts, Cypress will retry tests up to 2 additional times (for a total of 3\nattempts) before potentially being marked as a failed test."]}),"\n",(0,n.jsxs)(t.p,{children:["When each test is run again, the following\n",(0,n.jsx)(t.a,{href:"/app/core-concepts/writing-and-organizing-tests#Hooks",children:"hooks"})," will be re-run\nalso:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"beforeEach"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"afterEach"})}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["However, failures in ",(0,n.jsx)(t.code,{children:"before"})," and ",(0,n.jsx)(t.code,{children:"after"})," hooks will not trigger a retry."]}),"\n",(0,n.jsx)(t.h4,{id:"The-following-is-a-detailed-step-by-step-example-of-how-test-retries-works",children:"The following is a detailed step-by-step example of how test retries works:"}),"\n",(0,n.jsxs)(t.p,{children:["Assuming we have configured test retries with ",(0,n.jsx)(t.strong,{children:"2"})," retry attempts (for a total of\n3 attempts), here is how the tests might run:"]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["A test runs for the first time. If the test ",(0,n.jsx)(l,{name:"check-circle",color:"green"})," passes, Cypress will move forward\nwith any remaining tests as usual."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["If the test ",(0,n.jsx)(l,{name:"times",color:"red"})," fails, Cypress will tell you\nthat the first attempt failed and will attempt to run the test a second time."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["If the test ",(0,n.jsx)(l,{name:"check-circle",color:"green"})," passes after the\nsecond attempt, Cypress will continue with any remaining tests."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["If the test ",(0,n.jsx)(l,{name:"times",color:"red"})," fails a second time, Cypress\nwill make the final third attempt to re-run the test."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["If the test ",(0,n.jsx)(l,{name:"times",color:"red"})," fails a third time, Cypress\nwill mark the test as failed and then move on to run any remaining tests."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(i,{src:"/img/app/test-retries/v10/attempt-3-fail.png",alt:"Test retries attempt 3 fail"}),"\n",(0,n.jsxs)(t.p,{children:["The following is a screen capture of what test retries looks like on the same\nfailed test when run via ",(0,n.jsx)(t.a,{href:"/app/references/command-line#cypress-run",children:"cypress run"}),"."]}),"\n",(0,n.jsx)(i,{src:"/img/app/test-retries/cli-error-message.png",alt:"CLI error message with test retries printed"}),"\n",(0,n.jsxs)(t.p,{children:["During ",(0,n.jsx)(t.a,{href:"/app/references/command-line#cypress-open",children:"cypress open"})," you'll be able\nto see the number of attempts made in the\n",(0,n.jsx)(t.a,{href:"/app/core-concepts/open-mode#Command-Log",children:"Command Log"})," and expand each\nattempt for review and debugging if desired."]}),"\n",(0,n.jsx)(t.h2,{id:"Configure-Test-Retries",children:"Configure Test Retries"}),"\n",(0,n.jsx)(t.h3,{id:"Global-Configuration",children:"Global Configuration"}),"\n",(0,n.jsxs)(t.p,{children:["Typically you will want to define different retry attempts for ",(0,n.jsx)(t.code,{children:"cypress run"}),"\nversus ",(0,n.jsx)(t.code,{children:"cypress open"}),". You can configure this in the\n",(0,n.jsx)(t.a,{href:"/app/references/configuration#Global",children:"Cypress configuration"}),"\nby passing the ",(0,n.jsx)(t.code,{children:"retries"})," option an object with the following options:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"runMode"})," allows you to define the number of test retries when running\n",(0,n.jsx)(t.code,{children:"cypress run"})]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"openMode"})," allows you to define the number of test retries when running\n",(0,n.jsx)(t.code,{children:"cypress open"})]}),"\n"]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  retries: {\n    // Configure retry attempts for `cypress run`\n    // Default is 0\n    runMode: 2,\n    // Configure retry attempts for `cypress open`\n    // Default is 0\n    openMode: 0,\n  },\n})\n"})}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  retries: {\n    // Configure retry attempts for `cypress run`\n    // Default is 0\n    runMode: 2,\n    // Configure retry attempts for `cypress open`\n    // Default is 0\n    openMode: 0,\n  },\n})\n"})})]}),"\n",(0,n.jsx)(t.h4,{id:"Configure-retry-attempts-for-all-modes",children:"Configure retry attempts for all modes"}),"\n",(0,n.jsxs)(t.p,{children:["If you want to configure the retry attempts for all tests run in both\n",(0,n.jsx)(t.code,{children:"cypress run"})," and ",(0,n.jsx)(t.code,{children:"cypress open"}),", you can configure this in the\n",(0,n.jsx)(t.a,{href:"/app/references/configuration#Global",children:"Cypress configuration"}),"\nby defining the ",(0,n.jsx)(t.code,{children:"retries"})," property and setting the desired number of retries."]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  retries: 1,\n})\n"})}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  retries: 1,\n})\n"})})]}),"\n",(0,n.jsx)(t.h3,{id:"Custom-Configurations",children:"Custom Configurations"}),"\n",(0,n.jsx)(t.h4,{id:"Individual-Tests",children:"Individual Test(s)"}),"\n",(0,n.jsxs)(t.p,{children:["If you want to configure retry attempts on a specific test, you can set this by\nusing the\n",(0,n.jsx)(t.a,{href:"/app/core-concepts/writing-and-organizing-tests#Test-Configuration",children:"test's configuration"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"// Customize retry attempts for an individual test\ndescribe('User sign-up and login', () => {\n  // `it` test block with no custom configuration\n  it('should redirect unauthenticated user to sign-in page', () => {\n    // ...\n  })\n\n  // `it` test block with custom configuration\n  it(\n    'allows user to login',\n    {\n      retries: {\n        runMode: 2,\n        openMode: 1,\n      },\n    },\n    () => {\n      // ...\n    }\n  )\n})\n"})}),"\n",(0,n.jsx)(t.h4,{id:"Test-Suites",children:"Test Suite(s)"}),"\n",(0,n.jsx)(t.p,{children:"If you want to configure try attempts for a suite of tests, you can do this by\nsetting the suite's configuration."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"// Customizing retry attempts for a suite of tests\ndescribe(\n  'User bank accounts',\n  {\n    retries: {\n      runMode: 2,\n      openMode: 1,\n    },\n  },\n  () => {\n    // The per-suite configuration is applied to each test\n    // If a test fails, it will be retried\n    it('allows a user to view their transactions', () => {\n      // ...\n    })\n\n    it('allows a user to edit their transactions', () => {\n      // ...\n    })\n  }\n)\n"})}),"\n",(0,n.jsxs)(t.p,{children:["You can find more information about custom configurations here:\n",(0,n.jsx)(t.a,{href:"/app/references/configuration#Test-Configuration",children:"Test Configuration"})]}),"\n",(0,n.jsx)(t.h2,{id:"Screenshots",children:"Screenshots"}),"\n",(0,n.jsxs)(t.p,{children:["When a test retries, Cypress will continue to take screenshots for each failed\nattempt or ",(0,n.jsx)(t.a,{href:"/api/commands/screenshot",children:"cy.screenshot()"})," and suffix each new\nscreenshot with ",(0,n.jsx)(t.code,{children:"(attempt n)"}),", corresponding to the current retry attempt\nnumber."]}),"\n",(0,n.jsx)(t.p,{children:"With the following test code, you would see the below screenshot filenames when\nall 3 attempts fail:"}),"\n",(0,n.jsxs)(a,{children:[(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"describe('User Login', () => {\n  it('displays login errors', () => {\n    cy.visit('/')\n    cy.screenshot('user-login-errors')\n    // ...\n  })\n})\n"})}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"describe('User Login', () => {\n  it('displays login errors', () => {\n    cy.mount(<Login />)\n    cy.screenshot('user-login-errors')\n    // ...\n  })\n})\n"})})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"// screenshot filename from cy.screenshot() on 1st attempt\n'user-login-errors.png'\n// screenshot filename on 1st failed attempt\n'user-login-errors (failed).png'\n// screenshot filename from cy.screenshot() on 2nd attempt\n'user-login-errors (attempt 2).png'\n// screenshot filename on 2nd failed attempt\n'user-login-errors (failed) (attempt 2).png'\n// screenshot filename from cy.screenshot() on 3rd attempt\n'user-login-errors (attempt 3).png'\n// screenshot filename on 3rd failed attempt\n'user-login-errors (failed) (attempt 3).png'\n"})}),"\n",(0,n.jsx)(t.h2,{id:"Videos",children:"Videos"}),"\n",(0,n.jsxs)(t.p,{children:["You can use Cypress's ",(0,n.jsx)(t.a,{href:"/api/node-events/after-spec-api",children:(0,n.jsx)(t.code,{children:"after:spec"})})," event listener\nthat fires after each spec file is run to delete the recorded video for specs\nthat had no retry attempts or failures. Deleting passing and non-retried videos\nafter the run can save resource space on the machine as well as skip the time\nused to process, compress, and upload the video to\n",(0,n.jsx)(t.a,{href:"/cloud/get-started/introduction",children:"Cypress Cloud"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"Only-upload-videos-for-specs-with-failing-or-retried-tests",children:"Only upload videos for specs with failing or retried tests"}),"\n",(0,n.jsx)(t.p,{children:"The example below shows how to delete the recorded video for specs that had no\nretry attempts or failures when using Cypress test retries."}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n// need to install these dependencies\n// npm install lodash del --save-dev\nconst _ = require('lodash')\nconst del = require('del')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:spec', (spec, results) => {\n        if (results && results.video) {\n          // Do we have failures for any retry attempts?\n          const failures = _.some(results.tests, (test) => {\n            return _.some(test.attempts, { state: 'failed' })\n          })\n          if (!failures) {\n            // delete the video if the spec passed and no tests retried\n            return del(results.video)\n          }\n        }\n      })\n    },\n  },\n})\n"})}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n// need to install these dependencies\n// npm install lodash del --save-dev\nimport _ from 'lodash'\nimport del from 'del'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:spec', (spec, results) => {\n        if (results && results.video) {\n          // Do we have failures for any retry attempts?\n          const failures = _.some(results.tests, (test) => {\n            return _.some(test.attempts, { state: 'failed' })\n          })\n          if (!failures) {\n            // delete the video if the spec passed and no tests retried\n            return del(results.video)\n          }\n        }\n      })\n    },\n  },\n})\n"})})]}),"\n",(0,n.jsx)(t.h2,{id:"Cypress-Cloud",children:"Cypress Cloud"}),"\n",(0,n.jsxs)(t.p,{children:["If you are using ",(0,n.jsx)(t.a,{href:"/cloud/get-started/introduction",children:"Cypress Cloud"}),", information\nrelated to test retries is displayed on the Test Results tab for a run.\nSelecting the Flaky filter will show tests that retried and then passed during\nthe run."]}),"\n",(0,n.jsx)(t.p,{children:'These tests are also indicated with a "Flaky" badge on the Latest Runs page and\nTest Results tab on the Run Details page.'}),"\n",(0,n.jsx)(o,{src:"/img/app/test-retries/flaky-test-filter.mp4",title:"Flaky test filter"}),"\n",(0,n.jsx)(t.p,{children:"Clicking on a Test Result will open the Test Case History screen. This\ndemonstrates the number of failed attempts, the screenshots and/or videos of\nfailed attempts, and the error for failed attempts."}),"\n",(0,n.jsx)(i,{src:"/img/app/test-retries/flake-artifacts-and-errors.png",alt:"Flake artifacts and errors"}),"\n",(0,n.jsx)(t.p,{children:"You can also see the Flaky Rate for a given test."}),"\n",(0,n.jsx)(i,{src:"/img/app/test-retries/flaky-rate.png",alt:"Flaky rate"}),"\n",(0,n.jsxs)(t.p,{children:["For a comprehensive view of how flake is affecting your overall test suite, you\ncan review the\n",(0,n.jsx)(t.a,{href:"/cloud/features/flaky-test-management#Flake-Detection",children:"Flake Detection"})," and\n",(0,n.jsx)(t.a,{href:"/cloud/features/flaky-test-management#Flake-Alerting",children:"Flake Alerting"})," features\nhighlighted in the Test Flake Management Guide."]}),"\n",(0,n.jsx)(d,{}),"\n",(0,n.jsx)(t.h2,{id:"Frequently-Asked-Questions-FAQs",children:"Frequently Asked Questions (FAQs)"}),"\n",(0,n.jsx)(t.h3,{id:"Will-retried-tests-be-counted-as-more-than-one-test-result-in-my-billing",children:"Will retried tests be counted as more than one test result in my billing?"}),"\n",(0,n.jsxs)(t.p,{children:["No. Tests recorded during ",(0,n.jsx)(t.code,{children:"cypress run"})," with the ",(0,n.jsx)(t.code,{children:"--record"})," flag will be counted\nthe same with or without test retries."]}),"\n",(0,n.jsxs)(t.p,{children:["We consider each time the ",(0,n.jsx)(t.code,{children:"it()"})," function is called to be a single test for\nbilling purposes. The test retrying will not count as extra test results in your\nbilling."]}),"\n",(0,n.jsxs)(t.p,{children:["You can always see how many tests you've recorded from your organization's\nBilling & Usage page within ",(0,n.jsx)(t.a,{href:"https://on.cypress.io/cloud",children:"Cypress Cloud"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"Can-I-access-the-current-attempt-counter-from-the-test",children:"Can I access the current attempt counter from the test?"}),"\n",(0,n.jsxs)(t.p,{children:["Yes, although ordinarily you would not have to, since this is a low-level\ndetail. But if you want to use the current attempt number, you can use\n",(0,n.jsx)(t.a,{href:"/api/cypress-api/currentretry",children:(0,n.jsx)(t.code,{children:"Cypress.currentRetry"})}),". If you want to\ndetermine the total allowed attempts you can do the following:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"it('does something differently on retry', { retries: 3 }, () => {\n  // Cypress.currentRetry returns the current test retry count\n  const attempt = Cypress.currentRetry\n  // cy.state('runnable') returns the current test object\n  // we can grab the total allowed attempts from its properties\n  const retries = cy.state('runnable')._retries\n  // use the \"attempt\" and \"retries\" values somehow\n})\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The above ",(0,n.jsx)(t.code,{children:"attempt"})," variable will have values 0 through 3 (the first default\ntest execution plus three allowed retries). The ",(0,n.jsx)(t.code,{children:"retries"})," constant in this case\nis always 3."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Tip:"})," Cypress ",(0,n.jsx)(t.a,{href:"/api/utilities/_",children:"bundles Lodash"})," library. Use its helper\nmethods to safely access a property of an object. Let's make sure the function\nsupports different Cypress versions by falling back to the default values."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"it('does something differently on retry', { retries: 3 }, () => {\n  // _.get: if the object or property is missing use the provided default value\n  const attempt = Cypress.currentRetry\n  const retries = Cypress._.get(cy.state('runnable'), '_retries', 0)\n  // use the \"attempt\" and \"retries\" values somehow\n})\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}function u(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,t,s)=>{s.d(t,{Z:()=>a,a:()=>o});var n=s(7294);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);