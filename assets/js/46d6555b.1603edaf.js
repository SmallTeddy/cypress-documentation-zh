"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[4834],{5723:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});var i=s(5893),o=s(1151);const a={title:"Custom Commands",sidebar_position:20},r=void 0,t={id:"api/cypress-api/custom-commands",title:"Custom Commands",description:"Cypress comes with its own API for creating custom commands and overwriting",source:"@site/docs/api/cypress-api/custom-commands.mdx",sourceDirName:"api/cypress-api",slug:"/api/cypress-api/custom-commands",permalink:"/api/cypress-api/custom-commands",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/cypress-api/custom-commands.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",sidebarPosition:20,frontMatter:{title:"Custom Commands",sidebar_position:20},sidebar:"api",previous:{title:"Catalog of Events",permalink:"/api/cypress-api/catalog-of-events"},next:{title:"Custom Queries",permalink:"/api/cypress-api/custom-queries"}},c={},d=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:3},{value:"Arguments",id:"Arguments",level:3},{value:"Examples",id:"Examples",level:2},{value:"Parent Commands",id:"Parent-Commands",level:3},{value:"Click link containing text",id:"Click-link-containing-text",level:4},{value:"Check a token",id:"Check-a-token",level:4},{value:"Download a file",id:"Download-a-file",level:4},{value:"Commands to work with <code>sessionStorage</code>",id:"Commands-to-work-with-sessionStorage",level:4},{value:"Log in command using UI",id:"Log-in-command-using-UI",level:4},{value:"Log in command using request",id:"Log-in-command-using-request",level:4},{value:"Log out command using UI",id:"Log-out-command-using-UI",level:4},{value:"Log out command using <code>localStorage</code> <E2EOnlyBadge></E2EOnlyBadge>",id:"Log-out-command-using-localStorage",level:4},{value:"Create a user",id:"Create-a-user",level:4},{value:"Child Commands",id:"Child-Commands",level:3},{value:"Custom <code>console</code> command",id:"Custom-console-command",level:4},{value:"Dual Commands",id:"Dual-Commands",level:3},{value:"Custom Dual Command",id:"Custom-Dual-Command",level:4},{value:"Overwrite Existing Commands",id:"Overwrite-Existing-Commands",level:3},{value:"Overwrite <code>visit</code> command",id:"Overwrite-visit-command",level:4},{value:"Overwrite <code>type</code> command",id:"Overwrite-type-command",level:4},{value:"Overwrite <code>screenshot</code> command",id:"Overwrite-screenshot-command",level:4},{value:"Overwrite <code>click</code> command",id:"Overwrite-click-command",level:4},{value:"Validations",id:"Validations",level:2},{value:"Require Element",id:"Require-Element",level:3},{value:"Allow Multiple Types",id:"Allow-Multiple-Types",level:3},{value:"<code>.trigger()</code>",id:"trigger",level:4},{value:"Optional with Types",id:"Optional-with-Types",level:3},{value:"Notes",id:"Notes",level:2},{value:"Command Logging",id:"Command-Logging",level:3},{value:"<code>cy.hover()</code> and <code>cy.mount()</code>",id:"cyhover-and-cymount",level:3},{value:"Best Practices",id:"Best-Practices",level:3},{value:"1. Don&#39;t make everything a custom command",id:"1-Dont-make-everything-a-custom-command",level:4},{value:"2. Don&#39;t overcomplicate things",id:"2-Dont-overcomplicate-things",level:4},{value:"3. Don&#39;t do too much in a single command",id:"3-Dont-do-too-much-in-a-single-command",level:4},{value:"4. Skip your UI as much as possible",id:"4-Skip-your-UI-as-much-as-possible",level:4},{value:"5. Write TypeScript definitions",id:"5-Write-TypeScript-definitions",level:4},{value:"6. Create a function that adds the custom command",id:"6-Create-a-function-that-adds-the-custom-command",level:4},{value:"History",id:"History",level:2},{value:"See also",id:"See-also",level:2}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components},{DocsImage:s,E2EOnlyBadge:a,Icon:r}=n;return s||m("DocsImage",!0),a||m("E2EOnlyBadge",!0),r||m("Icon",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Cypress comes with its own API for creating custom commands and overwriting\nexisting commands. The built in Cypress commands use the very same API that's\ndefined below."}),"\n",(0,i.jsx)(n.p,{children:"There are two API available for adding custom commands:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#Syntax",children:(0,i.jsx)(n.code,{children:"Cypress.Commands.add()"})})," - use to add a custom command to use when\nwriting tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#Overwrite-Existing-Commands",children:(0,i.jsx)(n.code,{children:"Cypress.Command.overwrite()"})})," - use to\noverride an existing built-in Cypress command or reserved internal function.\n",(0,i.jsx)(n.strong,{children:"Caution:"})," this overrides it for Cypress as well and could impact how\nCypress behaves."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["If you want your method to have builtin\n",(0,i.jsx)(n.a,{href:"/app/core-concepts/retry-ability",children:"retry-ability"}),", and especially if you\nreturn a DOM element for further commands to act on, consider writing a\n",(0,i.jsx)(n.a,{href:"/api/cypress-api/custom-queries",children:"custom query"})," instead."]})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["We recommend defining queries is in your ",(0,i.jsx)(n.code,{children:"cypress/support/commands.js"})," file,\nsince it is loaded before any test files are evaluated via an import statement\nin the\n",(0,i.jsx)(n.a,{href:"/app/core-concepts/writing-and-organizing-tests#Support-file",children:"supportFile"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"Syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"Cypress.Commands.add(name, callbackFn)\nCypress.Commands.add(name, options, callbackFn)\nCypress.Commands.addAll(callbackObj)\nCypress.Commands.addAll(options, callbackObj)\nCypress.Commands.overwrite(name, callbackFn)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"Usage",children:"Usage"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{name:"check-circle",color:"green"})," ",(0,i.jsx)(n.strong,{children:"Correct Usage"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"Cypress.Commands.add('login', (email, pw) => {})\nCypress.Commands.addAll({\n  login(email, pw) {},\n  visit(orig, url, options) {},\n})\nCypress.Commands.overwrite('visit', (orig, url, options) => {})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"Arguments",children:"Arguments"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{name:"angle-right"})," ",(0,i.jsxs)(n.strong,{children:["name ",(0,i.jsx)(n.em,{children:"(String)"})]})]}),"\n",(0,i.jsx)(n.p,{children:"The name of the command you're either adding or overwriting."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{name:"angle-right"})," ",(0,i.jsxs)(n.strong,{children:["callbackFn ",(0,i.jsx)(n.em,{children:"(Function)"})]})]}),"\n",(0,i.jsx)(n.p,{children:"Pass a function that receives the arguments passed to the command."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{name:"angle-right"})," ",(0,i.jsxs)(n.strong,{children:["callbackObj ",(0,i.jsx)(n.em,{children:"(Object)"})]})]}),"\n",(0,i.jsxs)(n.p,{children:["An object with ",(0,i.jsx)(n.code,{children:"callbackFn"}),"s as properties."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{name:"angle-right"})," ",(0,i.jsxs)(n.strong,{children:["options ",(0,i.jsx)(n.em,{children:"(Object)"})]})]}),"\n",(0,i.jsx)(n.p,{children:"Pass in an options object to define the implicit behavior of the custom command."}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"options"})," is only supported for use in ",(0,i.jsx)(n.code,{children:"Cypress.Commands.add()"})," and not\nsupported for use in ",(0,i.jsx)(n.code,{children:"Cypress.Commands.overwrite()"})]})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Option"}),(0,i.jsx)(n.th,{children:"Accepts"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"prevSubject"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"Boolean"}),", ",(0,i.jsx)(n.code,{children:"String"})," or ",(0,i.jsx)(n.code,{children:"Array"})]}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"false"})}),(0,i.jsx)(n.td,{children:"how to handle the previously yielded subject."})]})})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"prevSubject"})," accepts the following values:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"false"}),": ignore any previous subjects: ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"(parent command)"})})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"true"}),": receives the previous subject: ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"(child command)"})})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"optional"}),": may start a chain, or use an existing chain: ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"(dual command)"})})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In addition to controlling the command's implicit behavior you can also add\ndeclarative subject validations such as:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"element"}),": requires the previous subject be a DOM element"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"document"}),": requires the previous subject be the document"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"window"}),": requires the previous subject be the window"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"Examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"Parent-Commands",children:"Parent Commands"}),"\n",(0,i.jsxs)(n.p,{children:["Parent commands always ",(0,i.jsx)(n.strong,{children:"begin"})," a new chain of commands. Even if you've chained\nit off of a previous command, parent commands will always start a new chain, and\nignore previously yielded subjects."]}),"\n",(0,i.jsx)(n.p,{children:"Examples of parent commands:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/api/commands/visit",children:(0,i.jsx)(n.code,{children:"cy.visit()"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/api/commands/request",children:(0,i.jsx)(n.code,{children:"cy.request()"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/api/commands/exec",children:(0,i.jsx)(n.code,{children:"cy.exec()"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/api/commands/intercept",children:(0,i.jsx)(n.code,{children:"cy.intercept()"})})}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"Click-link-containing-text",children:"Click link containing text"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"Cypress.Commands.add('clickLink', (label) => {\n  cy.get('a').contains(label).click()\n})\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"cy.clickLink('Buy Now')\n"})}),"\n",(0,i.jsx)(n.h4,{id:"Check-a-token",children:"Check a token"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"Cypress.Commands.add('checkToken', (token) => {\n  cy.window().its('localStorage.token').should('eq', token)\n})\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"cy.checkToken('abc123')\n"})}),"\n",(0,i.jsx)(n.h4,{id:"Download-a-file",children:"Download a file"}),"\n",(0,i.jsxs)(n.p,{children:["Originally used in\n",(0,i.jsx)(n.a,{href:"https://github.com/Xvier/cypress-downloadfile",children:"cypress-downloadfile"}),", this\ncommand calls other Cypress commands."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"Cypress.Commands.add('downloadFile', (url, directory, fileName) => {\n  return cy.getCookies().then((cookies) => {\n    return cy.task('downloadFile', {\n      url,\n      directory,\n      cookies,\n      fileName,\n    })\n  })\n})\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"cy.downloadFile('https://path_to_file.pdf', 'mydownloads', 'demo.pdf')\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"Commands-to-work-with-sessionStorage",children:["Commands to work with ",(0,i.jsx)(n.code,{children:"sessionStorage"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"Cypress.Commands.add('getSessionStorage', (key) => {\n  cy.window().then((window) => window.sessionStorage.getItem(key))\n})\n\nCypress.Commands.add('setSessionStorage', (key, value) => {\n  cy.window().then((window) => {\n    window.sessionStorage.setItem(key, value)\n  })\n})\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"cy.setSessionStorage('token', 'abc123')\ncy.getSessionStorage('token').should('eq', 'abc123')\n"})}),"\n",(0,i.jsx)(n.h4,{id:"Log-in-command-using-UI",children:"Log in command using UI"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"Cypress.Commands.add('loginViaUi', (user) => {\n  cy.session(\n    user,\n    () => {\n      cy.visit('/login')\n      cy.get('input[name=email]').type(user.email)\n      cy.get('input[name=password]').type(user.password)\n      cy.click('button#login')\n      cy.get('h1').contains(`Welcome back ${user.name}!`)\n    },\n    {\n      validate: () => {\n        cy.getCookie('auth_key').should('exist')\n      },\n    }\n  )\n})\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"cy.loginViaUi({ email: 'fake@email.com', password: '$ecret1', name: 'johndoe' })\n"})}),"\n",(0,i.jsx)(n.h4,{id:"Log-in-command-using-request",children:"Log in command using request"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"Cypress.Commands.add('loginViaApi', (userType, options = {}) => {\n  // this is an example of skipping your UI and logging in programmatically\n\n  // setup some basic types\n  // and user properties\n  const types = {\n    admin: {\n      name: 'Jane Lane',\n      admin: true,\n    },\n    user: {\n      name: 'Jim Bob',\n      admin: false,\n    },\n  }\n\n  // grab the user\n  const user = types[userType]\n\n  // create the user first in the DB\n  cy.request({\n    url: '/seed/users', // assuming you've exposed a seeds route\n    method: 'POST',\n    body: user,\n  })\n    .its('body')\n    .then((body) => {\n      // assuming the server sends back the user details\n      // including a randomly generated password\n      //\n      // we can now login as this newly created user\n      cy.request({\n        url: '/login',\n        method: 'POST',\n        body: {\n          email: body.email,\n          password: body.password,\n        },\n      })\n    })\n})\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// can start a chain off of cy\ncy.loginViaApi('admin')\n\n// can be chained but will not receive the previous subject\ncy.get('button').loginViaApi('user')\n"})}),"\n",(0,i.jsx)(n.h4,{id:"Log-out-command-using-UI",children:"Log out command using UI"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"Cypress.Commands.add('logout', () => {\n  cy.contains('Login').should('not.exist')\n  cy.get('.avatar').click()\n  cy.contains('Logout').click()\n  cy.get('h1').contains('Login')\n  cy.getCookie('auth_key').should('not.exist')\n})\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"Log-out-command-using-localStorage",children:["Log out command using ",(0,i.jsx)(n.code,{children:"localStorage"})," ",(0,i.jsx)(a,{})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"Cypress.Commands.add('logout', () => {\n  cy.window().its('localStorage').invoke('removeItem', 'session')\n\n  cy.visit('/login')\n})\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"cy.logout()\n"})}),"\n",(0,i.jsx)(n.h4,{id:"Create-a-user",children:"Create a user"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"Cypress.Commands.add('createUser', (user) => {\n  cy.request({\n    method: 'POST',\n    url: 'https://www.example.com/tokens',\n    body: {\n      email: 'admin_username',\n      password: 'admin_password',\n    },\n  }).then((resp) => {\n    cy.request({\n      method: 'POST',\n      url: 'https://www.example.com/users',\n      headers: { Authorization: 'Bearer ' + resp.body.token },\n      body: user,\n    })\n  })\n})\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"cy.createUser({\n  id: 123,\n  name: 'Jane Lane',\n})\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)("strong",{children:"Command Log"}),(0,i.jsxs)(n.p,{children:["Did you know that you can control how your custom commands appear in the Command\nLog? Read more about ",(0,i.jsx)(n.a,{href:"#Command-Logging",children:"Command Logging"}),"."]})]}),"\n",(0,i.jsx)(n.h3,{id:"Child-Commands",children:"Child Commands"}),"\n",(0,i.jsxs)(n.p,{children:["Child commands are always chained off of a ",(0,i.jsx)(n.strong,{children:"parent"})," command, or another\n",(0,i.jsx)(n.strong,{children:"child"})," command."]}),"\n",(0,i.jsx)(n.p,{children:"The previous subject will automatically be yielded to the callback function."}),"\n",(0,i.jsx)(n.p,{children:"Examples of child commands:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/api/commands/click",children:(0,i.jsx)(n.code,{children:".click()"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/api/commands/submit",children:(0,i.jsx)(n.code,{children:".submit()"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/api/commands/trigger",children:(0,i.jsx)(n.code,{children:".trigger()"})})}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"Custom-console-command",children:["Custom ",(0,i.jsx)(n.code,{children:"console"})," command"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// not a super useful custom command\n// but demonstrates how subject is passed\n// and how the arguments are shifted\nCypress.Commands.add(\n  'console',\n  {\n    prevSubject: true,\n  },\n  (subject, method) => {\n    // the previous subject is automatically received\n    // and the commands arguments are shifted\n\n    // allow us to change the console method used\n    method = method || 'log'\n\n    // log the subject to the console\n    console[method]('The subject is', subject)\n\n    // whatever we return becomes the new subject\n    //\n    // we don't want to change the subject so\n    // we return whatever was passed in\n    return subject\n  }\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"cy.get('button')\n  .console('info')\n  .then(($button) => {\n    // subject is still $button\n  })\n"})}),"\n",(0,i.jsxs)(n.p,{children:["By setting the ",(0,i.jsx)(n.code,{children:"{ prevSubject: true }"}),", our new ",(0,i.jsx)(n.code,{children:".console()"})," command will\nrequire a subject."]}),"\n",(0,i.jsx)(n.p,{children:"Invoking it like this would error:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"cy.console() // error about how you can't call console without a subject\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Whenever you're using a child command you likely want to use\n",(0,i.jsx)(n.a,{href:"/api/commands/wrap",children:"cy.wrap()"})," on the subject. Wrapping it enables you to\nimmediately use more Cypress commands on that subject."]})}),"\n",(0,i.jsx)(n.h3,{id:"Dual-Commands",children:"Dual Commands"}),"\n",(0,i.jsx)(n.p,{children:"A dual command can either start a chain of commands or be chained off of an\nexisting one. It is basically the hybrid between both a parent and a child\ncommand. You will likely rarely use this, and only a handful of our internal\ncommands use this."}),"\n",(0,i.jsx)(n.p,{children:"Nevertheless, it is useful if your command can work in multiple ways - either\nwith an existing subject or without one."}),"\n",(0,i.jsx)(n.p,{children:"Examples of dual commands:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/api/commands/screenshot",children:(0,i.jsx)(n.code,{children:"cy.screenshot()"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/api/commands/scrollto",children:(0,i.jsx)(n.code,{children:"cy.scrollTo()"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/api/commands/wait",children:(0,i.jsx)(n.code,{children:"cy.wait()"})})}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"Custom-Dual-Command",children:"Custom Dual Command"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"Cypress.Commands.add('dismiss', {\n  prevSubject: 'optional'\n}, (subject, arg1, arg2) => {\n  // subject may be defined or undefined\n  // so you likely want to branch the logic\n  // based off of that\n\n  if (subject) {\n    // wrap the existing subject\n    // and do something with it\n    cy.wrap(subject)\n    ...\n  } else {\n    ...\n  }\n})\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"cy.dismiss() // no subject\ncy.get('#dialog').dismiss() // with subject\n"})}),"\n",(0,i.jsx)(n.h3,{id:"Overwrite-Existing-Commands",children:"Overwrite Existing Commands"}),"\n",(0,i.jsx)(n.p,{children:"You can also modify the behavior of existing Cypress commands. This is useful to\nalways set some defaults to avoid creating another command that ends up using\nthe original."}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Cypress.Commands.overwrite"})," can only overwrite commands, not queries. If you\nwant to modify the behavior of a query, you'll need to use\n",(0,i.jsx)(n.a,{href:"/api/cypress-api/custom-queries",children:(0,i.jsx)(n.code,{children:"Cypress.Commands.overwriteQuery"})})," instead."]})}),"\n",(0,i.jsxs)(n.h4,{id:"Overwrite-visit-command",children:["Overwrite ",(0,i.jsx)(n.code,{children:"visit"})," command"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"Cypress.Commands.overwrite('visit', (originalFn, url, options) => {\n  const domain = Cypress.env('BASE_DOMAIN')\n\n  if (domain === '...') {\n    url = '...'\n  }\n\n  if (options.something === 'else') {\n    url = '...'\n  }\n\n  // originalFn is the existing `visit` command that you need to call\n  // and it will receive whatever you pass in here.\n  //\n  // make sure to add a return here!\n  return originalFn(url, options)\n})\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["We see many of our users creating their own ",(0,i.jsx)(n.code,{children:"visitApp"})," command. We commonly see\nthat all you're doing is swapping out base urls for ",(0,i.jsx)(n.code,{children:"development"})," vs\n",(0,i.jsx)(n.code,{children:"production"})," environments."]}),(0,i.jsxs)(n.p,{children:["This is usually unnecessary because Cypress is already configured to swap out a\n",(0,i.jsx)(n.code,{children:"baseUrl"})," that both ",(0,i.jsx)(n.a,{href:"/api/commands/visit",children:"cy.visit()"})," and\n",(0,i.jsx)(n.a,{href:"/api/commands/request",children:"cy.request()"})," use. Set the ",(0,i.jsx)(n.code,{children:"baseUrl"})," configuration\nproperty in your ",(0,i.jsx)(n.a,{href:"/app/references/configuration",children:"Cypress configuration"})," and\noverride it with the ",(0,i.jsx)(n.code,{children:"CYPRESS_BASE_URL"})," environment variable."]}),(0,i.jsx)(n.p,{children:"For more complex use cases feel free to overwrite existing commands."})]}),"\n",(0,i.jsxs)(n.h4,{id:"Overwrite-type-command",children:["Overwrite ",(0,i.jsx)(n.code,{children:"type"})," command"]}),"\n",(0,i.jsxs)(n.p,{children:["If you are typing into a password field, the password input is masked\nautomatically within your application. But ",(0,i.jsx)(n.a,{href:"/api/commands/type",children:".type()"}),"\nautomatically logs any typed content into the Cypress Command Log."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"cy.get('#username').type('username@email.com')\ncy.get('#password').type('superSecret123')\n"})}),"\n",(0,i.jsx)(s,{src:"/img/api/custom-commands/custom-command-type-no-masked-password.png",alt:"Cypress Command Log showing password within type command"}),"\n",(0,i.jsxs)(n.p,{children:["You may want to mask some values passed to the ",(0,i.jsx)(n.a,{href:"/api/commands/type",children:".type()"}),"\ncommand so that sensitive data does not display in screenshots or videos of your\ntest run. This example overwrites the ",(0,i.jsx)(n.a,{href:"/api/commands/type",children:".type()"})," command to\nallow you to mask sensitive data in the Cypress Command Log."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"Cypress.Commands.overwrite('type', (originalFn, element, text, options) => {\n  if (options && options.sensitive) {\n    // turn off original log\n    options.log = false\n    // create our own log with masked message\n    Cypress.log({\n      $el: element,\n      name: 'type',\n      message: '*'.repeat(text.length),\n    })\n  }\n\n  return originalFn(element, text, options)\n})\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"cy.get('#username').type('username@email.com')\ncy.get('#password').type('superSecret123', { sensitive: true })\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now our sensitive password is not printed to the Cypress Command Log when\n",(0,i.jsx)(n.code,{children:"sensitive: true"})," is passed as an option to ",(0,i.jsx)(n.a,{href:"/api/commands/type",children:".type()"}),"."]}),"\n",(0,i.jsx)(s,{src:"/img/api/custom-commands/custom-command-type-masked-password.png",alt:"Cypress command log showing masked password as asterisks within type command"}),"\n",(0,i.jsxs)(n.h4,{id:"Overwrite-screenshot-command",children:["Overwrite ",(0,i.jsx)(n.code,{children:"screenshot"})," command"]}),"\n",(0,i.jsxs)(n.p,{children:["This example overwrites ",(0,i.jsx)(n.a,{href:"/api/commands/screenshot",children:"cy.screenshot()"})," to always\nwait until a certain element is visible."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"Cypress.Commands.overwrite(\n  'screenshot',\n  (originalFn, subject, fileName, options) => {\n    // call another command, no need to return as it is managed\n    cy.get('.app')\n      .should('be.visible')\n\n      // overwrite the default timeout, because screenshot does that internally\n      // otherwise the `then` is limited to the default command timeout\n      .then({ timeout: Cypress.config('responseTimeout') }, () => {\n        // return the original function so that cypress waits for it\n        return originalFn(subject, fileName, options)\n      })\n  }\n)\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"Overwrite-click-command",children:["Overwrite ",(0,i.jsx)(n.code,{children:"click"})," command"]}),"\n",(0,i.jsxs)(n.p,{children:["This example overwrites ",(0,i.jsx)(n.a,{href:"/api/commands/click",children:".click()"})," to always have the\n",(0,i.jsx)(n.code,{children:"waitForAnimations"})," option set to ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"Cypress.Commands.overwrite(\n  'click',\n  (originalFn, subject, positionOrX, y, options = {}) => {\n    options.waitForAnimations = false\n    return originalFn(subject, positionOrX, y, options)\n  }\n)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"Validations",children:"Validations"}),"\n",(0,i.jsxs)(n.p,{children:["As noted in the ",(0,i.jsx)(n.a,{href:"#Arguments",children:"Arguments"})," above, you can also set ",(0,i.jsx)(n.code,{children:"prevSubject"})," to\none of:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"element"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"document"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"window"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"When doing so Cypress will automatically validate your subject to ensure it\nconforms to one of those types."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Adding validations is optional. Passing ",(0,i.jsx)(n.code,{children:"{ prevSubject: true }"})," will require a\nsubject, but not validate its type."]})}),"\n",(0,i.jsx)(n.h3,{id:"Require-Element",children:"Require Element"}),"\n",(0,i.jsxs)(n.p,{children:["Require subject be of type: ",(0,i.jsx)(n.code,{children:"element"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// this is how .click() is implemented\nCypress.Commands.add(\n  'click',\n  {\n    prevSubject: 'element',\n  },\n  (subject, options) => {\n    // receives the previous subject and it's\n    // guaranteed to be an element\n  }\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{name:"check-circle",color:"green"})," ",(0,i.jsx)(n.strong,{children:"Valid Usage"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"cy.get('button').click() // has subject, and is `element`\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{name:"exclamation-triangle",color:"red"})," ",(0,i.jsx)(n.strong,{children:"Invalid Usage"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"cy.click() // no subject, will error\ncy.wrap([]).click() // has subject, but not `element`, will error\n"})}),"\n",(0,i.jsx)(n.h3,{id:"Allow-Multiple-Types",children:"Allow Multiple Types"}),"\n",(0,i.jsx)(n.h4,{id:"trigger",children:(0,i.jsx)(n.code,{children:".trigger()"})}),"\n",(0,i.jsxs)(n.p,{children:["Require subject be one of the following types: ",(0,i.jsx)(n.code,{children:"element"}),", ",(0,i.jsx)(n.code,{children:"document"})," or ",(0,i.jsx)(n.code,{children:"window"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// this is how .trigger() is implemented\nCypress.Commands.add(\n  'trigger',\n  {\n    prevSubject: ['element', 'document', 'window'],\n  },\n  (subject, eventName, options) => {\n    // receives the previous subject and it's\n    // guaranteed to be an element, document, or window\n  }\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{name:"check-circle",color:"green"})," ",(0,i.jsx)(n.strong,{children:"Valid Usage"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"cy.get('button').trigger() // has subject, and is `element`\ncy.document().trigger() // has subject, and is `document`\ncy.window().trigger() // has subject, and is `window`\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{name:"exclamation-triangle",color:"red"})," ",(0,i.jsx)(n.strong,{children:"Invalid Usage"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"cy.trigger() // no subject, will error\ncy.wrap(true).trigger() // has subject, but not `element`, will error\n"})}),"\n",(0,i.jsx)(n.p,{children:'Validations always work as "or" not "and".'}),"\n",(0,i.jsx)(n.h3,{id:"Optional-with-Types",children:"Optional with Types"}),"\n",(0,i.jsxs)(n.p,{children:["You can also mix optional commands ",(0,i.jsx)(n.strong,{children:"with"})," validations."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// this is how .scrollTo() is implemented\nCypress.Commands.add(\n  'scrollTo',\n  {\n    prevSubject: ['optional', 'element', 'window'],\n  },\n  (subject, ...args) => {\n    // subject could be undefined\n    // since it's optional.\n    //\n    // if it's present then it's and element or window.\n    // - when window, we'll scroll to a position on the page.\n    // - when element, we'll scroll to a position related to the element.\n    if (subject) {\n      // ...\n    } else {\n      // ...\n    }\n  }\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{name:"check-circle",color:"green"})," ",(0,i.jsx)(n.strong,{children:"Valid Usage"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"cy.scrollTo() // no subject, but valid because it's optional\ncy.get('#main').scrollTo() // has subject, and is `element`\ncy.visit().scrollTo() // has subject, and since visit yields `window` it's ok\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{name:"exclamation-triangle",color:"red"})," ",(0,i.jsx)(n.strong,{children:"Invalid Usage"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"cy.document().scrollTo() // has subject, but it's a `document`, will error\ncy.wrap(null).scrollTo() // has subject, but it's `null`, will error\n"})}),"\n",(0,i.jsx)(n.h2,{id:"Notes",children:"Notes"}),"\n",(0,i.jsx)(n.h3,{id:"Command-Logging",children:"Command Logging"}),"\n",(0,i.jsx)(n.p,{children:"When creating your own custom command, you can control how it appears and\nbehaves in the Command Log."}),"\n",(0,i.jsxs)(n.p,{children:["Take advantage of the ",(0,i.jsx)(n.a,{href:"/api/cypress-api/cypress-log",children:(0,i.jsx)(n.code,{children:"Cypress.log()"})})," API. When\nyou're issuing many internal Cypress commands, consider passing ",(0,i.jsx)(n.code,{children:"{ log: false }"}),"\nto those commands, and programmatically controlling your custom command. This\nwill cleanup the Command Log and be much more visually appealing and\nunderstandable."]}),"\n",(0,i.jsxs)(n.h3,{id:"cyhover-and-cymount",children:[(0,i.jsx)(n.code,{children:"cy.hover()"})," and ",(0,i.jsx)(n.code,{children:"cy.mount()"})]}),"\n",(0,i.jsxs)(n.p,{children:["Cypress does not have ",(0,i.jsx)(n.code,{children:"cy.hover()"})," or ",(0,i.jsx)(n.code,{children:"cy.mount()"})," commands out-of-the-box. See\nhow to craft your own ",(0,i.jsx)(n.a,{href:"/api/commands/hover",children:(0,i.jsx)(n.code,{children:"cy.hover()"})})," and\n",(0,i.jsx)(n.a,{href:"/api/commands/mount",children:(0,i.jsx)(n.code,{children:"cy.mount()"})})," custom commands."]}),"\n",(0,i.jsx)(n.h3,{id:"Best-Practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h4,{id:"1-Dont-make-everything-a-custom-command",children:"1. Don't make everything a custom command"}),"\n",(0,i.jsxs)(n.p,{children:["Custom commands work well when you're needing to describe behavior that's\ndesirable across ",(0,i.jsx)(n.strong,{children:"all of your tests"}),". Examples would be a ",(0,i.jsx)(n.code,{children:"cy.setup()"})," or\n",(0,i.jsx)(n.code,{children:"cy.login()"})," or extending your application's behavior like\n",(0,i.jsx)(n.code,{children:"cy.get('.dropdown').dropdown('Apples')"}),". These are specific to your application\nand can be used everywhere."]}),"\n",(0,i.jsxs)(n.p,{children:["However, this pattern can be used and abused. Let's not forget - writing Cypress\ntests is ",(0,i.jsx)(n.strong,{children:"JavaScript"}),", and it's often more efficient to write a function for\nrepeatable behavior that's specific to only ",(0,i.jsx)(n.strong,{children:"a single spec file"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If you're working on a ",(0,i.jsx)(n.code,{children:"search.cy.js"})," file and want to compose several\nrepeatable actions together, you should first ask yourself:"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Can this be written as a function?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The answer is usually ",(0,i.jsx)(n.strong,{children:"yes"}),". Here's an example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// There's no reason to create something like a cy.search() custom\n// command because this behavior is only applicable to a single spec file\n//\n// Use a regular ol' javascript function folks!\nconst search = (term, options = {}) => {\n  // example massaging to defaults\n  _.defaults(options, {\n    headers: {},\n  })\n\n  const { fixture, headers } = options\n\n  // return cy chain here so we can\n  // chain off this function below\n  return cy\n    .log(`Searching for: ${term} `)\n    .intercept('GET', '/search/**', (req) => {\n      req.reply({\n        statusCode: 200,\n        body: `fixture:${fixture}`,\n        headers: headers,\n      })\n    })\n    .as('getSearchResults')\n    .get('#search')\n    .type(term)\n    .wait('@getSearchResults')\n}\n\nit('displays a list of search results', () => {\n  cy.visit('/page')\n    .then(() => {\n      search('cypress.io', {\n        fixture: 'list',\n      }).then((reqRes) => {\n        // do something with the '@getSearchResults'\n        // request such as make assertions on the\n        // request body or url params\n        // {\n        //   url: 'http://app.com/search?cypress.io'\n        //   method: 'GET',\n        //   duration: 123,\n        //   request: {...},\n        //   response: {...},\n        // }\n      })\n    })\n    .get('#results li')\n    .should('have.length', 5)\n    .get('#pagination')\n    .should('not.exist')\n})\n\nit('displays no search results', () => {\n  cy.visit('/page')\n    .then(() => {\n      search('cypress.io', {\n        fixture: 'zero',\n      })\n    })\n    .get('#results')\n    .should('contain', 'No results found')\n})\n\nit('paginates many search results', () => {\n  cy.visit('/page')\n    .then(() => {\n      search('cypress.io', {\n        fixture: 'list',\n        headers: {\n          // trick our app into thinking\n          // there's a bunch of pages\n          'x-pagination-total': 3,\n        },\n      })\n    })\n    .get('#pagination')\n    .should(($pagination) => {\n      // should offer to goto next page\n      expect($pagination).to.contain('Next')\n\n      // should have provided 3 page links\n      expect($pagination.find('li.page')).to.have.length(3)\n    })\n})\n"})}),"\n",(0,i.jsx)(n.h4,{id:"2-Dont-overcomplicate-things",children:"2. Don't overcomplicate things"}),"\n",(0,i.jsx)(n.p,{children:"Custom commands you write are generally an abstraction over a series of internal\ncommands. That means you and your team members exert much more mental effort to\nunderstand what your custom command does."}),"\n",(0,i.jsx)(n.p,{children:"There's no reason to add this level of complexity when you're only wrapping a\ncouple commands."}),"\n",(0,i.jsx)(n.p,{children:"Don't do things like:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(r,{name:"exclamation-triangle",color:"red"})," ",(0,i.jsx)(n.code,{children:"cy.clickButton(selector)"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(r,{name:"exclamation-triangle",color:"red"})," ",(0,i.jsx)(n.code,{children:".shouldBeVisible()"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This first custom command is wrapping ",(0,i.jsx)(n.code,{children:"cy.get(selector).click()"}),". Going down\nthis route would lead to creating dozens or even hundreds of custom commands to\ncover every possible combination of element interactions. It's completely\nunnecessary."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:".shouldBeVisible()"})," custom command isn't worth the trouble or abstraction\nwhen you can already use: ",(0,i.jsx)(n.code,{children:".should('be.visible')"})]}),"\n",(0,i.jsxs)(n.p,{children:["Testing in Cypress is all about ",(0,i.jsx)(n.strong,{children:"readability"})," and ",(0,i.jsx)(n.strong,{children:"simplicity"}),". You don't\nhave to do that much actual programming to get a lot done. You also don't need\nto worry about keeping your code as DRY as possible. Test code serves a\ndifferent purpose than app code. Understandability and debuggability should be\nprioritized above all else."]}),"\n",(0,i.jsx)(n.p,{children:"Try not to overcomplicate things and create too many abstractions. When in\ndoubt, use a regular function for individual spec files."}),"\n",(0,i.jsx)(n.h4,{id:"3-Dont-do-too-much-in-a-single-command",children:"3. Don't do too much in a single command"}),"\n",(0,i.jsx)(n.p,{children:"Make your custom commands composable and as unopinionated as possible. Cramming\ntoo much into them makes them inflexible and requires more and more options\npassing to control their behavior."}),"\n",(0,i.jsx)(n.p,{children:"Try to add either zero or as few assertions as possible in your custom command.\nThose tend to shape your command into a much more rigid structure. Sometimes\nthis is unavoidable, but a best practice is to let the calling code choose when\nand how to use assertions."}),"\n",(0,i.jsx)(n.h4,{id:"4-Skip-your-UI-as-much-as-possible",children:"4. Skip your UI as much as possible"}),"\n",(0,i.jsxs)(n.p,{children:["Custom commands are a great way to abstract away setup (specific to your app).\nWhen doing those kinds of tasks, skip as much of the UI as possible. Use\n",(0,i.jsx)(n.a,{href:"/api/commands/request",children:(0,i.jsx)(n.code,{children:"cy.request()"})})," to login, set cookies or localStorage\ndirectly, stub and mock your applications functions, and / or trigger events\nprogrammatically."]}),"\n",(0,i.jsx)(n.p,{children:"Having custom commands repeat the same UI actions over and over again is slow,\nand unnecessary. Try to take as many shortcuts as possible."}),"\n",(0,i.jsx)(n.h4,{id:"5-Write-TypeScript-definitions",children:"5. Write TypeScript definitions"}),"\n",(0,i.jsxs)(n.p,{children:["You can describe the method signature for your custom command, allowing\nIntelliSense to show helpful documentation. See the\n",(0,i.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-example-todomvc#cypress-intellisense",children:(0,i.jsx)(n.code,{children:"cypress-example-todomvc"})}),"\nrepository for a working example."]}),"\n",(0,i.jsx)(n.h4,{id:"6-Create-a-function-that-adds-the-custom-command",children:"6. Create a function that adds the custom command"}),"\n",(0,i.jsxs)(n.p,{children:["Cypress ",(0,i.jsx)(n.a,{href:"/app/references/changelog#12-17-4",children:"12.17.4"})," includes a Webpack upgrade (v4 to v5), which ",(0,i.jsx)(n.a,{href:"https://webpack.js.org/blog/2020-10-10-webpack-5-release/#inner-module-tree-shaking",children:"tree shakes out"})," any side-effects or files that ",(0,i.jsx)(n.em,{children:"only"})," include side-effects."]}),"\n",(0,i.jsxs)(n.p,{children:["If you are using TypeScript and have Webpack's ",(0,i.jsx)(n.code,{children:"sideEffects:false"})," set in your package.json, custom Cypress commands will not be registered by the common pattern of writing the commands in one file and having them be run as a side effect of importing the file. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// cypress/support/commands.ts\nCypress.Commands.add("login", (email, password) => { ... })\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// cypress/support/e2e.ts\nimport './commands'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To support ",(0,i.jsx)(n.code,{children:"sideEffects:false"}),", you can wrap the Cypress commands in a function that will be imported by the support file."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// cypress/support/commands.ts\nexport function registerCommands(){\n  Cypress.Commands.add("login", (email, password) => { ... })\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// cypress/support/e2e.ts\nimport { registerCommands } from './commands'\n\nregisterCommands()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"History",children:"History"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Version"}),(0,i.jsx)(n.th,{children:"Changes"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/app/references/changelog#0-20-0",children:"0.20.0"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"Cypress.Commands"})," API added"]})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"See-also",children:"See also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["See how to add\n",(0,i.jsx)(n.a,{href:"/app/tooling/typescript-support#Types-for-Custom-Commands",children:"TypeScript support for custom commands"})]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)("a",{href:"/app/plugins/plugins-list#custom-commands",children:(0,i.jsx)(n.p,{children:"Plugins using custom commands"})}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/api/cypress-api/cypress-log",children:"Cypress.log()"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/app/references/recipes#Logging-In",children:"Recipe: Logging In"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,s)=>{s.d(n,{Z:()=>t,a:()=>r});var i=s(7294);const o={},a=i.createContext(o);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);