"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[2316],{739:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>c});var i=n(5893),o=n(1151);const t={title:"spy"},a=void 0,r={id:"api/commands/spy",title:"spy",description:"Wrap a method in a spy in order to record calls to and arguments of the",source:"@site/docs/api/commands/spy.mdx",sourceDirName:"api/commands",slug:"/api/commands/spy",permalink:"/api/commands/spy",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/commands/spy.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",frontMatter:{title:"spy"},sidebar:"api",previous:{title:"spread",permalink:"/api/commands/spread"},next:{title:"stub",permalink:"/api/commands/stub"}},d={},c=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:3},{value:"Arguments",id:"Arguments",level:3},{value:"Yields <Icon></Icon>",id:"Yields",level:3},{value:"Examples",id:"Examples",level:2},{value:"Method",id:"Method",level:3},{value:"Wrap a method with a spy",id:"Wrap-a-method-with-a-spy",level:4},{value:"Disable logging to Command Log",id:"Disable-logging-to-Command-Log",level:4},{value:"More <code>cy.spy()</code> examples",id:"More-cyspy-examples",level:4},{value:"Aliases",id:"Aliases",level:3},{value:"Notes",id:"Notes",level:2},{value:"Restores",id:"Restores",level:3},{value:"Automatic reset/restore between tests",id:"Automatic-resetrestore-between-tests",level:4},{value:"Differences",id:"Differences",level:3},{value:"Difference between cy.spy() and cy.stub()",id:"Difference-between-cyspy-and-cystub",level:4},{value:"Assertions",id:"Assertions",level:3},{value:"Assertion Support",id:"Assertion-Support",level:4},{value:"Command Log",id:"Command-Log",level:2},{value:"History",id:"History",level:2},{value:"See also",id:"See-also",level:2}];function l(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components},{DocsImage:n,Icon:t}=s;return n||p("DocsImage",!0),t||p("Icon",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:"Wrap a method in a spy in order to record calls to and arguments of the\nfunction."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"cy.spy()"})," is a utility function, and is not a Cypress command, query or\nassertion. It is not retryable, chainable, or timeout-able."]}),"\n",(0,i.jsx)(s.admonition,{type:"info",children:(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Note:"})," ",(0,i.jsx)(s.code,{children:".spy()"})," assumes you are already familiar with our guide:\n",(0,i.jsx)(s.a,{href:"/app/guides/stubs-spies-and-clocks",children:"Stubs, Spies, and Clocks"})]})}),"\n",(0,i.jsx)(s.h2,{id:"Syntax",children:"Syntax"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"cy.spy(object, method)\n"})}),"\n",(0,i.jsx)(s.h3,{id:"Usage",children:"Usage"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(t,{name:"check-circle",color:"green"})," ",(0,i.jsx)(s.strong,{children:"Correct Usage"})]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"cy.spy(user, 'addFriend')\ncy.spy(user, 'addFriend').as('addFriend')\n"})}),"\n",(0,i.jsx)(s.h3,{id:"Arguments",children:"Arguments"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(t,{name:"angle-right"})," ",(0,i.jsxs)(s.strong,{children:["object ",(0,i.jsx)(s.em,{children:"(Object)"})]})]}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"object"})," that has the ",(0,i.jsx)(s.code,{children:"method"})," to be wrapped."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(t,{name:"angle-right"})," ",(0,i.jsxs)(s.strong,{children:["method ",(0,i.jsx)(s.em,{children:"(String)"})]})]}),"\n",(0,i.jsxs)(s.p,{children:["The name of the ",(0,i.jsx)(s.code,{children:"method"})," on the ",(0,i.jsx)(s.code,{children:"object"})," to be wrapped."]}),"\n",(0,i.jsxs)(s.h3,{id:"Yields",children:["Yields ",(0,i.jsx)(s.a,{href:"/app/core-concepts/introduction-to-cypress#Subject-Management",children:(0,i.jsx)(t,{name:"question-circle"})})]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"cy.spy()"})," is ",(0,i.jsx)(s.em,{children:"synchronous"})," and returns a value (the spy) instead of a\nPromise-like chain-able object. It can be aliased."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"cy.spy()"})," returns a\n",(0,i.jsx)(s.a,{href:"https://sinonjs.org/releases/v8/spies/",children:"Sinon.js spy"}),". All methods found\non Sinon.JS spies are supported."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"Examples",children:"Examples"}),"\n",(0,i.jsx)(s.h3,{id:"Method",children:"Method"}),"\n",(0,i.jsx)(s.h4,{id:"Wrap-a-method-with-a-spy",children:"Wrap a method with a spy"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"// assume App.start calls util.addListeners\ncy.spy(util, 'addListeners')\nApp.start()\nexpect(util.addListeners).to.be.called\n"})}),"\n",(0,i.jsx)(s.h4,{id:"Disable-logging-to-Command-Log",children:"Disable logging to Command Log"}),"\n",(0,i.jsxs)(s.p,{children:["You can chain a ",(0,i.jsx)(s.code,{children:".log(bool)"})," method to disable ",(0,i.jsx)(s.code,{children:"cy.spy()"})," calls from being\nshown in the Command Log. This may be useful when your stubs are called an\nexcessive number of times."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"const obj = {\n  foo() {},\n}\nconst spy = cy.spy(obj, 'foo').log(false)\n"})}),"\n",(0,i.jsxs)(s.h4,{id:"More-cyspy-examples",children:["More ",(0,i.jsx)(s.code,{children:"cy.spy()"})," examples"]}),"\n",(0,i.jsx)(s.admonition,{type:"info",children:(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"/app/references/recipes#Stubbing-and-spying",children:"Check out our example recipe testing spying, stubbing and time"})})}),"\n",(0,i.jsx)(s.h3,{id:"Aliases",children:"Aliases"}),"\n",(0,i.jsxs)(s.p,{children:["You can alias spies, similar to how ",(0,i.jsx)(s.a,{href:"/api/commands/as",children:(0,i.jsx)(s.code,{children:".as()"})})," works. This can\nmake your spies easier to identify in error messages and Cypress's command log,\nand allows you to assert against them later using ",(0,i.jsx)(s.code,{children:"cy.get()"}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"const obj = {\n  foo() {},\n}\nconst spy = cy.spy(obj, 'foo').as('anyArgs')\nconst withFoo = spy.withArgs('foo').as('withFoo')\n\nobj.foo()\n\nexpect(spy).to.be.called\ncy.get('@withFoo').should('be.called') // purposefully failing assertion\n"})}),"\n",(0,i.jsx)(s.p,{children:"You will see the following in the command log:"}),"\n",(0,i.jsx)(n,{src:"/img/api/spy/using-spy-with-alias.png",alt:"spies with aliases"}),"\n",(0,i.jsx)(s.h2,{id:"Notes",children:"Notes"}),"\n",(0,i.jsx)(s.h3,{id:"Restores",children:"Restores"}),"\n",(0,i.jsx)(s.h4,{id:"Automatic-resetrestore-between-tests",children:"Automatic reset/restore between tests"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"cy.spy()"})," creates spies in a\n",(0,i.jsx)(s.a,{href:"https://sinonjs.org/releases/v8/sandbox/",children:"sandbox"}),", so all spies created\nare automatically reset/restored between tests without you having to explicitly\nreset/restore them."]}),"\n",(0,i.jsx)(s.h3,{id:"Differences",children:"Differences"}),"\n",(0,i.jsx)(s.h4,{id:"Difference-between-cyspy-and-cystub",children:"Difference between cy.spy() and cy.stub()"}),"\n",(0,i.jsxs)(s.p,{children:["The main difference between ",(0,i.jsx)(s.code,{children:"cy.spy()"})," and ",(0,i.jsx)(s.a,{href:"/api/commands/stub",children:(0,i.jsx)(s.code,{children:"cy.stub()"})})," is\nthat ",(0,i.jsx)(s.code,{children:"cy.spy()"})," does not replace the method, it only wraps it. So, while\ninvocations are recorded, the original method is still called. This can be very\nuseful when testing methods on native browser objects. You can verify a method\nis being called by your test and still have the original method action invoked."]}),"\n",(0,i.jsx)(s.h3,{id:"Assertions",children:"Assertions"}),"\n",(0,i.jsx)(s.h4,{id:"Assertion-Support",children:"Assertion Support"}),"\n",(0,i.jsxs)(s.p,{children:["Cypress has also built-in\n",(0,i.jsx)(s.a,{href:"/app/references/bundled-libraries#Sinon-Chai",children:"Sinon-Chai"})," support, so any\n",(0,i.jsxs)(s.a,{href:"/app/references/assertions#Sinon-Chai",children:["assertions supported by ",(0,i.jsx)(s.code,{children:"Sinon-Chai"})]}),"\ncan be used without any configuration."]}),"\n",(0,i.jsx)(s.h2,{id:"Command-Log",children:"Command Log"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.em,{children:"Create a spy, alias it, and call it"})})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"const obj = {\n  foo() {},\n}\nconst spy = cy.spy(obj, 'foo').as('foo')\n\nobj.foo('foo', 'bar')\nexpect(spy).to.be.called\n"})}),"\n",(0,i.jsx)(s.p,{children:"The command above will display in the Command Log as:"}),"\n",(0,i.jsx)(n,{src:"/img/api/spy/spying-shows-any-aliases-and-also-any-assertions-made.png",alt:"Command Log spy"}),"\n",(0,i.jsxs)(s.p,{children:["When clicking on the ",(0,i.jsx)(s.code,{children:"spy-1"})," event within the command log, the console outputs\nthe following:"]}),"\n",(0,i.jsx)(n,{src:"/img/api/spy/console-shows-spy-arguments-calls-and-the-object-being-spied.png",alt:"Console Log spy"}),"\n",(0,i.jsx)(s.h2,{id:"History",children:"History"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Version"}),(0,i.jsx)(s.th,{children:"Changes"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"/app/references/changelog#0-20-0",children:"0.20.0"})}),(0,i.jsxs)(s.td,{children:["Added ",(0,i.jsx)(s.code,{children:".log(bool)"})," method"]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"/app/references/changelog#0-18-8",children:"0.18.8"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"cy.spy()"})," command added"]})]})]})]}),"\n",(0,i.jsx)(s.h2,{id:"See-also",children:"See also"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"/api/commands/as",children:(0,i.jsx)(s.code,{children:".as()"})})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"/api/commands/clock",children:(0,i.jsx)(s.code,{children:"cy.clock()"})})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"/app/guides/stubs-spies-and-clocks",children:"Guide: Stubs, Spies and Clocks"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"/app/references/recipes#Stubbing-and-spying",children:"Recipe: Stubbing, Spying"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"/api/commands/stub",children:(0,i.jsx)(s.code,{children:"cy.stub()"})})}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,o.a)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}function p(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,s,n)=>{n.d(s,{Z:()=>r,a:()=>a});var i=n(7294);const o={},t=i.createContext(o);function a(e){const s=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);