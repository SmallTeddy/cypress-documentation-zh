"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[9531],{6785:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});var i=s(5893),r=s(1151);const l={title:"Parallelization",sidebar_position:20},a=void 0,t={id:"cloud/features/smart-orchestration/parallelization",title:"Parallelization",description:"What you'll learn",source:"@site/docs/cloud/features/smart-orchestration/parallelization.mdx",sourceDirName:"cloud/features/smart-orchestration",slug:"/cloud/features/smart-orchestration/parallelization",permalink:"/cloud/features/smart-orchestration/parallelization",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/cloud/features/smart-orchestration/parallelization.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",sidebarPosition:20,frontMatter:{title:"Parallelization",sidebar_position:20},sidebar:"cloud",previous:{title:"Overview",permalink:"/cloud/features/smart-orchestration/overview"},next:{title:"Load Balancing",permalink:"/cloud/features/smart-orchestration/load-balancing"}},o={},c=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"Splitting up your test suite",id:"Splitting-up-your-test-suite",level:2},{value:"Turning on parallelization",id:"Turning-on-parallelization",level:2},{value:"CI parallelization interactions",id:"CI-parallelization-interactions",level:2},{value:"Parallelization process",id:"Parallelization-process",level:3},{value:"Example",id:"Example",level:2},{value:"Without parallelization",id:"Without-parallelization",level:3},{value:"With parallelization",id:"With-parallelization",level:3},{value:"Grouping test runs",id:"Grouping-test-runs",level:2},{value:"Grouping by browser",id:"Grouping-by-browser",level:3},{value:"Grouping to label parallelization",id:"Grouping-to-label-parallelization",level:3},{value:"Grouping by spec context",id:"Grouping-by-spec-context",level:3},{value:"Linking CI machines for parallelization or grouping",id:"Linking-CI-machines-for-parallelization-or-grouping",level:2},{value:"CI Build ID environment variables by provider",id:"CI-Build-ID-environment-variables-by-provider",level:3},{value:"Run completion delay",id:"Run-completion-delay",level:2},{value:"Visualizing parallelization and groups in Cypress Cloud",id:"Visualizing-parallelization-and-groups-in-Cypress-Cloud",level:2},{value:"Timeline View",id:"Timeline-View",level:3},{value:"Bar Chart View",id:"Bar-Chart-View",level:3},{value:"Machines View",id:"Machines-View",level:3},{value:"Next Steps",id:"Next-Steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components},{DocsImage:s,Icon:l}=n;return s||p("DocsImage",!0),l||p("Icon",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.h5,{id:"What-youll-learn",children:[(0,i.jsx)(l,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"How Cypress balances spec files across multiple machines"}),"\n",(0,i.jsx)(n.li,{children:"How to run tests in parallel across multiple machines"}),"\n",(0,i.jsx)(n.li,{children:"How to group test runs and why you might want to"}),"\n",(0,i.jsx)(n.li,{children:"How to visualize parallelization and groups in Cypress Cloud"}),"\n"]})]}),"\n",(0,i.jsx)(n.p,{children:"If your project has a large number of tests, it can take a long time for tests\nto complete running serially on one machine. Running tests in parallel across\nmany virtual machines can save your team time and money when running tests in\nContinuous Integration (CI)."}),"\n",(0,i.jsx)(n.p,{children:"Cypress can run recorded tests in parallel across multiple machines. While\nparallel tests can also technically run on a single machine, we do not recommend\nit since this machine would require significant resources to run your tests\nefficiently."}),"\n",(0,i.jsxs)(n.p,{children:["This guide assumes you already have your project running and\n",(0,i.jsx)(n.a,{href:"/cloud/get-started/setup#Setup",children:"recording"})," within Continuous Integration.\nIf you have not set up your project yet, check out our\n",(0,i.jsx)(n.a,{href:"/app/continuous-integration/overview",children:"Continuous Integration guide"}),". If\nyou are running or planning to run tests across multiple browsers (Firefox,\nChrome, or Edge), we also recommend checking out our\n",(0,i.jsx)(n.a,{href:"/app/guides/cross-browser-testing",children:"Cross Browser Testing guide"})," for helpful\nCI strategies when using parallelization."]}),"\n",(0,i.jsx)(s,{src:"/img/app/parallelization/parallelization-diagram.png",alt:"Parallelization Diagram"}),"\n",(0,i.jsx)(n.h2,{id:"Splitting-up-your-test-suite",children:"Splitting up your test suite"}),"\n",(0,i.jsx)(n.p,{children:"Cypress' parallelization strategy is file-based, so in order to utilize\nparallelization, your tests will need to be split across separate files."}),"\n",(0,i.jsxs)(n.p,{children:["Cypress will assign each spec file to an available machine based on our\n",(0,i.jsx)(n.a,{href:"/cloud/features/smart-orchestration/load-balancing#Balance-strategy",children:"balance strategy"}),".\nDue to this balance strategy, the run order of the spec files is not guaranteed\nwhen parallelized."]}),"\n",(0,i.jsx)(n.h2,{id:"Turning-on-parallelization",children:"Turning on parallelization"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Refer to your CI provider's documentation on how to set up multiple machines\nto run in your CI environment."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Once multiple machines are available within your CI environment, you can pass\nthe ",(0,i.jsx)(n.a,{href:"/app/references/command-line#cypress-run-parallel",children:"--parallel"})," key to\n",(0,i.jsx)(n.a,{href:"/app/references/command-line#cypress-run",children:"cypress run"})," to have your recorded\ntests parallelized."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cypress run --record --key=abc123 --parallel\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Running tests in parallel requires the\n",(0,i.jsxs)(n.a,{href:"/app/references/command-line#cypress-run",children:[(0,i.jsx)(n.code,{children:"--record"})," flag"]})," be passed. This\nensures Cypress can properly collect the data needed to parallelize future runs.\nThis also gives you the full benefit of seeing the results of your parallelized\ntests in ",(0,i.jsx)(n.a,{href:"/cloud/get-started/introduction",children:"Cypress Cloud"}),". If you have not set up\nyour project to record, check out our\n",(0,i.jsx)(n.a,{href:"/cloud/get-started/setup#Setup",children:"setup guide"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"CI-parallelization-interactions",children:"CI parallelization interactions"}),"\n",(0,i.jsxs)(n.p,{children:["During parallelization mode, ",(0,i.jsx)(n.a,{href:"/cloud/get-started/introduction",children:"Cypress Cloud"}),"\ninteracts with your CI machines to orchestrate the parallelization of a test run\nvia ",(0,i.jsx)(n.a,{href:"/cloud/features/smart-orchestration/load-balancing",children:"load-balancing"})," of specs\nacross available CI machines by the following process:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["CI machines contact ",(0,i.jsx)(n.a,{href:"/cloud/get-started/introduction",children:"Cypress Cloud"})," to indicate\nwhich spec files to run in the project."]}),"\n",(0,i.jsx)(n.li,{children:"A machine opts in to receiving a spec file to run by contacting Cypress."}),"\n",(0,i.jsx)(n.li,{children:"Upon receiving requests from a CI machine, Cypress calculates the estimated\nduration to test each spec file."}),"\n",(0,i.jsxs)(n.li,{children:["Based on these estimations, Cypress distributes\n(",(0,i.jsx)(n.a,{href:"/cloud/features/smart-orchestration/load-balancing",children:"load-balances"}),") spec\nfiles one-by-one to each available machine in a way that minimizes overall\ntest run time."]}),"\n",(0,i.jsx)(n.li,{children:"As each CI machine finishes running its assigned spec file, more spec files\nare distributed to it. This process repeats until all spec files are\ncomplete."}),"\n",(0,i.jsxs)(n.li,{children:["Upon completion of all spec files, Cypress\n",(0,i.jsx)(n.a,{href:"#Run-completion-delay",children:"waits for a configurable amount of time"})," before\nconsidering the test run as fully complete. This is done to better support\n",(0,i.jsx)(n.a,{href:"#Grouping-test-runs",children:"grouping of runs"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In short: each Cypress instance sends a list of the spec files to Cypress Cloud,\nwhich sends back one spec at a time to each application to run."}),"\n",(0,i.jsx)(n.h3,{id:"Parallelization-process",children:"Parallelization process"}),"\n",(0,i.jsx)(s,{src:"/img/app/parallelization/parallelization-overview.png",alt:"Parallelization Overview"}),"\n",(0,i.jsx)(n.h2,{id:"Example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["The examples below are from a run of our\n",(0,i.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-example-kitchensink",children:"Kitchen Sink Example"}),"\nproject. You can see the results of this run on\n",(0,i.jsx)(n.a,{href:"https://cloud.cypress.io/projects/4b7344/runs/2929/specs",children:"Cypress Cloud"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"Without-parallelization",children:"Without parallelization"}),"\n",(0,i.jsxs)(n.p,{children:["In this example, a single machine runs a job named ",(0,i.jsx)(n.code,{children:"1x-electron"}),", defined in the\nproject's\n",(0,i.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-example-kitchensink/blob/aabb10cc1bb9dee88e1bf28e0af5e9661427ee7a/circle.yml#L41",children:"circle.yml"}),"\nfile. Cypress runs all 19 spec files one by one alphabetically in this job. It\ntakes ",(0,i.jsx)(n.strong,{children:"1:51"})," to complete all of the tests."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"1x-electron, Machine #1\n--------------------------\n-- actions.cy.js (14s)\n-- aliasing.cy.js (1s)\n-- assertions.cy.js (1s)\n-- connectors.cy.js (2s)\n-- cookies.cy.js (2s)\n-- cypress_api.cy.js (3s)\n-- files.cy.js (2s)\n-- local_storage.cy.js (1s)\n-- location.cy.js (1s)\n-- misc.cy.js (4s)\n-- navigation.cy.js (3s)\n-- network_requests.cy.js (3s)\n-- querying.cy.js (1s)\n-- spies_stubs_clocks.cy.js (1s)\n-- traversal.cy.js (4s)\n-- utilities.cy.js (3s)\n-- viewport.cy.js (3s)\n-- waiting.cy.js (5s)\n-- window.cy.js (1s)\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Notice that when adding up the spec's run times (",(0,i.jsx)(n.strong,{children:"0:55"}),"), they add up to less\nthan the total time for the run to complete (",(0,i.jsx)(n.strong,{children:"1:51"}),") . There is extra time in\nthe run for each spec: starting the browser, encoding and uploading the video to\nthe dashboard, requesting the next spec to run."]})}),"\n",(0,i.jsx)(n.h3,{id:"With-parallelization",children:"With parallelization"}),"\n",(0,i.jsxs)(n.p,{children:["When we run the same tests with parallelization, Cypress uses its\n",(0,i.jsx)(n.a,{href:"/cloud/features/smart-orchestration/load-balancing#Balance-strategy",children:"load balance strategy"}),"\nto order to specs to run based on the spec's previous run history. During the\nsame CI run as above, we ran ",(0,i.jsx)(n.em,{children:"all"})," tests again, but this time with\nparallelization across 2 machines. This job was named ",(0,i.jsx)(n.code,{children:"2x-electron"})," in the\nproject's\n",(0,i.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-example-kitchensink/blob/aabb10cc1bb9dee88e1bf28e0af5e9661427ee7a/circle.yml#L53",children:"circle.yml"}),"\nfile and it finished in ",(0,i.jsx)(n.strong,{children:"59 seconds"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"2x-electron, Machine #1, 9 specs          2x-electron, Machine #2, 10 specs\n--------------------------------          -----------------------------------\n-- actions.cy.js (14s)                    -- waiting.cy.js (6s)\n-- traversal.cy.js (4s)                   -- navigation.cy.js (3s)\n-- misc.cy.js (4s)                        -- utilities.cy.js (3s)\n-- cypress_api.cy.js (4s)                 -- viewport.cy.js (4s)\n-- cookies.cy.js (3s)                     -- network_requests.cy.js (3s)\n-- files.cy.js (3s)                       -- connectors.cy.js (2s)\n-- location.cy.js (2s)                    -- assertions.cy.js (1s)\n-- querying.cy.js (2s)                    -- aliasing.cy.js (1s)\n-- location.cy.js (1s)                    -- spies_stubs_clocks.cy.js (1s)\n                                          -- window.cy.js (1s)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The difference in running times and machines used is very clear when looking at\nthe ",(0,i.jsx)(n.a,{href:"#Machines-View",children:"Machines View"})," on Cypress Cloud. Notice how the run\nparallelized across 2 machines automatically ran all specs based on their\nduration, while the run without parallelization did not."]}),"\n",(0,i.jsx)(s,{src:"/img/app/parallelization/1-vs-2-machines.png",alt:"Without parallelization vs parallelizing across 2 machines"}),"\n",(0,i.jsx)(n.p,{children:"Parallelizing our tests across 2 machines saved us almost 50% of the total run\ntime, and we can further decrease the build time by adding more machines."}),"\n",(0,i.jsx)(n.h2,{id:"Grouping-test-runs",children:"Grouping test runs"}),"\n",(0,i.jsxs)(n.p,{children:["Multiple ",(0,i.jsx)(n.a,{href:"/app/references/command-line#cypress-run",children:"cypress run"})," calls can be\nlabeled and associated to a ",(0,i.jsx)(n.strong,{children:"single"})," run by passing in the\n",(0,i.jsxs)(n.a,{href:"/app/references/command-line#cypress-run-group-lt-name-gt",children:[(0,i.jsx)(n.code,{children:"--group <name>"})," flag"]}),",\nwhere ",(0,i.jsx)(n.code,{children:"name"})," is an arbitrary reference label. The group name must be unique\nwithin the associated test run."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["For multiple runs to be grouped into a single run, it is required for CI\nmachines to share a common CI build ID environment variable. Typically these CI\nmachines will run in parallel or within the same build workflow or pipeline, but\n",(0,i.jsx)(n.strong,{children:"it is not required to use Cypress parallelization to group runs"}),". Grouping of\nruns can be utilized independently of Cypress parallelization."]})}),"\n",(0,i.jsx)(s,{src:"/img/app/parallelization/machines-view-grouping-expanded.png",alt:"Machines view grouping expanded"}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)("strong",{children:"Cross Browser Testing"}),(0,i.jsxs)(n.p,{children:["Grouping test runs with or without parallelization is a useful mechanism when\nimplementing a CI strategy for cross browser testing. Check out the\n",(0,i.jsx)(n.a,{href:"/app/guides/cross-browser-testing",children:"Cross Browser Testing guide"})," to learn\nmore."]})]}),"\n",(0,i.jsx)(n.h3,{id:"Grouping-by-browser",children:"Grouping by browser"}),"\n",(0,i.jsx)(n.p,{children:"You can test your application against different browsers and view the results\nunder a single run within Cypress Cloud. Below, we name our groups the same name\nas the browser being tested:"}),"\n",(0,i.jsxs)(n.p,{children:["The first group can be called ",(0,i.jsx)(n.code,{children:"Windows/Chrome 69"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cypress run --record --group Windows/Chrome-69 --browser chrome\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The second group can be called ",(0,i.jsx)(n.code,{children:"Mac/Chrome 70"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cypress run --record --group Mac/Chrome-70 --browser chrome\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The third group can be called ",(0,i.jsx)(n.code,{children:"Linux/Electron"}),". ",(0,i.jsx)(n.em,{children:"Electron is the default\nbrowser used in Cypress runs"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cypress run --record --group Linux/Electron\n"})}),"\n",(0,i.jsx)(s,{src:"/img/app/parallelization/browser.png",alt:"browser"}),"\n",(0,i.jsx)(n.h3,{id:"Grouping-to-label-parallelization",children:"Grouping to label parallelization"}),"\n",(0,i.jsx)(n.p,{children:"We also have the power of Cypress parallelization with our groups. For the sake\nof demonstration, let's run a group to test against Chrome with 2 machines, a\ngroup to test against Electron with 4 machines, and another group to test\nagainst Electron again, but only with one machine:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cypress run --record --group 1x-electron\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cypress run --record --group 2x-chrome --browser chrome --parallel\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cypress run --record --group 4x-electron --parallel\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"1x"}),", ",(0,i.jsx)(n.code,{children:"2x"}),", ",(0,i.jsx)(n.code,{children:"4x"})," group prefix used here is an adopted convention to indicate\nthe level of parallelism for each run, and ",(0,i.jsx)(n.em,{children:"is not required or essential"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["The number of machines dedicated for each ",(0,i.jsx)(n.code,{children:"cypress run"})," call is based on your CI\nconfiguration for the project."]})}),"\n",(0,i.jsx)(n.p,{children:"Labeling these groups in this manner helps up later when we review our test runs\nin Cypress Cloud, as shown below:"}),"\n",(0,i.jsx)(s,{src:"/img/app/parallelization/timeline-collapsed.png",alt:"Timeline view with grouping and parallelization"}),"\n",(0,i.jsx)(n.h3,{id:"Grouping-by-spec-context",children:"Grouping by spec context"}),"\n",(0,i.jsxs)(n.p,{children:["Let's say you have an application that has a ",(0,i.jsx)(n.em,{children:"customer facing portal"}),", ",(0,i.jsx)(n.em,{children:"guest\nfacing portal"})," and an ",(0,i.jsx)(n.em,{children:"administration facing portal"}),". You could organize and\ntest these three parts of your application within the same run:"]}),"\n",(0,i.jsxs)(n.p,{children:["One group can be called ",(0,i.jsx)(n.code,{children:"package/admin"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cypress run --record --group package/admin --spec 'cypress/e2e/packages/admin/**/*'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Another can be called ",(0,i.jsx)(n.code,{children:"package/customer"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cypress run --record --group package/customer --spec 'cypress/e2e/packages/customer/**/*'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The last group can be called ",(0,i.jsx)(n.code,{children:"package/guest"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cypress run --record --group package/guest --spec 'cypress/e2e/packages/guest/**/*'\n"})}),"\n",(0,i.jsx)(s,{src:"/img/app/parallelization/monorepo.png",alt:"monorepo"}),"\n",(0,i.jsx)(n.p,{children:"This pattern is especially useful for projects in a monorepo. Each segment of\nthe monorepo can be assigned its own group, and larger segments can be\nparallelized to speed up their testing."}),"\n",(0,i.jsx)(n.h2,{id:"Linking-CI-machines-for-parallelization-or-grouping",children:"Linking CI machines for parallelization or grouping"}),"\n",(0,i.jsxs)(n.p,{children:["A CI build ID is used to associate multiple CI machines to one test run. This\nidentifier is based on environment variables that are unique to each CI build,\nand vary based on CI provider. Cypress has out-of-the-box support for most of\nthe commonly-used CI providers, so you would typically not need to directly set\nthe CI build ID via the\n",(0,i.jsxs)(n.a,{href:"/app/references/command-line#cypress-run-ci-build-id-lt-id-gt",children:[(0,i.jsx)(n.code,{children:"--ci-build-id"})," flag"]}),"."]}),"\n",(0,i.jsx)(s,{src:"/img/app/parallelization/ci-build-id.png",alt:"CI Machines linked by ci-build-id"}),"\n",(0,i.jsx)(n.h3,{id:"CI-Build-ID-environment-variables-by-provider",children:"CI Build ID environment variables by provider"}),"\n",(0,i.jsx)(n.p,{children:"Cypress currently uses the following CI environment variables to determine a CI\nbuild ID for a test run:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Provider"}),(0,i.jsx)(n.th,{children:"Environment Variable"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"AppVeyor"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"APPVEYOR_BUILD_NUMBER"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"AWS CodeBuild"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"CODEBUILD_INITIATOR"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Azure Pipelines"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"BUILD_BUILDNUMBER"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bamboo"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"bamboo_buildNumber"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bitbucket"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"BITBUCKET_BUILD_NUMBER"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Buildkite"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"BUILDKITE_BUILD_ID"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Circle"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"CIRCLE_WORKFLOW_ID"}),", ",(0,i.jsx)(n.code,{children:"CIRCLE_BUILD_NUM"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Codeship"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"CI_BUILD_NUMBER"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Codeship Basic"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"CI_BUILD_NUMBER"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Codeship Pro"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"CI_BUILD_ID"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Drone"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"DRONE_BUILD_NUMBER"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GitLab"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"CI_PIPELINE_ID"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Jenkins"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"BUILD_NUMBER"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Semaphore"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"SEMAPHORE_EXECUTABLE_UUID"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Travis"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TRAVIS_BUILD_ID"})})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["You can pass a different value to link agents to the same run. For example, if\nyou are using Jenkins and think the environment variable ",(0,i.jsx)(n.code,{children:"BUILD_TAG"})," is more\nunique than the environment variable ",(0,i.jsx)(n.code,{children:"BUILD_NUMBER"}),", pass the ",(0,i.jsx)(n.code,{children:"BUILD_TAG"})," value\nvia CLI\n",(0,i.jsxs)(n.a,{href:"/app/references/command-line#cypress-run-ci-build-id-lt-id-gt",children:[(0,i.jsx)(n.code,{children:"--ci-build-id"})," flag"]}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cypress run --record --parallel --ci-build-id $BUILD_TAG\n"})}),"\n",(0,i.jsx)(n.h2,{id:"Run-completion-delay",children:"Run completion delay"}),"\n",(0,i.jsx)(n.p,{children:"During parallelization mode or when grouping runs, Cypress will wait for a\nspecified amount of time before completing the test run in case any more\nrelevant work remains. This is to compensate for various scenarios where CI\nmachines could be backed-up in a queue."}),"\n",(0,i.jsxs)(n.p,{children:["This waiting period is called the ",(0,i.jsx)(n.strong,{children:"run completion delay"})," and it begins after\nthe last known CI machine has completed as shown in the diagram below:"]}),"\n",(0,i.jsx)(s,{src:"/img/app/parallelization/run-completion-delay.png",alt:"Test run completion delay"}),"\n",(0,i.jsxs)(n.p,{children:["This ",(0,i.jsx)(n.strong,{children:"delay is 60 seconds by default"}),", but is\n",(0,i.jsx)(n.a,{href:"/cloud/account-management/projects#Run-completion-delay",children:"configurable within Cypress Cloud project settings page"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"Visualizing-parallelization-and-groups-in-Cypress-Cloud",children:"Visualizing parallelization and groups in Cypress Cloud"}),"\n",(0,i.jsxs)(n.p,{children:["You can see the result of each spec file that ran within\n",(0,i.jsx)(n.a,{href:"/cloud/get-started/introduction",children:"Cypress Cloud"})," in the run's ",(0,i.jsx)(n.strong,{children:"Specs"})," tab. Specs\nare visualized within a ",(0,i.jsx)(n.strong,{children:"Timeline"}),", ",(0,i.jsx)(n.strong,{children:"Bar Chart"}),", and ",(0,i.jsx)(n.strong,{children:"Machines"})," view."]}),"\n",(0,i.jsx)(n.h3,{id:"Timeline-View",children:"Timeline View"}),"\n",(0,i.jsx)(n.p,{children:"The Timeline View charts your spec files as they ran relative to each other.\nThis is especially helpful when you want to visualize how your tests ran\nchronologically across all available machines."}),"\n",(0,i.jsx)(s,{src:"/img/app/parallelization/timeline-view-small.png",alt:"Timeline view with parallelization"}),"\n",(0,i.jsx)(n.h3,{id:"Bar-Chart-View",children:"Bar Chart View"}),"\n",(0,i.jsxs)(n.p,{children:["The Bar Chart View visualizes the ",(0,i.jsx)(n.strong,{children:"duration"})," of your spec files relative to\neach other."]}),"\n",(0,i.jsx)(s,{src:"/img/app/parallelization/bar-chart-view.png",alt:"Bar Chart view with parallelization"}),"\n",(0,i.jsx)(n.h3,{id:"Machines-View",children:"Machines View"}),"\n",(0,i.jsx)(n.p,{children:"The Machines View charts spec files by the machines that executed them. This\nview enables you to evaluate the contribution of each machine to the overall\ntest run."}),"\n",(0,i.jsx)(s,{src:"/img/app/parallelization/machines-view.png",alt:"Machines view with parallelization"}),"\n",(0,i.jsx)(n.h2,{id:"Next-Steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-realworld-app",children:"Cypress Real World App"}),"\nruns parallelized CI jobs across multiple operating systems, browsers, and\nviewport sizes."]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/app/continuous-integration/overview",children:"Continuous Integration Guide"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/app/guides/cross-browser-testing",children:"Cross Browser Testing Guide"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.cypress.io/blog/2018/09/05/run-end-to-end-tests-on-ci-faster/",children:"Blog: Run Your End-to-end Tests 10 Times Faster with Automatic Test Parallelization"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-example-kitchensink#ci-status",children:"CI Configurations in Kitchen Sink Example"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,s)=>{s.d(n,{Z:()=>t,a:()=>a});var i=s(7294);const r={},l=i.createContext(r);function a(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);