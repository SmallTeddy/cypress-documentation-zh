"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[4487],{5891:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var t=s(5893),o=s(1151);const i={title:"Debugging"},r=void 0,a={id:"app/guides/debugging",title:"Debugging",description:"What you'll learn",source:"@site/docs/app/guides/debugging.mdx",sourceDirName:"app/guides",slug:"/app/guides/debugging",permalink:"/app/guides/debugging",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/guides/debugging.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",frontMatter:{title:"Debugging"},sidebar:"app",previous:{title:"Cypress Studio",permalink:"/app/guides/cypress-studio"},next:{title:"Migrating from Protractor",permalink:"/app/guides/migration/protractor-to-cypress"}},l={},c=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"Using debugger",id:"Using-debugger",level:2},{value:"Debug just like you always do",id:"Debug-just-like-you-always-do",level:3},{value:"Using <code>.debug()</code>",id:"Using-debug",level:3},{value:"Step through test commands",id:"Step-through-test-commands",level:2},{value:"Using the Developer Tools",id:"Using-the-Developer-Tools",level:2},{value:"<Icon></Icon> See it in action!",id:"See-it-in-action",level:3},{value:"Get console logs for commands",id:"Get-console-logs-for-commands",level:3},{value:"When clicking on <code>.type()</code> command, the Developer Tools console outputs the following:",id:"When-clicking-on-type-command-the-Developer-Tools-console-outputs-the-following",level:4},{value:"Errors",id:"Errors",level:2},{value:"Anatomy of an error",id:"Anatomy-of-an-error",level:3},{value:"Source maps",id:"Source-maps",level:3},{value:"Debugging flake",id:"Debugging-flake",level:2},{value:"Log Cypress events",id:"Log-Cypress-events",level:2},{value:"Troubleshooting Cypress",id:"Troubleshooting-Cypress",level:2},{value:"More info",id:"More-info",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components},{AnatomyOfAnError:s,DocsImage:i,E2EOrCtTabs:r,Icon:a}=n;return s||u("AnatomyOfAnError",!0),i||u("DocsImage",!0),r||u("E2EOrCtTabs",!0),a||u("Icon",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.h5,{id:"What-youll-learn",children:[(0,t.jsx)(a,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["How to use ",(0,t.jsx)(n.code,{children:"debugger"})," and ",(0,t.jsx)(n.code,{children:".debug()"})," within Cypress tests"]}),"\n",(0,t.jsxs)(n.li,{children:["How to step through test commands with ",(0,t.jsx)(n.code,{children:".pause()"})]}),"\n",(0,t.jsx)(n.li,{children:"How to use the Developer Tools to get console logs for command information"}),"\n",(0,t.jsx)(n.li,{children:"How errors are displayed and structured within Cypress"}),"\n",(0,t.jsx)(n.li,{children:"How to debug flaky tests"}),"\n"]})]}),"\n",(0,t.jsx)(n.h2,{id:"Using-debugger",children:"Using debugger"}),"\n",(0,t.jsxs)(n.p,{children:["Your Cypress test code runs in the same run loop as your application. This means\nyou have access to the code running on the page, as well as the things the\nbrowser makes available to you, like ",(0,t.jsx)(n.code,{children:"document"}),", ",(0,t.jsx)(n.code,{children:"window"}),", and ",(0,t.jsx)(n.code,{children:"debugger"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"Debug-just-like-you-always-do",children:"Debug just like you always do"}),"\n",(0,t.jsxs)(n.p,{children:["Based on those statements, you might be tempted to throw a ",(0,t.jsx)(n.code,{children:"debugger"})," into your\ntest, like so:"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('let me debug like a fiend', () => {\n  cy.visit('/my/page/path')\n\n  cy.get('[data-testid=\"selector-in-question\"]')\n\n  debugger // Doesn't work\n})\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('let me debug like a fiend', () => {\n  cy.mount(<MyComponent />)\n\n  cy.get('[data-testid=\"selector-in-question\"]')\n\n  debugger // Doesn't work\n})\n"})})]}),"\n",(0,t.jsxs)(n.p,{children:["This may not work exactly as you are expecting. As you may remember from the\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/introduction-to-cypress",children:"Introduction to Cypress"}),", ",(0,t.jsx)(n.code,{children:"cy"}),"\ncommands enqueue an action to be taken later. Can you see what the test above\nwill do given that perspective?"]}),"\n",(0,t.jsxs)(n.p,{children:["Both ",(0,t.jsx)(n.a,{href:"/api/commands/visit",children:(0,t.jsx)(n.code,{children:"cy.visit()"})})," and ",(0,t.jsx)(n.a,{href:"/api/commands/get",children:(0,t.jsx)(n.code,{children:"cy.get()"})}),"\nwill return immediately, having enqueued their work to be done later, and\n",(0,t.jsx)(n.code,{children:"debugger"})," will be executed before any of the commands have actually run. The\nsame behavior is expected in Component Tests when using\n",(0,t.jsx)(n.a,{href:"/api/commands/mount",children:(0,t.jsx)(n.code,{children:"cy.mount()"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's use ",(0,t.jsx)(n.a,{href:"/api/commands/then",children:(0,t.jsx)(n.code,{children:".then()"})})," to tap into the Cypress command during\nexecution and add a ",(0,t.jsx)(n.code,{children:"debugger"})," at the appropriate time:"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('let me debug when the after the command executes', () => {\n  cy.visit('/my/page/path')\n\n  cy.get('[data-testid=\"selector-in-question\"]').then(($selectedElement) => {\n    // Debugger is hit after the cy.visit\n    // and cy.get commands have completed\n    debugger\n  })\n})\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('let me debug when the after the command executes', () => {\n  cy.mount(<MyComponent />)\n\n  cy.get('[data-testid=\"selector-in-question\"]').then(($selectedElement) => {\n    // Debugger is hit after the cy.visit\n    // and cy.get commands have completed\n    debugger\n  })\n})\n"})})]}),"\n",(0,t.jsxs)(n.p,{children:["Now we're in business! When you're visiting a page or mounting a component for\nthe first time, (shown above with the ",(0,t.jsx)(n.a,{href:"/api/commands/get",children:(0,t.jsx)(n.code,{children:"cy.get()"})}),"chain and\nits ",(0,t.jsx)(n.a,{href:"/api/commands/then",children:(0,t.jsx)(n.code,{children:".then()"})})," attached) the commands are enqueued for\nCypress to execute. The ",(0,t.jsx)(n.code,{children:"it"})," block exits, and Cypress starts its work:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"In an end-to-end test, the page is visited and Cypress waits for it to load.\nAlternatively, the component is mounted and rendered in a Component Test."}),"\n",(0,t.jsx)(n.li,{children:"The element is queried, and Cypress automatically waits and retries for a few\nmoments if it isn't found immediately."}),"\n",(0,t.jsxs)(n.li,{children:["The function passed to ",(0,t.jsx)(n.a,{href:"/api/commands/then",children:(0,t.jsx)(n.code,{children:".then()"})})," is executed, with the\nfound element yielded to it."]}),"\n",(0,t.jsxs)(n.li,{children:["Within the context of the ",(0,t.jsx)(n.a,{href:"/api/commands/then",children:(0,t.jsx)(n.code,{children:".then()"})})," function, the\n",(0,t.jsx)(n.code,{children:"debugger"})," is called, halting the browser and calling focus to the Developer\nTools."]}),"\n",(0,t.jsxs)(n.li,{children:["You're in! Inspect the state of your application like you normally would if\nyou'd dropped the ",(0,t.jsx)(n.code,{children:"debugger"})," into your application code."]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"Using-debug",children:["Using ",(0,t.jsx)(n.a,{href:"/api/commands/debug",children:(0,t.jsx)(n.code,{children:".debug()"})})]}),"\n",(0,t.jsxs)(n.p,{children:["Cypress also exposes a shortcut for debugging commands,\n",(0,t.jsx)(n.a,{href:"/api/commands/debug",children:(0,t.jsx)(n.code,{children:".debug()"})}),". Let's rewrite the test above using this\nhelper method:"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('let me debug like a fiend', () => {\n  cy.visit('/my/page/path')\n\n  cy.get('[data-testid=\"selector-in-question\"]').debug()\n})\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('let me debug like a fiend', () => {\n  cy.mount(<MyComponent />)\n\n  cy.get('[data-testid=\"selector-in-question\"]').debug()\n})\n"})})]}),"\n",(0,t.jsxs)(n.p,{children:["The current subject that is yielded by the ",(0,t.jsx)(n.a,{href:"/api/commands/get",children:(0,t.jsx)(n.code,{children:"cy.get()"})})," is\nexposed as the variable ",(0,t.jsx)(n.code,{children:"subject"})," within your Developer Tools so that you can\ninteract with it in the console."]}),"\n",(0,t.jsx)(i,{src:"/img/app/debugging/debugging-subject.png",alt:"Debugging Subject"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.a,{href:"/api/commands/debug",children:(0,t.jsx)(n.code,{children:".debug()"})})," to quickly inspect any (or many!) part(s)\nof your application during the test. You can attach it to any Cypress chain of\ncommands to have a look at the system's state at that moment."]}),"\n",(0,t.jsx)(n.h2,{id:"Step-through-test-commands",children:"Step through test commands"}),"\n",(0,t.jsxs)(n.p,{children:["You can run the test command by command using the\n",(0,t.jsx)(n.a,{href:"/api/commands/pause",children:(0,t.jsx)(n.code,{children:".pause()"})})," command."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"it('adds items', () => {\n  cy.pause()\n  cy.get('[data-testid=\"new-todo\"]')\n  // more commands\n})\n"})}),"\n",(0,t.jsx)(n.p,{children:"This allows you to inspect the web application, the DOM, the network, and any\nstorage after each command to make sure everything happens as expected."}),"\n",(0,t.jsx)(n.h2,{id:"Using-the-Developer-Tools",children:"Using the Developer Tools"}),"\n",(0,t.jsxs)(n.p,{children:["Though Cypress has built out\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/open-mode",children:"an excellent application"})," to help you\nunderstand what is happening in your application and your tests, there's no\nreplacing all the amazing work browser teams have done on their built-in\ndevelopment tools. Once again, we see that Cypress goes ",(0,t.jsx)(n.em,{children:"with"})," the flow of the\nmodern ecosystem, opting to leverage these tools wherever possible."]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.h3,{id:"See-it-in-action",children:[(0,t.jsx)(a,{name:"video"})," See it in action!"]}),(0,t.jsxs)(n.p,{children:["You can see a walk-through of debugging some application code from Cypress\n",(0,t.jsx)(n.a,{href:"https://vimeo.com/242961930#t=264s",children:"in this segment from our React tutorial series"}),"."]})]}),"\n",(0,t.jsx)(n.h3,{id:"Get-console-logs-for-commands",children:"Get console logs for commands"}),"\n",(0,t.jsxs)(n.p,{children:["All of Cypress's commands, when clicked on within the\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/open-mode#Command-Log",children:"Command Log"}),", print extra\ninformation about the command, its subject, and its yielded result. Try clicking\naround the Command Log with your Developer Tools open! You may find some useful\ninformation here."]}),"\n",(0,t.jsxs)(n.h4,{id:"When-clicking-on-type-command-the-Developer-Tools-console-outputs-the-following",children:["When clicking on ",(0,t.jsx)(n.code,{children:".type()"})," command, the Developer Tools console outputs the following:"]}),"\n",(0,t.jsx)(i,{src:"/img/api/type/console-log-of-typing-with-entire-key-events-table-for-each-character.png",alt:"Console Log type"}),"\n",(0,t.jsx)(n.h2,{id:"Errors",children:"Errors"}),"\n",(0,t.jsx)(n.p,{children:"Sometimes tests fail. Sometimes we want them to fail, just so we know they're\ntesting the right thing when they pass. But other times, tests fail\nunintentionally and we need to figure out why. Cypress provides some tools to\nhelp make that process as easy as possible."}),"\n",(0,t.jsx)(n.h3,{id:"Anatomy-of-an-error",children:"Anatomy of an error"}),"\n",(0,t.jsx)(n.p,{children:"Let's take a look at the anatomy of an error and how it is displayed in Cypress,\nby way of a failing test."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('reroutes on users page', () => {\n  cy.contains('Users').click()\n  cy.url().should('include', 'users')\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The center of the ",(0,t.jsx)(n.code,{children:"<li>Users</li>"})," element is hidden from view in our\napplication under test, so the test above will fail."]}),"\n",(0,t.jsx)(s,{}),"\n",(0,t.jsx)(n.h3,{id:"Source-maps",children:"Source maps"}),"\n",(0,t.jsx)(n.p,{children:"Cypress utilizes source maps to enhance the error experience. Stack traces are\ntranslated so that your source files are shown instead of the generated file\nthat is loaded by the browser. This also enables displaying code frames. Without\ninline source maps, you will not see code frames."}),"\n",(0,t.jsxs)(n.p,{children:["By default, Cypress will include an inline source map in your spec file, so you\nwill get the most out of the error experience. If you\n",(0,t.jsx)(n.a,{href:"/api/node-events/preprocessors-api",children:"modify the preprocessor"}),", ensure that inline\nsource maps are enabled to get the same experience. With webpack and the\n",(0,t.jsx)(n.a,{href:"https://github.com/cypress-io/cypress/tree/develop/npm/webpack-preprocessor",children:"webpack preprocessor"}),",\nfor example, set\n",(0,t.jsxs)(n.a,{href:"https://webpack.js.org/configuration/devtool/",children:["the ",(0,t.jsx)(n.code,{children:"devtool"})," option"]})," to\n",(0,t.jsx)(n.code,{children:"inline-source-map"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"Debugging-flake",children:"Debugging flake"}),"\n",(0,t.jsxs)(n.p,{children:["While Cypress is\n",(0,t.jsx)(n.a,{href:"/app/get-started/why-cypress#%E6%8A%97%E6%B3%A2%E5%8A%A8",children:"flake-resistant"}),", some users\ndo experience flake, particularly when running in CI versus locally."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["To debug flake in your recorded tests in CI, try out ",(0,t.jsx)(n.a,{href:"/cloud/features/test-replay",children:"Test Replay"})," in Cypress Cloud.\nIt allows you to replay the test exactly as it ran in CI."]})}),"\n",(0,t.jsx)(n.p,{children:"Most often\nin cases of flaky tests, we see that there are not enough assertions surrounding\ntest actions or network requests before moving on to the next assertion."}),"\n",(0,t.jsx)(n.p,{children:"If there is any variation in the speed of the network requests or responses when\nrun locally versus in CI, then there can be failures in one over the other."}),"\n",(0,t.jsx)(n.p,{children:"Because of this, we recommend asserting on as many required steps as possible\nbefore moving forward with the test. This also helps later to isolate where the\nexact failure is when debugging."}),"\n",(0,t.jsx)(n.p,{children:"Flake can also occur when there are differences between your local and CI\nenvironments. You can use the following methods troubleshoot tests that pass\nlocally but fail in CI."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Review your CI build process to ensure nothing is changing with your\napplication that would result in failing tests."}),"\n",(0,t.jsxs)(n.li,{children:["Remove time-sensitive variability in your tests. For example, ensure a network\nrequest has finished before looking for the DOM element that relies on the\ndata from that network request. You can leverage\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/variables-and-aliases#Aliases",children:"aliasing"})," for this."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Cypress Cloud also offers ",(0,t.jsx)(n.a,{href:"/cloud/features/analytics/overview",children:"Analytics"})," that illustrate\ntrends in your tests and can help identify the tests that flake or fail most often. This\ncould help narrow down what is causing the flake -- for example, seeing\nincreased failures after a change to the test environment could indicate issues\nwith the new environment."]}),"\n",(0,t.jsxs)(n.p,{children:["For more advice on dealing with flake read a\n",(0,t.jsx)(n.a,{href:"https://cypress.io/blog/tag/flake/",children:"series of our blog posts"})," and\n",(0,t.jsx)(n.a,{href:"https://codingitwrong.com/2020/10/09/identifying-code-smells-in-cypress.html",children:"Identifying Code Smells in Cypress"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"Log-Cypress-events",children:"Log Cypress events"}),"\n",(0,t.jsxs)(n.p,{children:["Cypress emits multiple events you can listen to as shown below.\n",(0,t.jsx)(n.a,{href:"/api/cypress-api/catalog-of-events#Logging-All-Events",children:"Read more about logging events in the browser here"}),"."]}),"\n",(0,t.jsx)(i,{src:"/img/api/catalog-of-events/console-log-events-debug.png",alt:"console log events for debugging"}),"\n",(0,t.jsx)(n.h2,{id:"Troubleshooting-Cypress",children:"Troubleshooting Cypress"}),"\n",(0,t.jsxs)(n.p,{children:["There are times when you'll encounter errors or unexpected behavior with\nCypress itself. In this situation, we recommend checking out our\n",(0,t.jsx)(n.a,{href:"/app/references/troubleshooting",children:"Troubleshooting Guide"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"More-info",children:"More info"}),"\n",(0,t.jsx)(n.p,{children:"Often debugging a failing Cypress test means understanding better how your own\napplication works, and how the application might race against the test commands.\nWe recommend reading these blog posts where we show common error scenarios and\nhow to solve them:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.cypress.io/blog/2018/02/05/when-can-the-test-start/",children:"When Can The Test Start?"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.cypress.io/blog/2020/01/16/when-can-the-test-stop/",children:"When Can The Test Stop?"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.cypress.io/blog/2019/01/22/when-can-the-test-click/",children:"When Can The Test Click?"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.cypress.io/blog/2020/06/25/when-can-the-test-log-out/",children:"When Can The Test Log Out?"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.cypress.io/blog/2020/07/22/do-not-get-too-detached/",children:"Do Not Get Too Detached"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>r});var t=s(7294);const o={},i=t.createContext(o);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);