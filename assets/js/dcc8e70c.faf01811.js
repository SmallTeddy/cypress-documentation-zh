"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[6099],{9709:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var i=t(5893),s=t(1151);const o={title:"Conditional Testing"},a=void 0,r={id:"app/guides/conditional-testing",title:"Conditional Testing",description:"What you'll learn",source:"@site/docs/app/guides/conditional-testing.mdx",sourceDirName:"app/guides",slug:"/app/guides/conditional-testing",permalink:"/app/guides/conditional-testing",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/guides/conditional-testing.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",frontMatter:{title:"Conditional Testing"},sidebar:"app",previous:{title:"Social Authentication",permalink:"/app/guides/authentication-testing/social-authentication"},next:{title:"Cross Browser Testing",permalink:"/app/guides/cross-browser-testing"}},l={},d=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"The problem",id:"The-problem",level:2},{value:"The DOM is unstable",id:"The-DOM-is-unstable",level:3},{value:"The situations",id:"The-situations",level:2},{value:"Server side rendering",id:"Server-side-rendering",level:3},{value:"Client side rendering",id:"Client-side-rendering",level:3},{value:"The strategies",id:"The-strategies",level:2},{value:"A/B campaign <E2EOnlyBadge></E2EOnlyBadge>",id:"AB-campaign",level:3},{value:"Use URL query params:",id:"Use-URL-query-params",level:4},{value:"Use the server:",id:"Use-the-server",level:4},{value:"Use session cookies:",id:"Use-session-cookies",level:4},{value:"Embed data in the DOM:",id:"Embed-data-in-the-DOM",level:4},{value:"Welcome wizard <E2EOnlyBadge></E2EOnlyBadge>",id:"Welcome-wizard",level:3},{value:"Use the URL to control it:",id:"Use-the-URL-to-control-it",level:4},{value:"Use Cookies to know ahead of time:",id:"Use-Cookies-to-know-ahead-of-time",level:4},{value:"Use your server or database:",id:"Use-your-server-or-database",level:4},{value:"Embed data in DOM:",id:"Embed-data-in-DOM",level:4},{value:"Element existence",id:"Element-existence",level:3},{value:"Dynamic text",id:"Dynamic-text",level:3},{value:"Conditionally check whether an element has certain text:",id:"Conditionally-check-whether-an-element-has-certain-text",level:4},{value:"Error Recovery",id:"Error-Recovery",level:2}];function h(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components},{E2EOnlyBadge:t,Icon:o}=n;return t||u("E2EOnlyBadge",!0),o||u("Icon",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.h5,{id:"What-youll-learn",children:[(0,i.jsx)(o,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Why conditional testing is difficult"}),"\n",(0,i.jsx)(n.li,{children:"How to overcome the problems with conditional testing"}),"\n",(0,i.jsx)(n.li,{children:"Strategies to achieve conditional testing without relying on the DOM"}),"\n",(0,i.jsx)(n.li,{children:"How to recover from failed Cypress commands"}),"\n"]})]}),"\n",(0,i.jsx)(n.p,{children:"Conditional testing refers to the common programming pattern:"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"If X, then Y, else Z"})}),"\n",(0,i.jsxs)(n.p,{children:["Many of our users ask how to accomplish this in Cypress. ",(0,i.jsx)(n.strong,{children:"Here are some example use cases:"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"How do I do something different whether an element does or doesn't exist?"}),"\n",(0,i.jsx)(n.li,{children:"My application does A/B testing, how do I account for that?"}),"\n",(0,i.jsx)(n.li,{children:"My users receive a \"welcome wizard\", but existing ones don't. Can I always\nclose the wizard in case it's shown, and ignore it when it's not?"}),"\n",(0,i.jsxs)(n.li,{children:["Can I recover from failed Cypress commands like if a\n",(0,i.jsx)(n.a,{href:"/api/commands/get",children:"cy.get()"})," doesn't find an element?"]}),"\n",(0,i.jsx)(n.li,{children:"I'm trying to write dynamic tests that do something different based on the\ntext on the page."}),"\n",(0,i.jsxs)(n.li,{children:["I want to automatically find all ",(0,i.jsx)(n.code,{children:"<a>"})," elements and based on which ones I\nfind, I want to check that each link works."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The problem is - while first appearing simple, writing tests in this fashion\noften leads to flaky tests, random failures, and difficult to track down edge\ncases."}),"\n",(0,i.jsx)(n.p,{children:"Let's investigate why and how you can overcome these problems."}),"\n",(0,i.jsx)(n.h2,{id:"The-problem",children:"The problem"}),"\n",(0,i.jsx)(n.p,{children:"Web applications are often highly dynamic and mutable. Their\nstate and the DOM are continuously changing over a period of time."}),"\n",(0,i.jsx)(n.p,{children:"The problem with conditional testing is that it can only be used when the\nstate has stabilized. Knowing when state is stable in a web application\nis oftentimes difficult."}),"\n",(0,i.jsx)(n.p,{children:"To a human - if something changes 10ms or 100ms from now, we may not even notice\nthis change and assume the state was always the same. To a robot - even 10ms represents billions+ of clock cycles. The timescale\ndifference is incredible."}),"\n",(0,i.jsx)(n.p,{children:"A human also has intuition. If you click a button and see a loading spinner, you\nwill assume the state is in flux and will automatically wait for it to finish.\nA robot has no intuition - it will do exactly as it's programmed to do."}),"\n",(0,i.jsx)(n.p,{children:"To illustrate this, let's take a straightforward example of trying to\nconditionally test unstable state."}),"\n",(0,i.jsx)(n.h3,{id:"The-DOM-is-unstable",children:"The DOM is unstable"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="app.js"',children:"const random = Math.random() * 100 // random ms of time\nconst btn = document.createElement('button')\n\ndocument.body.appendChild(btn)\n\nsetTimeout(() => {\n  // add the class active after a random amount of time\n  btn.setAttribute('class', 'active')\n}, random)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="test.cy.js"',children:"it('does something different based on the class of the button', () => {\n  // RERUN THIS TEST OVER AND OVER AGAIN\n  // AND IT WILL SOMETIMES BE TRUE, AND\n  // SOMETIMES BE FALSE.\n\n  cy.get('button').then(($btn) => {\n    if ($btn.hasClass('active')) {\n      // do something if it's active\n    } else {\n      // do something else\n    }\n  })\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Do you see the problem here? This test is non-deterministic. The ",(0,i.jsx)(n.code,{children:"<button>"})," will\nsometimes have the class ",(0,i.jsx)(n.code,{children:"active"})," and sometimes not. In ",(0,i.jsx)(n.strong,{children:"most"})," cases, you\ncan't rely on the state of the DOM to determine what you should conditionally\ndo."]}),"\n",(0,i.jsx)(n.p,{children:"This is the heart of flaky tests. At Cypress we've designed our API to combat\nthis type of flakiness at every step."}),"\n",(0,i.jsx)(n.h2,{id:"The-situations",children:"The situations"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"only"}),' way to do conditional testing on the DOM is if you\'re 100% sure\nthat the state has "settled" and there is no possible way for it to change.']}),"\n",(0,i.jsx)(n.p,{children:"That is it! In any other circumstance you will have flaky tests if you try to\nrely on the state of the DOM for conditional testing."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Let's explore a few examples."})}),"\n",(0,i.jsx)(n.h3,{id:"Server-side-rendering",children:"Server side rendering"}),"\n",(0,i.jsx)(n.p,{children:"If your application is server side rendered without JavaScript that\nasynchronously modifies the DOM - congratulations, you can do conditional\ntesting on the DOM!"}),"\n",(0,i.jsxs)(n.p,{children:["Why? Because if the DOM is not going to change after the ",(0,i.jsx)(n.code,{children:"load"})," event occurs,\nthen it can accurately represent a stable state of truth."]}),"\n",(0,i.jsx)(n.p,{children:"You can safely skip down to the bottom where we provide examples of conditional\ntesting."}),"\n",(0,i.jsx)(n.h3,{id:"Client-side-rendering",children:"Client side rendering"}),"\n",(0,i.jsxs)(n.p,{children:["However, in most applications - when the ",(0,i.jsx)(n.code,{children:"load"})," event occurs,\nthat doesn't usually mean everything is rendered on the screen. It is usually at this moment that\nyour scripts begin to load dynamic content and begin to render asynchronously."]}),"\n",(0,i.jsx)(n.p,{children:"Unfortunately, it's not possible for you to use the DOM to do conditional\ntesting. To do this would require you to know with 100% guarantee that your\napplication has finished all asynchronous rendering and that there are no\npending network requests, setTimeouts, intervals, postMessage, or async/await\ncode."}),"\n",(0,i.jsx)(n.p,{children:"This is difficult to do without making changes to your\napplication. In other words, you cannot do conditional testing safely if you want your tests\nto run 100% consistently."}),"\n",(0,i.jsxs)(n.p,{children:["But do not fret - there are workarounds to still achieve conditional\ntesting ",(0,i.jsx)(n.strong,{children:"without"})," relying on the DOM. You have to ",(0,i.jsx)(n.em,{children:"anchor"})," yourself to another\npiece of truth that is not mutable."]}),"\n",(0,i.jsx)(n.h2,{id:"The-strategies",children:"The strategies"}),"\n",(0,i.jsx)(n.p,{children:"If you're unable to guarantee that the DOM is stable - there are\nother ways you can do conditional testing or work around the problems inherent\nwith it."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"You could:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Remove the need to ever do conditional testing."}),"\n",(0,i.jsx)(n.li,{children:"Force your application to behave deterministically."}),"\n",(0,i.jsx)(n.li,{children:"Check other sources of truth (like your server or database)."}),"\n",(0,i.jsx)(n.li,{children:"Embed data into other places (cookies / local storage) to evaluate."}),"\n",(0,i.jsx)(n.li,{children:"Add data to the DOM that you can evaluate to know how to proceed."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Let's explore some examples of conditional testing that will pass or fail 100%\nof the time."}),"\n",(0,i.jsxs)(n.h3,{id:"AB-campaign",children:["A/B campaign ",(0,i.jsx)(t,{})]}),"\n",(0,i.jsx)(n.p,{children:"In this example let's assume you visit your website and the content will be\ndifferent based on which A/B campaign your server decides to send. Perhaps it's\nbased on geo-location, IP address, time of day, locale, or other factors that\nare difficult to control. How can you write tests in this manner?"}),"\n",(0,i.jsx)(n.p,{children:"Control which campaign gets sent, or provide a reliable means to know which one\nit is."}),"\n",(0,i.jsx)(n.h4,{id:"Use-URL-query-params",children:"Use URL query params:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// tell your back end server which campaign you want sent\n// so you can deterministically know what it is ahead of time\ncy.visit('https://example.cypress.io?campaign=A')\n// tests...\n\ncy.visit('https://example.cypress.io?campaign=B')\n// tests...\n\ncy.visit('https://example.cypress.io?campaign=C')\n// tests...\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now there is not even a need to do conditional testing since you're able to\nknow ahead of time what campaign was sent. Yes, this may require server side\nupdates, but you have to make an untestable app testable if you want to test it!"}),"\n",(0,i.jsx)(n.h4,{id:"Use-the-server",children:"Use the server:"}),"\n",(0,i.jsx)(n.p,{children:"Alternatively, if your server saves the campaign with a session, you could ask\nyour server to tell you which campaign you are on."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// this sends us the session cookies\ncy.visit('https://example.cypress.io')\n\n// assuming this sends us back\n// the campaign information\ncy.request('https://example.cypress.io/me')\n  .its('body.campaign')\n  .then((campaign) => {\n    // runs different cypress test code\n    // based on the type of campaign\n    return campaigns.test(campaign)\n  })\n"})}),"\n",(0,i.jsx)(n.h4,{id:"Use-session-cookies",children:"Use session cookies:"}),"\n",(0,i.jsx)(n.p,{children:"Another way to test this is if your server sent the campaign in a session cookie\nthat you could read off."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"cy.visit('https://example.cypress.io')\ncy.getCookie('campaign').then((campaign) => {\n  return campaigns.test(campaign)\n})\n"})}),"\n",(0,i.jsx)(n.h4,{id:"Embed-data-in-the-DOM",children:"Embed data in the DOM:"}),"\n",(0,i.jsxs)(n.p,{children:["Another valid strategy would be to embed data directly into the DOM - but do so\nin a way where this data is ",(0,i.jsx)(n.strong,{children:"always"})," present and query-able. It would have to\nbe present 100% of the time, else this would not work."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"cy.get('html')\n  .should('have.attr', 'data-campaign')\n  .then((campaign) => {\n    return campaigns.test(campaign)\n  })\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"Welcome-wizard",children:["Welcome wizard ",(0,i.jsx)(t,{})]}),"\n",(0,i.jsx)(n.p,{children:"In this example, let's imagine you're running a bunch of tests and each time\nyou load your application, it may show a \"Welcome Wizard\" modal."}),"\n",(0,i.jsx)(n.p,{children:"In this situation, you want to close the wizard when it is present and ignore it\nif it is not."}),"\n",(0,i.jsx)(n.p,{children:"The problem with this is that if the wizard renders asynchronously (as it likely\ndoes) you cannot use the DOM to conditionally dismiss it."}),"\n",(0,i.jsx)(n.p,{children:"Once again - we will need another reliable way to achieve this without involving\nthe DOM."}),"\n",(0,i.jsx)(n.p,{children:"These patterns are pretty much the same as before:"}),"\n",(0,i.jsx)(n.h4,{id:"Use-the-URL-to-control-it",children:"Use the URL to control it:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// dont show the wizard\ncy.visit('https://example.cypress.io?wizard=0')\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// show the wizard\ncy.visit('https://example.cypress.io?wizard=1')\n"})}),"\n",(0,i.jsx)(n.p,{children:"We'd likely need to update our client side code to check whether this query\nparam is present. Now we know ahead of time whether it will or will not be\nshown."}),"\n",(0,i.jsx)(n.h4,{id:"Use-Cookies-to-know-ahead-of-time",children:"Use Cookies to know ahead of time:"}),"\n",(0,i.jsxs)(n.p,{children:["In the case where you cannot control it, you can still conditionally dismiss it\n",(0,i.jsx)(n.strong,{children:"if"})," you know whether it is going to be shown."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"cy.visit('https://example.cypress.io')\ncy.getCookie('showWizard').then((val) => {\n  if (val) {\n    // dismiss the wizard conditionally by enqueuing these\n    // three additional commands\n    cy.get('#wizard').contains('Close').click()\n  }\n})\n"})}),"\n",(0,i.jsx)(n.h4,{id:"Use-your-server-or-database",children:"Use your server or database:"}),"\n",(0,i.jsx)(n.p,{children:"If you store and/or persist whether to show the wizard on the server, then ask\nit."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"cy.visit('https://example.cypress.io')\ncy.request('https://example.cypress.io/me')\n  .its('body.showWizard')\n  .then((val) => {\n    if (val) {\n      // dismiss the wizard conditionally by enqueuing these\n      // three additional commands\n      cy.get('#wizard').contains('Close').click()\n    }\n  })\n"})}),"\n",(0,i.jsx)(n.p,{children:"Alternatively, if you are creating users, it might take less time to create the\nuser and set whether you want the wizard to be shown ahead of time. That would\navoid this check later."}),"\n",(0,i.jsx)(n.h4,{id:"Embed-data-in-DOM",children:"Embed data in DOM:"}),"\n",(0,i.jsxs)(n.p,{children:["Another valid strategy would be to embed data directly into the DOM but to do so\nin a way that the data is ",(0,i.jsx)(n.strong,{children:"always"})," present and query-able. The data would have\nto be present 100% of the time, otherwise this strategy would not work."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"cy.get('html')\n  .should('have.attr', 'data-wizard')\n  .then((wizard) => {\n    if (wizard) {\n      // dismiss the wizard conditionally by enqueuing these\n      // three additional commands\n      cy.get('#wizard').contains('Close').click()\n    }\n  })\n"})}),"\n",(0,i.jsx)(n.h3,{id:"Element-existence",children:"Element existence"}),"\n",(0,i.jsxs)(n.p,{children:["In the case where you ",(0,i.jsx)(n.strong,{children:"are"})," trying to use the DOM to do conditional testing,\nyou can utilize the ability to synchronously query for elements in Cypress to\ncreate control flow."]}),"\n",(0,i.jsxs)(n.admonition,{type:"caution",children:[(0,i.jsx)(n.p,{children:"In the event you didn't read a word above and skipped down here, we'll\nreiterate it one more time:"}),(0,i.jsx)(n.p,{children:"You cannot do conditional testing on the DOM unless you are either:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Server side rendering with no asynchronous JavaScript."}),"\n",(0,i.jsxs)(n.li,{children:["Using client side JavaScript that ",(0,i.jsx)(n.strong,{children:"only"})," ever does synchronous rendering."]}),"\n"]}),(0,i.jsx)(n.p,{children:"It's crucial that you understand how your application works else you will write\nflaky tests."})]}),"\n",(0,i.jsx)(n.p,{children:"Let's imagine we have a scenario where our application may do two separate\nthings that we're unable to control. In other words you tried every strategy\nabove and for whatever reason you were unable to know ahead of time what your\napplication will do."}),"\n",(0,i.jsx)(n.p,{children:"Testing this in Cypress is possible."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="app.js"',children:"$('button').on('click', (e) => {\n  // do something synchronously randomly\n  if (Math.random() < 0.5) {\n    // append an input\n    $('<input />').appendTo($('body'))\n  } else {\n    // or append a textarea\n    $('<textarea />').appendTo($('body'))\n  }\n})\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="test.cy.js"',children:"// click the button causing the new elements to appear\ncy.get('button').click()\ncy.get('body')\n  .then(($body) => {\n    // synchronously query from body\n    // to find which element was created\n    if ($body.find('input').length) {\n      // input was found, do something else here\n      return 'input'\n    }\n\n    // else assume it was textarea\n    return 'textarea'\n  })\n  .then((selector) => {\n    // selector is a string that represents\n    // the selector we could use to find it\n    cy.get(selector).type(`found the element by selector ${selector}`)\n  })\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We'll reiterate one more time. Had the ",(0,i.jsx)(n.code,{children:"<input>"})," or the ",(0,i.jsx)(n.code,{children:"<textarea>"})," been\nrendered asynchronously, you couldn't use the pattern above. You'd have to\ninvolve arbitrary delays which won't work in every situation, will slow down\nyour tests, and will still leave chances that your tests are flaky."]}),"\n",(0,i.jsxs)(n.p,{children:["Cypress is built around creating ",(0,i.jsx)(n.strong,{children:"reliable tests"}),'. The secret to writing good\ntests is to provide as much "state" and "facts" to Cypress and to "guard it"\nfrom issuing new commands until your application has reached the desired state\nit needs to proceed.']}),"\n",(0,i.jsx)(n.p,{children:"Doing conditional testing adds a huge problem - that the test writers themselves\nare unsure what the given state will be. In those situations, the only reliable\nway to have accurate tests is to embed this dynamic state in a reliable and\nconsistent way."}),"\n",(0,i.jsx)(n.p,{children:"If you're not sure if you've written a potentially flaky test, there's a way\nto figure it out. Repeat the test an excessive number of times, and then repeat\nby modifying the Developer Tools to throttle the Network and the CPU. This will\ncreate different loads that simulate different environments (like CI). If you've\nwritten a good test, it will pass or fail 100% of the time."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"Cypress._.times(100, (i) => {\n  it(`num ${i + 1} - test the thing conditionally`, () => {\n    // do the conditional bits 100 times\n  })\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"Dynamic-text",children:"Dynamic text"}),"\n",(0,i.jsx)(n.p,{children:"The pattern of doing something conditionally based on whether or not certain\ntext is present is identical to element existence above."}),"\n",(0,i.jsx)(n.h4,{id:"Conditionally-check-whether-an-element-has-certain-text",children:"Conditionally check whether an element has certain text:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// this only works if there's 100% guarantee\n// body has fully rendered without any pending changes\n// to its state\ncy.get('body').then(($body) => {\n    // synchronously ask for the body's text\n    // and do something based on whether it includes\n    // another string\n    if ($body.text().includes('some string')) {\n      // yup found it\n      cy.get(...).should(...)\n    } else {\n      // nope not here\n      cy.get(...).should(...)\n    }\n  })\n"})}),"\n",(0,i.jsx)(n.h2,{id:"Error-Recovery",children:"Error Recovery"}),"\n",(0,i.jsx)(n.p,{children:"Many of our users ask how they can recover from failed commands."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"If I had error handling, I could try to find X and if X fails go find Y"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Because error handling is a common idiom in most programming languages, and\nespecially in Node, it seems reasonable to expect to do that in Cypress."}),"\n",(0,i.jsx)(n.p,{children:"However, this is really the same question as asking to do conditional testing,\nbut wrapped up in a slightly different implementation detail."}),"\n",(0,i.jsx)(n.p,{children:"For instance you may want to do this:"}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(o,{name:"exclamation-triangle",color:"red"})," The following code is not valid."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"//! You cannot add error handling to Cypress commands\n//! This code is just for demonstration purposes\ncy.get('button')\n  .contains('hello')\n  .catch((err) => {\n    // oh no the button wasn't found\n    // (or something else failed)\n    cy.get('somethingElse').click()\n  })\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you've been reading along, then you should already have a grasp on why trying\nto implement conditional code with asynchronous rendering is not a good idea. If\nthe test writer cannot accurately predict the given state of the system, then\nneither can Cypress. Error handling offers no additional proof this can be done\ndeterministically."}),"\n",(0,i.jsx)(n.p,{children:"You should think of failed commands in Cypress as akin to uncaught exceptions in\nserver side code. It's not possible to try to recover in those scenarios\nbecause the system has transitioned to an unreliable state. Instead you\ngenerally always opt to crash and log. When Cypress fails the test - that is\nexactly what it is doing. Bailing out, skipping any remaining commands in the\ntest, and logging out the failure."}),"\n",(0,i.jsx)(n.p,{children:"But... for the sake of the argument, let's imagine for a moment you did have\nerror handling in Cypress."}),"\n",(0,i.jsx)(n.p,{children:"Enabling this would mean that for every single command, it would recover from\nerrors, but only after each applicable command timeout was reached. Since\ntimeouts start at 4 seconds (and exceed from there), this means that it would\nonly fail after a long, long time."}),"\n",(0,i.jsx)(n.p,{children:'Let\'s reimagine our "Welcome Wizard" example from before.'}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(o,{name:"exclamation-triangle",color:"red"})," The following code is not valid."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"//! You cannot add error handling to Cypress commands.\n//! This code is just for demonstration purposes\nfunction keepCalmAndCarryOn () {\n  cy.get(...).should(...).click()\n}\n\ncy\n  .get('#wizard').contains('Close').click()\n  .catch((err) => {\n    // no problem, i guess the wizard didn't exist\n    // or something... no worries\n    keepCalmAndCarryOn()\n  })\n  .then(keepCalmAndCarryOn)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.strong,{children:"best"})," case scenario, we have wasted at LEAST 4 seconds waiting on the\n",(0,i.jsx)(n.code,{children:"<#wizard>"})," element to possibly exist before we errored and continued on."]}),"\n",(0,i.jsxs)(n.p,{children:["But in the ",(0,i.jsx)(n.strong,{children:"worst"})," case scenario we have a situation where the ",(0,i.jsx)(n.code,{children:"<#wizard>"}),"\n",(0,i.jsx)(n.strong,{children:"was"})," going to be rendered, but it didn't render within our given timeout.\nLet's assume this was due to a pending network request or WebSocket message or a\nqueued timer, or anything else."]}),"\n",(0,i.jsxs)(n.p,{children:["In this situation, not only did we wait a long period of time, but when the\n",(0,i.jsx)(n.code,{children:"<#wizard>"})," element was eventually shown it's likely caused an error downstream\non other commands."]}),"\n",(0,i.jsxs)(n.p,{children:["If you cannot accurately know the state of your application then no matter what\nprogramming idioms you have available - ",(0,i.jsx)(n.strong,{children:"you cannot write 100% deterministic\ntests"}),"."]})]})}function c(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>a});var i=t(7294);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);