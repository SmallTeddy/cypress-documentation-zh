"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[5640],{4529:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var t=s(5893),i=s(1151);const o={title:"Introduction to Cypress",sidebar_position:10,sidebar_label:"Introduction"},r=void 0,a={id:"app/core-concepts/introduction-to-cypress",title:"Introduction to Cypress",description:"This is the single most important guide for understanding how to test with",source:"@site/docs/app/core-concepts/introduction-to-cypress.mdx",sourceDirName:"app/core-concepts",slug:"/app/core-concepts/introduction-to-cypress",permalink:"/app/core-concepts/introduction-to-cypress",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/core-concepts/introduction-to-cypress.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",sidebarPosition:10,frontMatter:{title:"Introduction to Cypress",sidebar_position:10,sidebar_label:"Introduction"},sidebar:"app",previous:{title:"Custom Frameworks",permalink:"/app/component-testing/custom-frameworks"},next:{title:"Testing Types",permalink:"/app/core-concepts/testing-types"}},l={},c=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"Cypress Can Be Simple (Sometimes)",id:"Cypress-Can-Be-Simple-Sometimes",level:2},{value:"Querying Elements",id:"Querying-Elements",level:2},{value:"Cypress is Like jQuery",id:"Cypress-is-Like-jQuery",level:3},{value:"Cypress is <em>Not</em> Like jQuery",id:"Cypress-is-Not-Like-jQuery",level:3},{value:"1. The element is found",id:"1-The-element-is-found",level:4},{value:"2. A set timeout is reached",id:"2-A-set-timeout-is-reached",level:4},{value:"Querying by Text Content",id:"Querying-by-Text-Content",level:3},{value:"When Elements Are Missing",id:"When-Elements-Are-Missing",level:3},{value:"Chains of Commands",id:"Chains-of-Commands",level:2},{value:"Interacting With Elements",id:"Interacting-With-Elements",level:3},{value:"Asserting About Elements",id:"Asserting-About-Elements",level:3},{value:"Subject Management",id:"Subject-Management",level:3},{value:"All commands yield a value.",id:"All-commands-yield-a-value",level:4},{value:"Some commands require a previous subject.",id:"Some-commands-require-a-previous-subject",level:4},{value:"Examples:",id:"Examples",level:4},{value:"Using <code>.then()</code> To Act On A Subject",id:"Using-then-To-Act-On-A-Subject",level:4},{value:"Let&#39;s look at an example:",id:"Lets-look-at-an-example",level:4},{value:"Using Aliases to Refer to Previous Subjects",id:"Using-Aliases-to-Refer-to-Previous-Subjects",level:4},{value:"Commands Are Asynchronous",id:"Commands-Are-Asynchronous",level:3},{value:"Take this short test, for example:",id:"Take-this-short-test-for-example",level:4},{value:"Mixing Async and Sync code",id:"Mixing-Async-and-Sync-code",level:4},{value:"Avoid loops",id:"Avoid-loops",level:4},{value:"Commands Run Serially",id:"Commands-Run-Serially",level:3},{value:"Let&#39;s take another look at an example",id:"Lets-take-another-look-at-an-example",level:4},{value:"The Cypress Command Queue",id:"The-Cypress-Command-Queue",level:3},{value:"You cannot race or run multiple commands at the same time",id:"You-cannot-race-or-run-multiple-commands-at-the-same-time",level:4},{value:"You cannot add a <code>.catch</code> error handler to a failed command",id:"You-cannot-add-a-catch-error-handler-to-a-failed-command",level:4},{value:"Assertions",id:"Assertions",level:2},{value:"Asserting in English",id:"Asserting-in-English",level:3},{value:"When To Assert?",id:"When-To-Assert",level:3},{value:"Consider this example:",id:"Consider-this-example",level:4},{value:"Implicit Assertions",id:"Implicit-Assertions",level:3},{value:"For instance:",id:"For-instance",level:4},{value:"Example #1: Existence and Actionability",id:"Example-1-Existence-and-Actionability",level:4},{value:"Example #2: Reversing the Implicit Assertion",id:"Example-2-Reversing-the-Implicit-Assertion",level:4},{value:"Example #3: Other Implicit Assertions",id:"Example-3-Other-Implicit-Assertions",level:4},{value:"List of Assertions",id:"List-of-Assertions",level:3},{value:"Writing Assertions",id:"Writing-Assertions",level:3},{value:"Command Assertions",id:"Command-Assertions",level:3},{value:"Mocha Assertions",id:"Mocha-Assertions",level:3},{value:"Timeouts",id:"Timeouts",level:2},{value:"Applying Timeouts",id:"Applying-Timeouts",level:3},{value:"Example #1: Implicit Assertion",id:"Example-1-Implicit-Assertion",level:4},{value:"Example #2: Additional Assertions",id:"Example-2-Additional-Assertions",level:4},{value:"Example #3: Modifying Timeouts",id:"Example-3-Modifying-Timeouts",level:4},{value:"Default Values",id:"Default-Values",level:3}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components},{DocsImage:s,E2EOrCtTabs:o,Icon:r}=n;return s||m("DocsImage",!0),o||m("E2EOrCtTabs",!0),r||m("Icon",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"This is the single most important guide"})," for understanding how to test with\nCypress. Read it. Understand it. Ask questions about it so that we can improve\nit."]})}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.h5,{id:"What-youll-learn",children:[(0,t.jsx)(r,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The rules Cypress follows so you can productively test your application"}),"\n",(0,t.jsx)(n.li,{children:"How to query elements in Cypress"}),"\n",(0,t.jsx)(n.li,{children:"How Cypress uses command chains and the asynchronous nature of Cypress commands"}),"\n",(0,t.jsx)(n.li,{children:"How to interact with elements and assert about elements"}),"\n"]})]}),"\n",(0,t.jsx)(n.h2,{id:"Cypress-Can-Be-Simple-Sometimes",children:"Cypress Can Be Simple (Sometimes)"}),"\n",(0,t.jsx)(n.p,{children:"Simplicity is all about getting more done with less typing. Let's look at an\nexample:"}),"\n",(0,t.jsxs)(o,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'describe(\'Post Resource\', () => {\n  it(\'Creating a New Post\', () => {\n    cy.visit(\'/posts/new\') // 1.\n\n    cy.get("input.post-title") // 2.\n      .type("My First Post"); // 3.\n\n    cy.get("input.post-body") // 4.\n      .type("Hello, world!"); // 5.\n\n    cy.contains("Submit") // 6.\n      .click(); // 7.\n\n    cy.get("h1") // 8.\n      .should("contain", "My First Post");\n  });\n});\n'})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'describe(\'Post Resource\', () => {\n  it(\'Creating a New Post\', () => {\n    cy.mount(<PostBuilder />) // 1.\n\n    cy.get("input.post-title") // 2.\n      .type("My First Post"); // 3.\n\n    cy.get("input.post-body") // 4.\n      .type("Hello, world!"); // 5.\n\n    cy.contains("Submit") // 6.\n      .click(); // 7.\n\n    cy.get("h1") // 8.\n      .should("contain", "My First Post");\n  });\n});\n'})})]}),"\n",(0,t.jsx)(n.p,{children:"Can you read this? If you did, it might sound something like this:"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.em,{children:["Visit page at ",(0,t.jsx)(n.code,{children:"/posts/new"})," (or mount the ",(0,t.jsx)(n.code,{children:"PostBuilder"})," component)."]})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.em,{children:["Find the ",(0,t.jsx)(n.code,{children:"<input>"})," with class ",(0,t.jsx)(n.code,{children:"post-title"}),"."]})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.em,{children:'Type "My First Post" into it.'})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.em,{children:["Find the ",(0,t.jsx)(n.code,{children:"<input>"})," with class ",(0,t.jsx)(n.code,{children:"post-body"}),"."]})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.em,{children:'Type "Hello, world!" into it.'})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.em,{children:["Find the element containing the text ",(0,t.jsx)(n.code,{children:"Submit"}),"."]})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.em,{children:"Click it."})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.em,{children:["Find the ",(0,t.jsx)(n.code,{children:"h1"}),' tag, ensure it contains the text "My First Post".']})}),"\n"]})}),"\n",(0,t.jsx)(n.p,{children:"This is a relatively straightforward test, but consider how much code has been\ncovered by it, both on the client and the server!"}),"\n",(0,t.jsx)(n.p,{children:"For the remainder of this guide, we'll explore the basics of Cypress that make\nthis example work. We'll demystify the rules Cypress follows so you can\nproductively test your application to act as much like a user as possible, as\nwell as discuss how to take shortcuts when it's useful."}),"\n",(0,t.jsx)(n.h2,{id:"Querying-Elements",children:"Querying Elements"}),"\n",(0,t.jsx)(n.h3,{id:"Cypress-is-Like-jQuery",children:"Cypress is Like jQuery"}),"\n",(0,t.jsxs)(n.p,{children:["If you've used ",(0,t.jsx)(n.a,{href:"https://jquery.com/",children:"jQuery"})," before, you may be used to querying\nfor elements like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"$('.my-selector')\n"})}),"\n",(0,t.jsx)(n.p,{children:"In Cypress, querying elements is the same:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.get('.my-selector')\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In fact, Cypress\n",(0,t.jsx)(n.a,{href:"/app/references/bundled-libraries#Other-Library-Utilities",children:"bundles jQuery"}),"\nand exposes many of its DOM traversal methods to you so you can work with\ncomplex HTML structures with ease using APIs you're already familiar with."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Each Cypress query is equivalent to its jQuery counterpart.\ncy.get('#main-content').find('.article').children('img[src^=\"/static\"]').first()\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)("strong",{children:"Core Concept"}),(0,t.jsx)(n.p,{children:"Cypress leverages jQuery's powerful selector engine to help make tests familiar\nand readable for modern web developers."}),(0,t.jsxs)(n.p,{children:["Interested in the best practices for selecting elements?\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/best-practices#Selecting-Elements",children:"Read here"}),"."]})]}),"\n",(0,t.jsx)(n.p,{children:"Accessing the DOM elements returned from the query works differently, however:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// This is fine, jQuery returns the element synchronously.\nconst $jqElement = $('.element')\n\n// This will not work! Cypress does not return the element synchronously.\nconst $cyElement = cy.get('.element')\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let's look at why this is..."}),"\n",(0,t.jsxs)(n.h3,{id:"Cypress-is-Not-Like-jQuery",children:["Cypress is ",(0,t.jsx)(n.em,{children:"Not"})," Like jQuery"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Question:"})," What happens when jQuery can't find any matching DOM elements from\nits selector?"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Answer:"})," ",(0,t.jsx)(n.em,{children:"Oops!"})," It returns an empty jQuery collection. We've got a real\nobject to work with, but it doesn't contain the element we wanted. So we start\nadding conditional checks and retrying our queries manually."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// $() returns immediately with an empty collection.\nconst $myElement = $('.element').first()\n\n// Leads to ugly conditional checks\n// and worse - flaky tests!\nif ($myElement.length) {\n  doSomething($myElement)\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Question:"})," What happens when Cypress can't find any matching DOM elements\nfrom its selector?"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Answer:"})," ",(0,t.jsx)(n.em,{children:"No big deal!"})," Cypress automatically retries the query until either:"]}),"\n",(0,t.jsx)(n.h4,{id:"1-The-element-is-found",children:"1. The element is found"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy\n  // cy.get() looks for '#element', repeating the query until...\n  .get('#element')\n\n  // ...it finds the element!\n  // You can now work with it by using .then\n  .then(($myElement) => {\n    doSomething($myElement)\n  })\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-A-set-timeout-is-reached",children:"2. A set timeout is reached"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy\n  // cy.get() looks for '#element-does-not-exist', repeating the query until...\n  // ...it doesn't find the element before its timeout.\n  // Cypress halts and fails the test.\n  .get('#element-does-not-exist')\n\n  // ...this code is never run...\n  .then(($myElement) => {\n    doSomething($myElement)\n  })\n"})}),"\n",(0,t.jsx)(n.p,{children:"This makes Cypress robust and immune to dozens of common problems that occur in\nother testing tools. Consider all the circumstances that could cause querying a\nDOM element to fail:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The DOM has not loaded yet."}),"\n",(0,t.jsx)(n.li,{children:"Your framework hasn't finished bootstrapping."}),"\n",(0,t.jsx)(n.li,{children:"An XHR request hasn't responded."}),"\n",(0,t.jsx)(n.li,{children:"An animation hasn't completed."}),"\n",(0,t.jsx)(n.li,{children:"and on and on..."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Before, you'd be forced to write custom code to protect against any and all of\nthese issues: a nasty mashup of arbitrary waits, conditional retries, and null\nchecks littering your tests. Not in Cypress! With built-in retrying and\n",(0,t.jsx)(n.a,{href:"/app/references/configuration#Timeouts",children:"customizable timeouts"}),", Cypress\nsidesteps all of these flaky issues."]}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)("strong",{children:"Core Concept"}),(0,t.jsx)(n.p,{children:"Cypress wraps all DOM queries with robust retry-and-timeout logic that better\nsuits how real web apps work. We trade a minor change in how we find DOM\nelements for a major stability upgrade to all of our tests. Banishing flake for\ngood!"})]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["In Cypress, when you want to interact with a DOM element directly, call\n",(0,t.jsx)(n.a,{href:"/api/commands/then",children:(0,t.jsx)(n.code,{children:".then()"})})," with a callback function that receives the\nelement as its first argument. When you want to skip the retry-and-timeout\nfunctionality entirely and perform traditional synchronous work, use\n",(0,t.jsx)(n.a,{href:"/api/utilities/$",children:(0,t.jsx)(n.code,{children:"Cypress.$"})}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"Querying-by-Text-Content",children:"Querying by Text Content"}),"\n",(0,t.jsxs)(n.p,{children:["Another way to locate things -- a more human way -- is to look them up by their\ncontent, by what the user would see on the page. For this, there's the handy\n",(0,t.jsx)(n.a,{href:"/api/commands/contains",children:(0,t.jsx)(n.code,{children:"cy.contains()"})})," command, for example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Find an element in the document containing the text 'New Post'\ncy.contains('New Post')\n\n// Find an element within '.main' containing the text 'New Post'\ncy.get('.main').contains('New Post')\n"})}),"\n",(0,t.jsxs)(n.p,{children:['This is helpful when writing tests from the perspective of a user interacting\nwith your app. They only know that they want to click the button labeled\n"Submit". They have no idea that it has a ',(0,t.jsx)(n.code,{children:"type"})," attribute of ",(0,t.jsx)(n.code,{children:"submit"}),", or a CSS\nclass of ",(0,t.jsx)(n.code,{children:"my-submit-button"}),"."]}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsx)("strong",{children:"Internationalization"}),(0,t.jsx)(n.p,{children:"If your app is translated into multiple languages for i18n, make sure you\nconsider the implications of using user-facing text to find DOM elements!"})]}),"\n",(0,t.jsx)(n.h3,{id:"When-Elements-Are-Missing",children:"When Elements Are Missing"}),"\n",(0,t.jsx)(n.p,{children:"As we showed above, Cypress anticipates the asynchronous nature of web\napplications and doesn't fail immediately the first time an element is not\nfound. Instead, Cypress gives your app a window of time to finish whatever it\nmay be doing!"}),"\n",(0,t.jsxs)(n.p,{children:["This is known as a ",(0,t.jsx)(n.code,{children:"timeout"}),", and most commands can be customized with specific\ntimeout periods\n(",(0,t.jsx)(n.a,{href:"/app/references/configuration#Timeouts",children:"the default timeout is 4 seconds"}),").\nThese Commands will list a ",(0,t.jsx)(n.code,{children:"timeout"})," option in their API documentation,\ndetailing how to set the number of milliseconds you want to continue to try\nfinding the element."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Give this element 10 seconds to appear\ncy.get('.my-slow-selector', { timeout: 10000 })\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can also set the timeout globally via the\n",(0,t.jsxs)(n.a,{href:"/app/references/configuration#Timeouts",children:["configuration setting: ",(0,t.jsx)(n.code,{children:"defaultCommandTimeout"})]}),"."]}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)("strong",{children:"Core Concept"}),(0,t.jsx)(n.p,{children:"To match the behavior of web applications, Cypress is asynchronous and relies on\ntimeouts to know when to stop waiting on an app to get into the expected state.\nTimeouts can be configured globally, or on a per-command basis."})]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)("strong",{children:"Timeouts and Performance"}),(0,t.jsxs)(n.p,{children:["There is a performance tradeoff here: ",(0,t.jsx)(n.strong,{children:"tests that have longer timeout periods\ntake longer to fail"}),". Commands always proceed as soon as their expected\ncriteria is met, so working tests will be performed as fast as your application\nallows. A test that fails due to timeout will consume the entire timeout period,\nby design. This means that while you ",(0,t.jsx)(n.em,{children:"may"})," want to increase your timeout period\nto suit specific parts of your app, you ",(0,t.jsx)(n.em,{children:"don't"}),' want to make it "extra long,\njust in case".']})]}),"\n",(0,t.jsxs)(n.p,{children:["Later in this guide we'll go into much more detail about\n",(0,t.jsx)(n.a,{href:"#Implicit-Assertions",children:"Implicit Assertions"})," and ",(0,t.jsx)(n.a,{href:"#Timeouts",children:"Timeouts"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"Chains-of-Commands",children:"Chains of Commands"}),"\n",(0,t.jsx)(n.p,{children:"It's very important to understand the mechanism Cypress uses to chain commands\ntogether. It manages a Promise chain on your behalf, with each command yielding\na 'subject' to the next command, until the chain ends or an error is\nencountered. The developer should not need to use Promises directly, but\nunderstanding how they work is helpful!"}),"\n",(0,t.jsx)(n.h3,{id:"Interacting-With-Elements",children:"Interacting With Elements"}),"\n",(0,t.jsxs)(n.p,{children:["As we saw in the initial example, Cypress allows you to click on and type into\nelements on the page by using ",(0,t.jsx)(n.a,{href:"/api/commands/click",children:(0,t.jsx)(n.code,{children:".click()"})})," and\n",(0,t.jsx)(n.a,{href:"/api/commands/type",children:(0,t.jsx)(n.code,{children:".type()"})})," action commands with a\n",(0,t.jsx)(n.a,{href:"/api/commands/get",children:(0,t.jsx)(n.code,{children:"cy.get()"})})," or ",(0,t.jsx)(n.a,{href:"/api/commands/contains",children:(0,t.jsx)(n.code,{children:"cy.contains()"})}),"\nquery command. This is a great example of chaining in action. Let's see it\nagain:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.get('textarea.post-body').type('This is an excellent post.')\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We're chaining ",(0,t.jsx)(n.a,{href:"/api/commands/type",children:(0,t.jsx)(n.code,{children:".type()"})})," onto\n",(0,t.jsx)(n.a,{href:"/api/commands/get",children:(0,t.jsx)(n.code,{children:"cy.get()"})}),", telling it to type into the subject yielded\nfrom the ",(0,t.jsx)(n.a,{href:"/api/commands/get",children:(0,t.jsx)(n.code,{children:"cy.get()"})})," query, which will be a DOM element."]}),"\n",(0,t.jsx)(n.p,{children:"Here are even more action commands Cypress provides to interact with your app:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/blur",children:(0,t.jsx)(n.code,{children:".blur()"})})," - Make a focused DOM element blur."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/focus",children:(0,t.jsx)(n.code,{children:".focus()"})})," - Focus on a DOM element."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/clear",children:(0,t.jsx)(n.code,{children:".clear()"})})," - Clear the value of an input or textarea."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/check",children:(0,t.jsx)(n.code,{children:".check()"})})," - Check checkbox(es) or radio(s)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/uncheck",children:(0,t.jsx)(n.code,{children:".uncheck()"})})," - Uncheck checkbox(es)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/select",children:(0,t.jsx)(n.code,{children:".select()"})})," - Select an ",(0,t.jsx)(n.code,{children:"<option>"})," within a\n",(0,t.jsx)(n.code,{children:"<select>"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/dblclick",children:(0,t.jsx)(n.code,{children:".dblclick()"})})," - Double-click a DOM element."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/rightclick",children:(0,t.jsx)(n.code,{children:".rightclick()"})})," - Right-click a DOM element."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["These commands ensure\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/interacting-with-elements",children:"some guarantees"})," about what\nthe state of the elements should be prior to performing their actions."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, when writing a ",(0,t.jsx)(n.a,{href:"/api/commands/click",children:(0,t.jsx)(n.code,{children:".click()"})}),' command, Cypress\nensures that the element is able to be interacted with (like a real user would).\nIt will automatically wait until the element reaches an "actionable" state by:']}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Not being hidden"}),"\n",(0,t.jsx)(n.li,{children:"Not being covered"}),"\n",(0,t.jsx)(n.li,{children:"Not being disabled"}),"\n",(0,t.jsx)(n.li,{children:"Not animating"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["This also helps prevent flake when interacting with your application in tests.\nYou can usually override this behavior with a ",(0,t.jsx)(n.code,{children:"force"})," option."]}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)("strong",{children:"Core Concept"}),(0,t.jsxs)(n.p,{children:["Cypress provides a simple but powerful algorithm when\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/interacting-with-elements",children:" interacting with elements."})]})]}),"\n",(0,t.jsx)(n.h3,{id:"Asserting-About-Elements",children:"Asserting About Elements"}),"\n",(0,t.jsxs)(n.p,{children:["Assertions let you do things like ensuring an element is visible or has a\nparticular attribute, CSS class, or state. Assertions are commands that enable\nyou to describe the ",(0,t.jsx)(n.em,{children:"desired"})," state of your application. Cypress will\nautomatically wait until your elements reach this state, or fail the test if the\nassertions don't pass. Here's a quick look at assertions in action:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.get(':checkbox').should('be.disabled')\n\ncy.get('form').should('have.class', 'form-horizontal')\n\ncy.get('input').should('not.have.value', 'US')\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In each of these examples, it's important to note that Cypress will\nautomatically ",(0,t.jsx)(n.em,{children:"wait"})," until these assertions pass. This prevents you from having\nto know or care about the precise moment your elements eventually do reach this\nstate."]}),"\n",(0,t.jsxs)(n.p,{children:["We will learn more about ",(0,t.jsx)(n.a,{href:"#Assertions",children:"assertions"})," later in this guide."]}),"\n",(0,t.jsx)(n.h3,{id:"Subject-Management",children:"Subject Management"}),"\n",(0,t.jsxs)(n.p,{children:["A new Cypress chain always starts with ",(0,t.jsx)(n.code,{children:"cy.[command]"}),", where what is yielded by\nthe ",(0,t.jsx)(n.code,{children:"command"})," establishes what other commands can be called next (chained)."]}),"\n",(0,t.jsx)(n.h4,{id:"All-commands-yield-a-value",children:"All commands yield a value."}),"\n",(0,t.jsx)(n.p,{children:"Each command specifies what value it yields. For example,"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/clearcookies",children:(0,t.jsx)(n.code,{children:"cy.clearCookies()"})})," yields ",(0,t.jsx)(n.code,{children:"null"}),". You can chain\noff commands that yield ",(0,t.jsx)(n.code,{children:"null"}),", as long as the next command doesn't expect to\nreceive a subject."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/contains",children:(0,t.jsx)(n.code,{children:"cy.contains()"})})," yields a DOM element, allowing\nfurther commands to be chained (assuming they expect a DOM subject) like\n",(0,t.jsx)(n.a,{href:"/api/commands/click",children:(0,t.jsx)(n.code,{children:".click()"})})," or even\n",(0,t.jsx)(n.a,{href:"/api/commands/contains",children:(0,t.jsx)(n.code,{children:"cy.contains()"})})," again."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/click",children:(0,t.jsx)(n.code,{children:".click()"})})," yields the same subject it was originally\ngiven."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"Some-commands-require-a-previous-subject",children:"Some commands require a previous subject."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/click",children:(0,t.jsx)(n.code,{children:".click()"})})," requires a DOM element from the previous\ncommand."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/its",children:(0,t.jsx)(n.code,{children:".its()"})})," requires a subject, but it can be of any type."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/contains",children:(0,t.jsx)(n.code,{children:"cy.contains()"})})," behaves differently depending on the\nprevious subject. If chained directly off of ",(0,t.jsx)(n.code,{children:"cy"}),", or if the previous command\nyielded ",(0,t.jsx)(n.code,{children:"null"}),", it will look at the entire document. But if the subject is a\nDOM element, it will only look inside that container."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/clearcookies",children:(0,t.jsx)(n.code,{children:"cy.clearCookies()"})})," does not require a previous\nsubject - it can be chained off of anything, even\n",(0,t.jsx)(n.a,{href:"/api/commands/end",children:(0,t.jsx)(n.code,{children:".end()"})}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"Examples",children:"Examples:"}),"\n",(0,t.jsx)(n.p,{children:"This is actually much more intuitive than it sounds."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.clearCookies() // Yields null\n  .visit('/fixtures/dom.html') // Does not care about the previous subject.\n\ncy.get('.main-container') // Yields an array of matching DOM elements\n  .contains('Headlines') // Yields the first DOM element containing content\n  .click() // Yields same DOM element from previous command.\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)("strong",{children:"Core Concept"}),(0,t.jsxs)(n.p,{children:["Cypress commands do not ",(0,t.jsx)(n.strong,{children:"return"})," their subjects, they ",(0,t.jsx)(n.strong,{children:"yield"})," them.\nRemember: Cypress commands are asynchronous and get queued for execution at a\nlater time. During execution, subjects are yielded from one command to the next,\nand a lot of helpful Cypress code runs between each command to ensure everything\nis in order."]})]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)("strong",{children:"Don't continue a chain after acting on the DOM"}),(0,t.jsxs)(n.p,{children:["While it's possible in Cypress to act on the DOM and then continue chaining,\nthis is usually unsafe, and can lead to stale elements. See the\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/retry-ability",children:"Retry-ability Guide"})," for more details."]}),(0,t.jsxs)(n.p,{children:["But the rule of thumb is simple: If you perform an action, like navigating the\npage, clicking a button or scrolling the viewport, end the chain of commands\nthere and start fresh from ",(0,t.jsx)(n.code,{children:"cy"}),"."]})]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["To work around the need to reference elements, Cypress has a feature\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/variables-and-aliases",children:"known as aliasing"}),". Aliasing helps\nyou to ",(0,t.jsx)(n.strong,{children:"store"})," and ",(0,t.jsx)(n.strong,{children:"save"})," references for future use."]})}),"\n",(0,t.jsxs)(n.h4,{id:"Using-then-To-Act-On-A-Subject",children:["Using ",(0,t.jsx)(n.a,{href:"/api/commands/then",children:(0,t.jsx)(n.code,{children:".then()"})})," To Act On A Subject"]}),"\n",(0,t.jsxs)(n.p,{children:["Want to jump into the command flow and get your hands on the subject directly?\nNo problem, add a ",(0,t.jsx)(n.a,{href:"/api/commands/then",children:".then()"})," to your command chain. When the\nprevious command resolves, it will call your callback function with the yielded\nsubject as the first argument."]}),"\n",(0,t.jsxs)(n.p,{children:["If you wish to continue chaining commands after your\n",(0,t.jsx)(n.a,{href:"/api/commands/then",children:(0,t.jsx)(n.code,{children:".then()"})}),", you'll need to specify the subject you want to\nyield to those commands, which you can achieve with a return value other than\n",(0,t.jsx)(n.code,{children:"null"})," or ",(0,t.jsx)(n.code,{children:"undefined"}),". Cypress will yield that to the next command for you."]}),"\n",(0,t.jsx)(n.h4,{id:"Lets-look-at-an-example",children:"Let's look at an example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy\n  // Find the el with id 'some-link'\n  .get('#some-link')\n\n  .then(($myElement) => {\n    // ...massage the subject with some arbitrary code\n\n    // grab its href property\n    const href = $myElement.prop('href')\n\n    // strip out the 'hash' character and everything after it\n    return href.replace(/(#.*)/, '')\n  })\n  .then((href) => {\n    // href is now the new subject\n    // which we can work with now\n  })\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)("strong",{children:"Core Concept"}),(0,t.jsxs)(n.p,{children:["We have many more examples and use cases of ",(0,t.jsx)(n.a,{href:"/api/commands/then",children:"cy.then()"})," in\nour ",(0,t.jsx)(n.a,{href:"/app/core-concepts/variables-and-aliases",children:"Core Concept Guide"})," that\nteaches you how to properly deal with asynchronous code, when to use variables,\nand what aliasing is."]})]}),"\n",(0,t.jsx)(n.h4,{id:"Using-Aliases-to-Refer-to-Previous-Subjects",children:"Using Aliases to Refer to Previous Subjects"}),"\n",(0,t.jsxs)(n.p,{children:["Cypress has some added functionality for quickly referring back to past subjects\ncalled ",(0,t.jsx)(n.a,{href:"/app/core-concepts/variables-and-aliases",children:"Aliases"}),". It looks\nsomething like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.get('.my-selector')\n  .as('myElement') // sets the alias\n  .click()\n\n/* many more actions */\n\ncy.get('@myElement') // re-queries the DOM as before\n  .click()\n"})}),"\n",(0,t.jsx)(n.p,{children:"This lets us reuse our queries for more readable tests, and it automatically\nhandles re-querying the DOM for us as it updates. This is particularly helpful\nwhen dealing with front end frameworks that do a lot of re-rendering!"}),"\n",(0,t.jsx)(n.h3,{id:"Commands-Are-Asynchronous",children:"Commands Are Asynchronous"}),"\n",(0,t.jsx)(n.p,{children:"It is very important to understand that Cypress commands don't do anything at\nthe moment they are invoked, but rather enqueue themselves to be run later. This\nis what we mean when we say Cypress commands are asynchronous."}),"\n",(0,t.jsx)(n.h4,{id:"Take-this-short-test-for-example",children:"Take this short test, for example:"}),"\n",(0,t.jsxs)(o,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('hides the thing when it is clicked', () => {\n  cy.visit('/my/resource/path') // Nothing happens yet\n\n  cy.get(\".hides-when-clicked\") // Still nothing happening\n    .should(\"be.visible\") // Still absolutely nothing\n    .click() // Nope, nothing\n\n  cy.get('.hides-when-clicked') // Still nothing happening\n    .should('not.be.visible') // Definitely nothing happening yet\n})\n\n// Ok, the test function has finished executing...\n// We've queued all of these commands and now\n// Cypress will begin running them in order!\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('hides the thing when it is clicked', () => {\n  cy.mount(<MyComponent />) // Nothing happens yet\n\n  cy.get(\".hides-when-clicked\") // Still nothing happening\n    .should(\"be.visible\") // Still absolutely nothing\n    .click() // Nope, nothing\n\n  cy.get('.hides-when-clicked') // Still nothing happening\n    .should('not.be.visible') // Definitely nothing happening yet\n})\n\n// Ok, the test function has finished executing...\n// We've queued all of these commands and now\n// Cypress will begin running them in order!\n"})})]}),"\n",(0,t.jsx)(n.p,{children:"Cypress doesn't kick off the browser automation until the test function exits."}),"\n",(0,t.jsx)(n.h4,{id:"Mixing-Async-and-Sync-code",children:"Mixing Async and Sync code"}),"\n",(0,t.jsx)(n.p,{children:"Remembering that Cypress commands run asynchronously is important if you are\nattempting to mix Cypress commands with synchronous code. Synchronous code will\nexecute immediately - not waiting for the Cypress commands above it to execute."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{name:"exclamation-triangle",color:"red"})," ",(0,t.jsx)(n.strong,{children:"Incorrect usage"})]}),"\n",(0,t.jsxs)(n.p,{children:["In the example below, the ",(0,t.jsx)(n.code,{children:"el"})," evaluates immediately, before the ",(0,t.jsx)(n.code,{children:"cy.visit()"}),"\nhas executed, so will always evaluate to an empty array."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('does not work as we expect', () => {\n  cy.visit('/my/resource/path') // Nothing happens yet\n\n  cy.get('.awesome-selector') // Still nothing happening\n    .click() // Nope, nothing\n\n  // Cypress.$ is synchronous, so evaluates immediately\n  // there is no element to find yet because\n  // the cy.visit() was only queued to visit\n  // and did not actually visit the application\n  let el = Cypress.$('.new-el') // evaluates immediately as []\n\n  if (el.length) {\n    // evaluates immediately as 0\n    cy.get('.another-selector')\n  } else {\n    // this will always run\n    // because the 'el.length' is 0\n    // when the code executes\n    cy.get('.optional-selector')\n  }\n})\n\n// Ok, the test function has finished executing...\n// We've queued all of these commands and now\n// Cypress will begin running them in order!\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{name:"check-circle",color:"green"})," ",(0,t.jsx)(n.strong,{children:"Correct usage"})]}),"\n",(0,t.jsx)(n.p,{children:"Below is one way the code above could be rewritten in order to ensure the\ncommands run as expected."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('does not work as we expect', () => {\n  cy.visit('/my/resource/path') // Nothing happens yet\n\n  cy.get('.awesome-selector') // Still nothing happening\n    .click() // Nope, nothing\n    .then(() => {\n      // placing this code inside the .then() ensures\n      // it runs after the cypress commands 'execute'\n      let el = Cypress.$('.new-el') // evaluates after .then()\n\n      if (el.length) {\n        cy.get('.another-selector')\n      } else {\n        cy.get('.optional-selector')\n      }\n    })\n})\n\n// Ok, the test function has finished executing...\n// We've queued all of these commands and now\n// Cypress will begin running them in order!\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{name:"exclamation-triangle",color:"red"})," ",(0,t.jsx)(n.strong,{children:"Incorrect usage"})]}),"\n",(0,t.jsxs)(n.p,{children:["In the example below, the check on the ",(0,t.jsx)(n.code,{children:"username"})," value gets evaluated\nimmediately, before the ",(0,t.jsx)(n.code,{children:"cy.visit()"})," has executed, so will always evaluate to\n",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('test', () => {\n  let username = undefined // evaluates immediately as undefined\n\n  cy.visit('https://example.cypress.io') // Nothing happens yet\n  cy.get('.user-name') // Still, nothing happens yet\n    .then(($el) => {\n      // Nothing happens yet\n      // this line evaluates after the .then executes\n      username = $el.text()\n    })\n\n  // this evaluates before the .then() above\n  // so the username is still undefined\n  if (username) {\n    // evaluates immediately as undefined\n    cy.contains(username).click()\n  } else {\n    // this will always run\n    // because username will always\n    // evaluate to undefined\n    cy.contains('My Profile').click()\n  }\n})\n\n// Ok, the test function has finished executing...\n// We've queued all of these commands and now\n// Cypress will begin running them in order!\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{name:"check-circle",color:"green"})," ",(0,t.jsx)(n.strong,{children:"Correct usage"})]}),"\n",(0,t.jsx)(n.p,{children:"Below is one way the code above could be rewritten in order to ensure the\ncommands run as expected."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('test', () => {\n  let username = undefined // evaluates immediately as undefined\n\n  cy.visit('https://example.cypress.io') // Nothing happens yet\n  cy.get('.user-name') // Still, nothing happens yet\n    .then(($el) => {\n      // Nothing happens yet\n      // this line evaluates after the .then() executes\n      username = $el.text()\n\n      // evaluates after the .then() executes\n      // it's the correct value gotten from the $el.text()\n      if (username) {\n        cy.contains(username).click()\n      } else {\n        cy.get('My Profile').click()\n      }\n    })\n})\n\n// Ok, the test function has finished executing...\n// We've queued all of these commands and now\n// Cypress will begin running them in order!\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)("strong",{children:"Core Concept"}),(0,t.jsx)(n.p,{children:"Each Cypress command (and chain of commands) returns immediately, having only\nbeen appended to a queue to be executed at a later time."}),(0,t.jsxs)(n.p,{children:["You purposefully ",(0,t.jsx)(n.strong,{children:"cannot"})," do anything useful with the return value from a\ncommand. Commands are enqueued and managed entirely behind the scenes."]}),(0,t.jsx)(n.p,{children:"We've designed our API this way because the DOM is a highly mutable object that\nconstantly goes stale. For Cypress to prevent flake, and know when to proceed,\nwe manage commands in a highly controlled deterministic way."})]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)("strong",{children:"Why can't I use async / await?"}),(0,t.jsxs)(n.p,{children:['If you\'re a modern JS programmer you might hear "asynchronous" and think: ',(0,t.jsxs)(n.strong,{children:["why\ncan't I just use ",(0,t.jsx)(n.code,{children:"async/await"})]})," instead of learning some proprietary API?"]}),(0,t.jsx)(n.p,{children:"Cypress's APIs are built very differently from what you're likely used to: but\nthese design patterns are incredibly intentional. We'll go into more detail\nlater in this guide."})]}),"\n",(0,t.jsx)(n.h4,{id:"Avoid-loops",children:"Avoid loops"}),"\n",(0,t.jsxs)(n.p,{children:["Using JavaScript loop commands like ",(0,t.jsx)(n.code,{children:"while"})," can have unexpected effects. Let's\nsay our application shows a random number on load."]}),"\n",(0,t.jsx)(s,{src:"/img/app/core-concepts/reload-page.gif",alt:"Manually reloading the browser page until the number 7 appears"}),"\n",(0,t.jsx)(n.p,{children:"We want the test to stop when it finds the number 7. If any other number is\ndisplayed the test reloads the page and checks again."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," you can find this application and the correct test in our\n",(0,t.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-example-recipes#testing-the-dom",children:"Recipes"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{name:"exclamation-triangle",color:"red"})," ",(0,t.jsx)(n.strong,{children:"Incorrect test"})]}),"\n",(0,t.jsx)(n.p,{children:"The test written below WILL NOT work and most likely will crash your browser."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"let found7 = false\n\nwhile (!found7) {\n  // this schedules an infinite number\n  // of \"cy.get...\" commands, eventually crashing\n  // before any of them have a chance to run\n  // and set found7 to true\n  cy.get('#result')\n    .should('not.be.empty')\n    .invoke('text')\n    .then(parseInt)\n    .then((number) => {\n      if (number === 7) {\n        found7 = true\n        cy.log('lucky **7**')\n      } else {\n        cy.reload()\n      }\n    })\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The above test keeps adding more ",(0,t.jsx)(n.code,{children:"cy.get('#result')"})," commands to the test chain\nwithout executing any! The chain of commands keeps growing, but never executes -\nsince the test function never finishes running. The ",(0,t.jsx)(n.code,{children:"while"})," loop never allows\nCypress to start executing even the very first ",(0,t.jsx)(n.code,{children:"cy.get(...)"})," command."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{name:"check-circle",color:"green"})," ",(0,t.jsx)(n.strong,{children:"Correct test"})]}),"\n",(0,t.jsx)(n.p,{children:"We need to give the test a chance to run a few commands before deciding if it\nneeds to continue. Thus the correct test would use recursion."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const checkAndReload = () => {\n  // get the element's text, convert into a number\n  cy.get('#result')\n    .should('not.be.empty')\n    .invoke('text')\n    .then(parseInt)\n    .then((number) => {\n      // if the expected number is found\n      // stop adding any more commands\n      if (number === 7) {\n        cy.log('lucky **7**')\n\n        return\n      }\n\n      // otherwise insert more Cypress commands\n      // by calling the function after reload\n      cy.wait(500, { log: false })\n      cy.reload()\n      checkAndReload()\n    })\n}\n\ncy.visit('public/index.html')\ncheckAndReload()\n"})}),"\n",(0,t.jsx)(n.p,{children:"The test runs and correctly finishes."}),"\n",(0,t.jsx)(s,{src:"/img/app/core-concepts/lucky-7.gif",alt:"Test reloads the page until the number 7 appears"}),"\n",(0,t.jsx)(n.p,{children:"You can see a short video going through this example at"}),"\n",(0,t.jsx)(r,{name:"play-circle",url:"https://www.youtube.com/watch?v=5Z8BaPNDfvA"}),"\n",(0,t.jsx)(n.h3,{id:"Commands-Run-Serially",children:"Commands Run Serially"}),"\n",(0,t.jsxs)(n.p,{children:["After a test function is finished running, Cypress goes to work executing the\ncommands that were enqueued using the ",(0,t.jsx)(n.code,{children:"cy.*"})," command chains."]}),"\n",(0,t.jsx)(n.h4,{id:"Lets-take-another-look-at-an-example",children:"Let's take another look at an example"}),"\n",(0,t.jsxs)(o,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('hides the thing when it is clicked', () => {\n  cy.visit('/my/resource/path') // 1.\n\n  cy.get('.hides-when-clicked') // 2\n    .should('be.visible') // 3\n    .click() // 4\n\n  cy.get('.hides-when-clicked') // 5\n    .should('not.be.visible') // 6\n});\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('hides the thing when it is clicked', () => {\n  cy.mount(<MyComponent />) // 1.\n\n  cy.get('.hides-when-clicked') // 2\n    .should('be.visible') // 3\n    .click() // 4\n\n  cy.get('.hides-when-clicked') // 5\n    .should('not.be.visible') // 6\n});\n"})})]}),"\n",(0,t.jsx)(n.p,{children:"The test above would cause an execution in this order:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Visit the URL (or mount the component)."}),"\n",(0,t.jsx)(n.li,{children:"Find an element by its selector."}),"\n",(0,t.jsx)(n.li,{children:"Assert that the element is visible."}),"\n",(0,t.jsx)(n.li,{children:"Perform a click action on that element."}),"\n",(0,t.jsx)(n.li,{children:"Find an element by its selector."}),"\n",(0,t.jsx)(n.li,{children:"Assert that the element is no longer visible."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"These actions will always happen serially (one after the other), never in\nparallel (at the same time). Why?"}),"\n",(0,t.jsxs)(n.p,{children:["To illustrate this, let's revisit that list of actions and expose some of the\nhidden ",(0,t.jsx)(n.strong,{children:"\u2728 magic \u2728"})," Cypress does for us at each step:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Visit the URL \u2728 ",(0,t.jsx)(n.strong,{children:"and wait for the page load event to fire after all\nexternal resources have loaded"})," \u2728 (or mount the component \u2728 ",(0,t.jsx)(n.strong,{children:"and wait for\nthe component to finish mounting"})," \u2728)"]}),"\n",(0,t.jsxs)(n.li,{children:["Find an element by its selector \u2728 ",(0,t.jsx)(n.strong,{children:"and retry until it is found in the DOM"}),"\n\u2728"]}),"\n",(0,t.jsxs)(n.li,{children:["Assert that the element is visible \u2728 ",(0,t.jsx)(n.strong,{children:"and retry until the assertion\npasses"})," \u2728"]}),"\n",(0,t.jsxs)(n.li,{children:["Perform a click action on that element \u2728 ",(0,t.jsx)(n.strong,{children:"after we wait for the element to\nreach an actionable state"})," \u2728"]}),"\n",(0,t.jsxs)(n.li,{children:["Find an element by its selector \u2728 ",(0,t.jsx)(n.strong,{children:"and retry until it is found in the DOM"}),"\n\u2728"]}),"\n",(0,t.jsxs)(n.li,{children:["Assert that the element is no longer visible \u2728 ",(0,t.jsx)(n.strong,{children:"and retry until the\nassertion passes"})," \u2728"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"As you can see, Cypress does a lot of extra work to ensure the state of the\napplication matches what our commands expect about it. Each command may resolve\nquickly (so fast you won't see them in a pending state) but others may take\nseconds, or even dozens of seconds to resolve."}),"\n",(0,t.jsxs)(n.p,{children:["While most commands time out after a few seconds, other specialized commands\nthat expect particular things to take much longer like\n",(0,t.jsx)(n.a,{href:"/api/commands/visit",children:(0,t.jsx)(n.code,{children:"cy.visit()"})})," will naturally wait longer before timing\nout."]}),"\n",(0,t.jsxs)(n.p,{children:["These commands have their own particular timeout values which are documented in\nthe ",(0,t.jsx)(n.a,{href:"/app/references/configuration",children:"Cypress configuration"}),"."]}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)("strong",{children:"Core Concept"}),(0,t.jsx)(n.p,{children:"Any waiting or retrying that is necessary to ensure a step was successful must\ncomplete before the next step begins. If they don't complete successfully before\nthe timeout is reached, the test will fail."})]}),"\n",(0,t.jsx)(n.h3,{id:"The-Cypress-Command-Queue",children:"The Cypress Command Queue"}),"\n",(0,t.jsxs)(n.p,{children:["While the API may look similar to Promises, with its ",(0,t.jsx)(n.code,{children:"then()"})," syntax, Cypress\ncommands and queries are not promises - they are serial commands passed into a\ncentral queue, to be executed asynchronously at a later date. These commands are\ndesigned to deliver deterministic, repeatable and consistent tests."]}),"\n",(0,t.jsxs)(n.p,{children:["Almost all commands come with built-in\n",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/app/core-concepts/retry-ability",children:"retry-ability"})}),". Without\n",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/app/core-concepts/retry-ability",children:"retry-ability"})}),", assertions would\nrandomly fail. This would lead to flaky, inconsistent results."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["While Cypress does have a ",(0,t.jsx)(n.a,{href:"/api/commands/then",children:(0,t.jsx)(n.code,{children:".then()"})})," command, Cypress\ncommands are not Promises and cannot be ",(0,t.jsx)(n.code,{children:"await"}),"ed. If you'd like to learn more\nabout handling asynchronous Cypress Commands please read our\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/variables-and-aliases",children:"Variables and Aliases Guide"}),"."]})}),"\n",(0,t.jsx)(n.p,{children:"Commands also have some design choices that developers who are used to\npromise-based testing may find unexpected. They are intentional decisions on\nCypress' part, not technical limitations."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["You cannot ",(0,t.jsx)(n.strong,{children:"race"})," or run multiple commands at the same time (in parallel)."]}),"\n",(0,t.jsxs)(n.li,{children:["You cannot add a ",(0,t.jsx)(n.code,{children:".catch"})," error handler to a failed command."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The whole purpose of Cypress (and what makes it very different from other\ntesting tools) is to create consistent, non-flaky tests that perform identically\nfrom one run to the next. Making this happen isn't free - there are some\ntrade-offs we make that may initially seem unfamiliar to developers accustomed\nto working with Promises or other libraries."}),"\n",(0,t.jsx)(n.p,{children:"Let's take a look at each trade-off in depth:"}),"\n",(0,t.jsx)(n.h4,{id:"You-cannot-race-or-run-multiple-commands-at-the-same-time",children:"You cannot race or run multiple commands at the same time"}),"\n",(0,t.jsxs)(n.p,{children:["Cypress guarantees that it will execute all of its commands and queries\n",(0,t.jsx)(n.em,{children:"deterministically"})," and identically every time they are run."]}),"\n",(0,t.jsxs)(n.p,{children:["A lot of Cypress commands ",(0,t.jsx)(n.em,{children:"mutate"})," the state of the browser in some way."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/request",children:(0,t.jsx)(n.code,{children:"cy.request()"})})," automatically gets + sets cookies to\nand from the remote server."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/clearcookies",children:(0,t.jsx)(n.code,{children:"cy.clearCookies()"})})," clears all of the browser\ncookies."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/click",children:(0,t.jsx)(n.code,{children:".click()"})})," causes your application to react to click\nevents."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["None of the above commands are ",(0,t.jsx)(n.em,{children:"idempotent"}),"; they all cause side effects. Racing\ncommands is not possible because commands must be run in a controlled, serial\nmanner in order to create consistency. Because integration and e2e tests\nprimarily mimic the actions of a real user, Cypress models its command execution\nmodel after a real user working step by step."]}),"\n",(0,t.jsxs)(n.h4,{id:"You-cannot-add-a-catch-error-handler-to-a-failed-command",children:["You cannot add a ",(0,t.jsx)(n.code,{children:".catch"})," error handler to a failed command"]}),"\n",(0,t.jsxs)(n.p,{children:["In Cypress there is no built in error recovery from a failed command. A command\n",(0,t.jsx)(n.em,{children:"eventually"})," passes, or if it fails, all remaining commands are not executed,\nand the test as a whole fails."]}),"\n",(0,t.jsx)(n.p,{children:"You might be wondering:"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"How do I create conditional control flow, using if/else? So that if an element\ndoes (or doesn't) exist, I choose what to do?"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Cypress does not support this type of conditional control flow because it leads\nto non-deterministic tests - different runs may behave differently, which makes\nthem less consistent and useful for verifying your application's correctness. In\ngeneral, there are only a handful of very specific situations where you can or\nshould create control flow using Cypress commands."}),"\n",(0,t.jsxs)(n.p,{children:["With that said, as long as you are aware of the potential pitfalls with control\nflow, it is possible to do this in Cypress! You can read all about how to do\n",(0,t.jsx)(n.a,{href:"/app/guides/conditional-testing",children:"conditional testing"})," here."]}),"\n",(0,t.jsx)(n.h2,{id:"Assertions",children:"Assertions"}),"\n",(0,t.jsx)(n.p,{children:"As we mentioned previously in this guide:"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Assertions describe the ",(0,t.jsx)(n.strong,{children:"desired"})," state of your ",(0,t.jsx)(n.strong,{children:"elements"}),", your\n",(0,t.jsx)(n.strong,{children:"objects"}),", and your ",(0,t.jsx)(n.strong,{children:"application"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["What makes Cypress unique from other testing tools is that assertions\n",(0,t.jsx)(n.strong,{children:"automatically retry"}),". Think of them as ",(0,t.jsx)(n.strong,{children:"guards"})," - assertions describe what\nyour application should look like, and Cypress will automatically ",(0,t.jsx)(n.strong,{children:"block, wait,\nand retry"})," until it reaches that state."]}),"\n",(0,t.jsx)(n.h3,{id:"Asserting-in-English",children:"Asserting in English"}),"\n",(0,t.jsx)(n.p,{children:"Let's look at how you'd describe an assertion in English:"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["After clicking on this ",(0,t.jsx)(n.code,{children:"<button>"}),", I expect its class to be ",(0,t.jsx)(n.code,{children:"active"}),"."]})}),"\n",(0,t.jsx)(n.p,{children:"To express this in Cypress you'd write:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.get('button').click()\ncy.get('button').should('have.class', 'active')\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This above test will pass even if the ",(0,t.jsx)(n.code,{children:".active"})," class is applied to the button\nasynchronously, after an indeterminate period of time or even if the button is\nremoved from the DOM entirely for a while (replaced with a waiting spinner, for\nexample)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// even though we are adding the class\n// after two seconds...\n// this test will still pass!\n$('button').on('click', (e) => {\n  setTimeout(() => {\n    $(e.target).addClass('active')\n  }, 2000)\n})\n"})}),"\n",(0,t.jsx)(n.p,{children:"Here's another example."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["After making an HTTP request to my server, I expect the response body to equal\n",(0,t.jsx)(n.code,{children:"{name: 'Jane'}"})]})}),"\n",(0,t.jsx)(n.p,{children:"To express this with an assertion you'd write:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.request('/users/1').its('body').should('deep.eq', { name: 'Jane' })\n"})}),"\n",(0,t.jsx)(n.h3,{id:"When-To-Assert",children:"When To Assert?"}),"\n",(0,t.jsx)(n.p,{children:"Despite the dozens of assertions Cypress makes available to you, sometimes the\nbest test may make no assertions at all! How can this be? Aren't assertions a\nbasic part of testing?"}),"\n",(0,t.jsx)(n.h4,{id:"Consider-this-example",children:"Consider this example:"}),"\n",(0,t.jsxs)(o,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.visit('/home')\n\ncy.get('.main-menu').contains('New Project').click()\n\ncy.get('.title').type('My Awesome Project')\n\ncy.get('form').submit()\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.mount(<MyComponent />)\n\ncy.get('.main-menu').contains('New Project').click()\n\ncy.get('.title').type('My Awesome Project')\n\ncy.get('form').submit()\n"})})]}),"\n",(0,t.jsx)(n.p,{children:"Without a single explicit assertion, there are dozens of ways this test can\nfail. Here's a few:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The initial ",(0,t.jsx)(n.a,{href:"/api/commands/mount",children:(0,t.jsx)(n.code,{children:"cy.mount()"})})," or\n",(0,t.jsx)(n.a,{href:"/api/commands/visit",children:(0,t.jsx)(n.code,{children:"cy.visit()"})})," could respond with something other than\nsuccess."]}),"\n",(0,t.jsxs)(n.li,{children:["Any of the ",(0,t.jsx)(n.a,{href:"/api/commands/get",children:(0,t.jsx)(n.code,{children:"cy.get()"})})," queries could fail to find their\nelements in the DOM."]}),"\n",(0,t.jsxs)(n.li,{children:["The element we want to ",(0,t.jsx)(n.a,{href:"/api/commands/click",children:(0,t.jsx)(n.code,{children:".click()"})})," on could be covered\nby another element."]}),"\n",(0,t.jsxs)(n.li,{children:["The input we want to ",(0,t.jsx)(n.a,{href:"/api/commands/type",children:(0,t.jsx)(n.code,{children:".type()"})})," into could be disabled."]}),"\n",(0,t.jsx)(n.li,{children:"Form submission could result in a non-success status code."}),"\n",(0,t.jsx)(n.li,{children:"The in-page JS (the application under test) or the component could throw an\nerror."}),"\n"]}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)("strong",{children:"Core Concept"}),(0,t.jsxs)(n.p,{children:["With Cypress, you don't have to write explicit assertions to have a useful test.\nWithout a single ",(0,t.jsx)(n.code,{children:"expect()"})," or ",(0,t.jsx)(n.code,{children:".should()"}),", a few lines of Cypress can ensure\nthousands of lines of code are working properly across the client and server."]}),(0,t.jsx)(n.p,{children:"This is because many commands have built in Implicit Assertions which offer\nyou a high level of confidence that your application is working as expected."})]}),"\n",(0,t.jsx)(n.h3,{id:"Implicit-Assertions",children:"Implicit Assertions"}),"\n",(0,t.jsx)(n.p,{children:"Many commands have default, built-in assertions, or rather have requirements\nthat may cause it to fail without needing an explicit assertion you've added."}),"\n",(0,t.jsx)(n.h4,{id:"For-instance",children:"For instance:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/visit",children:(0,t.jsx)(n.code,{children:"cy.visit()"})})," expects the page to send ",(0,t.jsx)(n.code,{children:"text/html"}),"\ncontent with a ",(0,t.jsx)(n.code,{children:"200"})," status code."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/request",children:(0,t.jsx)(n.code,{children:"cy.request()"})})," expects the remote server to exist and\nprovide a response."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/contains",children:(0,t.jsx)(n.code,{children:"cy.contains()"})})," expects the element with content to\neventually exist in the DOM."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/get",children:(0,t.jsx)(n.code,{children:"cy.get()"})})," expects the element to eventually exist in the\nDOM."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/find",children:(0,t.jsx)(n.code,{children:".find()"})})," also expects the element to eventually exist\nin the DOM."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/type",children:(0,t.jsx)(n.code,{children:".type()"})})," expects the element to eventually be in a\n",(0,t.jsx)(n.em,{children:"typeable"})," state."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/click",children:(0,t.jsx)(n.code,{children:".click()"})})," expects the element to eventually be in an\n",(0,t.jsx)(n.em,{children:"actionable"})," state."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/its",children:(0,t.jsx)(n.code,{children:".its()"})})," expects to eventually find a property on the\ncurrent subject."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Certain commands may have a specific requirement that causes them to immediately\nfail without retrying, such as ",(0,t.jsx)(n.a,{href:"/api/commands/request",children:(0,t.jsx)(n.code,{children:"cy.request()"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Others, such as DOM queries automatically\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/retry-ability",children:"retry"})," and wait for their corresponding\nelements to exist before failing."]}),"\n",(0,t.jsxs)(n.p,{children:["Action commands automatically wait for their element to reach an\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/interacting-with-elements",children:"actionable state"})," before\nfailing."]}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)("strong",{children:"Core Concept"}),(0,t.jsx)(n.p,{children:"All DOM commands automatically wait for their elements to exist in the DOM."}),(0,t.jsxs)(n.p,{children:["You ",(0,t.jsx)(n.strong,{children:"never"})," need to write ",(0,t.jsx)(n.a,{href:"/api/commands/should",children:(0,t.jsx)(n.code,{children:".should('exist')"})})," after\nquerying the DOM."]})]}),"\n",(0,t.jsxs)(n.p,{children:["Most commands give you the flexibility to override or bypass the default ways\nthey can fail, typically by passing a ",(0,t.jsx)(n.code,{children:"{force: true}"})," option."]}),"\n",(0,t.jsx)(n.h4,{id:"Example-1-Existence-and-Actionability",children:"Example #1: Existence and Actionability"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy\n  // there is an implicit assertion that this\n  // button must exist in the DOM before proceeding\n  .get('button')\n\n  // before issuing the click, this button must be \"actionable\"\n  // it cannot be disabled, covered, or hidden from view.\n  .click()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Cypress will automatically ",(0,t.jsx)(n.em,{children:"wait"})," for elements to pass their implicit\nassertions. See ",(0,t.jsx)(n.a,{href:"#Timeouts",children:"Timeouts"})," below for more on how timeouts are\ndetermined."]}),"\n",(0,t.jsx)(n.h4,{id:"Example-2-Reversing-the-Implicit-Assertion",children:"Example #2: Reversing the Implicit Assertion"}),"\n",(0,t.jsxs)(n.p,{children:["Most of the time, when querying for elements, you expect them to eventually\nexist. But sometimes you wish to wait until they ",(0,t.jsx)(n.em,{children:"don't"})," exist."]}),"\n",(0,t.jsxs)(n.p,{children:["All you have to do is add that assertion and Cypress will ",(0,t.jsx)(n.strong,{children:"skip"})," implicitly\nwaiting for elements to exist."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.get('button.close').click()\n\n// now Cypress will wait until this\n// <button> is not in the DOM\ncy.get('button.close').should('not.exist')\n\n// and now make sure this #modal does not exist in the DOM\n// and automatically wait until it's gone!\ncy.get('#modal').should('not.exist')\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)("strong",{children:"Core Concept"}),(0,t.jsxs)(n.p,{children:["If you want to disable the default existence assertion, you can add\n",(0,t.jsx)(n.a,{href:"/api/commands/should",children:(0,t.jsx)(n.code,{children:".should('not.exist')"})})," to any DOM command."]})]}),"\n",(0,t.jsx)(n.h4,{id:"Example-3-Other-Implicit-Assertions",children:"Example #3: Other Implicit Assertions"}),"\n",(0,t.jsx)(n.p,{children:"Other commands have other implicit assertions not related to the DOM."}),"\n",(0,t.jsxs)(n.p,{children:["For instance, ",(0,t.jsx)(n.a,{href:"/api/commands/its",children:(0,t.jsx)(n.code,{children:".its()"})})," requires that the property you're\nasking about exists on the object."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// create an empty object\nconst obj = {}\n\n// set the 'foo' property after 1 second\nsetTimeout(() => {\n  obj.foo = 'bar'\n}, 1000)\n\n// .its() will wait until the 'foo' property is on the object\ncy.wrap(obj).its('foo')\n"})}),"\n",(0,t.jsx)(n.h3,{id:"List-of-Assertions",children:"List of Assertions"}),"\n",(0,t.jsxs)(n.p,{children:["Cypress bundles ",(0,t.jsx)(n.a,{href:"/app/references/bundled-libraries#Chai",children:"Chai"}),",\n",(0,t.jsx)(n.a,{href:"/app/references/bundled-libraries#Chai-jQuery",children:"Chai-jQuery"}),", and\n",(0,t.jsx)(n.a,{href:"/app/references/bundled-libraries#Sinon-Chai",children:"Sinon-Chai"})," to provide\nbuilt-in assertions. You can see a comprehensive list of them in\n",(0,t.jsx)(n.a,{href:"/app/references/assertions",children:"the list of assertions reference"}),". You can also\n",(0,t.jsx)(n.a,{href:"/app/references/recipes#Fundamentals",children:"write your own assertions as Chai plugins"})," and\nuse them in Cypress."]}),"\n",(0,t.jsx)(n.h3,{id:"Writing-Assertions",children:"Writing Assertions"}),"\n",(0,t.jsx)(n.p,{children:"There are two ways to write assertions in Cypress:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"As Cypress Commands:"})," Using ",(0,t.jsx)(n.a,{href:"/api/commands/should",children:(0,t.jsx)(n.code,{children:".should()"})})," or\n",(0,t.jsx)(n.a,{href:"/api/commands/and",children:(0,t.jsx)(n.code,{children:".and()"})}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"As Mocha Assertions:"})," Using ",(0,t.jsx)(n.code,{children:"expect"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"Command-Assertions",children:"Command Assertions"}),"\n",(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.a,{href:"/api/commands/should",children:(0,t.jsx)(n.code,{children:".should()"})})," or ",(0,t.jsx)(n.a,{href:"/api/commands/and",children:(0,t.jsx)(n.code,{children:".and()"})}),"\ncommands is the preferred way of making assertions in Cypress. These are typical\nCypress commands, which means they apply to the currently yielded subject in the\ncommand chain."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// The subject here is the first <tr>.\n// This asserts that the <tr> has an .active class\ncy.get('tbody tr:first').should('have.class', 'active')\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can chain multiple assertions together using ",(0,t.jsx)(n.a,{href:"/api/commands/and",children:(0,t.jsx)(n.code,{children:".and()"})}),",\nwhich is another name for ",(0,t.jsx)(n.a,{href:"/api/commands/should",children:(0,t.jsx)(n.code,{children:".should()"})})," that makes things\nmore readable:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.get('#header a')\n  .should('have.class', 'active')\n  .and('have.attr', 'href', '/users')\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Because ",(0,t.jsx)(n.a,{href:"/api/commands/should",children:(0,t.jsx)(n.code,{children:".should('have.class')"})})," does not change the\nsubject, ",(0,t.jsx)(n.a,{href:"/api/commands/and",children:(0,t.jsx)(n.code,{children:".and('have.attr')"})})," is executed against the same\nelement. This is handy when you need to assert multiple things against a single\nsubject quickly."]}),"\n",(0,t.jsx)(n.h3,{id:"Mocha-Assertions",children:"Mocha Assertions"}),"\n",(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"expect"})," allows you to assert on any JavaScript object, not just the\ncurrent subject. This is probably how you're used to seeing assertions written\nin unit tests:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// the explicit subject here is the boolean: true\nexpect(true).to.be.true\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)("strong",{children:"Did you know you can write Unit Tests in Cypress?"}),(0,t.jsxs)(n.p,{children:["Check out our example recipes for ",(0,t.jsx)(n.a,{href:"/app/references/recipes",children:"unit testing"})," and\n",(0,t.jsx)(n.a,{href:"/app/references/recipes#Unit-Testing",children:"unit testing React components"}),"."]})]}),"\n",(0,t.jsx)(n.p,{children:"Mocha assertions are great when you want to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Perform custom logic prior to making the assertion."}),"\n",(0,t.jsx)(n.li,{children:"Make multiple assertions against the same subject."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/api/commands/should",children:(0,t.jsx)(n.code,{children:".should()"})})," assertion allows us to pass a callback\nfunction that takes the yielded subject as its first argument. This works like\n",(0,t.jsx)(n.a,{href:"/api/commands/then",children:(0,t.jsx)(n.code,{children:".then()"})}),", except Cypress automatically ",(0,t.jsx)(n.strong,{children:"waits and\nretries"})," for everything inside of the callback function to pass."]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)("strong",{children:"Complex Assertions"}),(0,t.jsxs)(n.p,{children:["The example below is a use case where we are asserting across multiple elements.\nUsing a ",(0,t.jsx)(n.a,{href:"/api/commands/should",children:(0,t.jsx)(n.code,{children:".should()"})})," callback function is a great way to\nquery from a ",(0,t.jsx)(n.strong,{children:"parent"})," into multiple children elements and assert something\nabout their state."]}),(0,t.jsxs)(n.p,{children:["Doing so enables you to ",(0,t.jsx)(n.strong,{children:"block"})," and ",(0,t.jsx)(n.strong,{children:"guard"})," Cypress by ensuring the state of\ndescendants matches what you expect without needing to query them individually\nwith regular Cypress DOM commands."]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"cy.get('p').should(($p) => {\n  // massage our subject from a DOM element\n  // into an array of texts from all of the p's\n  let texts = $p.map((i, el) => {\n    return Cypress.$(el).text()\n  })\n\n  // jQuery map returns jQuery object\n  // and .get() converts this to an array\n  texts = texts.get()\n\n  // array should have length of 3\n  expect(texts).to.have.length(3)\n\n  // with this specific content\n  expect(texts).to.deep.eq([\n    'Some text from first p',\n    'More text from second p',\n    'And even more text from third p',\n  ])\n})\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"danger",children:[(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Make sure ",(0,t.jsx)(n.code,{children:".should()"})," is safe"]})}),(0,t.jsxs)(n.p,{children:["When using a callback function with ",(0,t.jsx)(n.a,{href:"/api/commands/should",children:(0,t.jsx)(n.code,{children:".should()"})}),", be sure\nthat the entire function can be executed multiple times without side effects.\nCypress applies its ",(0,t.jsx)(n.a,{href:"/app/core-concepts/retry-ability",children:"retry logic"})," to these\nfunctions: if there's a failure, it will repeatedly rerun the assertions until\nthe timeout is reached. That means your code should be retry-safe. The technical\nterm for this means your code must be ",(0,t.jsx)(n.strong,{children:"idempotent"}),"."]})]}),"\n",(0,t.jsx)(n.h2,{id:"Timeouts",children:"Timeouts"}),"\n",(0,t.jsx)(n.p,{children:"Almost all commands can time out in some way."}),"\n",(0,t.jsx)(n.p,{children:"All assertions, whether they're the default ones or whether they've been added\nby you all share the same timeout values."}),"\n",(0,t.jsx)(n.h3,{id:"Applying-Timeouts",children:"Applying Timeouts"}),"\n",(0,t.jsx)(n.p,{children:"You can modify a commands's timeout. This timeout affects both its default\nassertions (if any) and any specific assertions you've added."}),"\n",(0,t.jsxs)(n.p,{children:["Remember because assertions are used to describe a condition of the previous\ncommands - the ",(0,t.jsx)(n.code,{children:"timeout"})," modification goes on the previous commands ",(0,t.jsx)(n.em,{children:"not the\nassertions"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"Example-1-Implicit-Assertion",children:"Example #1: Implicit Assertion"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// because .get() has an implicit assertion\n// that this element exists, it can time out and fail\ncy.get('.mobile-nav')\n"})}),"\n",(0,t.jsx)(n.p,{children:"Under the hood Cypress:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Queries for the element ",(0,t.jsx)(n.code,{children:".mobile-nav"})]}),"\n",(0,t.jsxs)(n.p,{children:["\u2728",(0,t.jsx)(n.strong,{children:"and waits up to 4 seconds for it to exist in the DOM"}),"\u2728"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"Example-2-Additional-Assertions",children:"Example #2: Additional Assertions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// we've added 2 assertions to our test\ncy.get('.mobile-nav').should('be.visible').and('contain', 'Home')\n"})}),"\n",(0,t.jsx)(n.p,{children:"Under the hood Cypress:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Queries for the element ",(0,t.jsx)(n.code,{children:".mobile-nav"})]}),"\n",(0,t.jsxs)(n.p,{children:["\u2728",(0,t.jsx)(n.strong,{children:"and waits up to 4 seconds for it to exist in the DOM"}),"\u2728 \u2728",(0,t.jsx)(n.strong,{children:"and be\nvisible"}),"\u2728 \u2728",(0,t.jsx)(n.strong,{children:"and contain the text: Home"}),"\u2728"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.em,{children:"total"})," amount of time Cypress will wait for ",(0,t.jsx)(n.em,{children:"all"})," of the assertions to pass\nis for the duration of the ",(0,t.jsx)(n.a,{href:"/api/commands/get",children:"cy.get()"})," ",(0,t.jsx)(n.code,{children:"timeout"})," (which is 4\nseconds)."]}),"\n",(0,t.jsx)(n.p,{children:"Timeouts can be modified per command and this will affect all implicit\nassertions and any assertions chained after that command."}),"\n",(0,t.jsx)(n.h4,{id:"Example-3-Modifying-Timeouts",children:"Example #3: Modifying Timeouts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// we've modified the timeout which affects the implicit\n// assertions as well as all explicit ones.\ncy.get('.mobile-nav', { timeout: 10000 })\n  .should('be.visible')\n  .and('contain', 'Home')\n"})}),"\n",(0,t.jsx)(n.p,{children:"Under the hood Cypress:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Gets the element ",(0,t.jsx)(n.code,{children:".mobile-nav"})]}),"\n",(0,t.jsxs)(n.p,{children:["\u2728",(0,t.jsx)(n.strong,{children:"and waits up to 10 seconds for it to exist in the DOM"}),"\u2728 \u2728",(0,t.jsx)(n.strong,{children:"and be\nvisible"}),"\u2728 \u2728",(0,t.jsx)(n.strong,{children:"and contain the text: Home"}),"\u2728"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Notice that this timeout has flowed down to all assertions and Cypress will now\nwait ",(0,t.jsx)(n.em,{children:"up to 10 seconds total"})," for all of them to pass."]}),"\n",(0,t.jsxs)(n.admonition,{type:"danger",children:[(0,t.jsxs)(n.p,{children:["Note that you ",(0,t.jsx)(n.em,{children:"never"})," change the timeout inside the assertion. The ",(0,t.jsx)(n.code,{children:"timeout"}),"\nparameter ",(0,t.jsx)(n.strong,{children:"always"})," goes inside the command."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// \ud83d\udea8 DOES NOT WORK\ncy.get('.selector').should('be.visible', { timeout: 1000 })\n// \u2705 THE CORRECT WAY\ncy.get('.selector', { timeout: 1000 }).should('be.visible')\n"})}),(0,t.jsx)(n.p,{children:"Remember, you are retrying the command with attached assertions, not just the\nassertions!"})]}),"\n",(0,t.jsx)(n.h3,{id:"Default-Values",children:"Default Values"}),"\n",(0,t.jsx)(n.p,{children:"Cypress offers several different timeout values based on the type of command."}),"\n",(0,t.jsx)(n.p,{children:"We've set their default timeout durations based on how long we expect certain\nactions to take."}),"\n",(0,t.jsx)(n.p,{children:"For instance:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/visit",children:(0,t.jsx)(n.code,{children:"cy.visit()"})})," loads a remote page and does not resolve\n",(0,t.jsx)(n.em,{children:"until all of the external resources complete their loading phase"}),". This may\ntake awhile, so its default timeout is set to ",(0,t.jsx)(n.code,{children:"60000ms"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/exec",children:(0,t.jsx)(n.code,{children:"cy.exec()"})})," runs a system command such as ",(0,t.jsx)(n.em,{children:"seeding a\ndatabase"}),". We expect this to potentially take a long time, and its default\ntimeout is set to ",(0,t.jsx)(n.code,{children:"60000ms"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/api/commands/wait",children:(0,t.jsx)(n.code,{children:"cy.wait()"})})," actually uses 2 different timeouts. When\nwaiting for a\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/variables-and-aliases#Intercepts",children:"routing alias"}),", we wait\nfor a matching request for ",(0,t.jsx)(n.code,{children:"5000ms"}),", and then additionally for the server's\nresponse for ",(0,t.jsx)(n.code,{children:"30000ms"}),". We expect your application to make a matching request\nquickly, but we expect the server's response to potentially take much longer."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"That leaves most other commands including all DOM queries to time out by default\nafter 4000ms."})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>r});var t=s(7294);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);