"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[3693],{6487:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var t=s(5893),a=s(1151);const i={title:"Variables and Aliases",sidebar_position:40},o=void 0,r={id:"app/core-concepts/variables-and-aliases",title:"Variables and Aliases",description:"What you'll learn",source:"@site/docs/app/core-concepts/variables-and-aliases.mdx",sourceDirName:"app/core-concepts",slug:"/app/core-concepts/variables-and-aliases",permalink:"/app/core-concepts/variables-and-aliases",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/core-concepts/variables-and-aliases.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",sidebarPosition:40,frontMatter:{title:"Variables and Aliases",sidebar_position:40},sidebar:"app",previous:{title:"Interacting with Elements",permalink:"/app/core-concepts/interacting-with-elements"},next:{title:"Test Isolation",permalink:"/app/core-concepts/test-isolation"}},c={},l=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"Closures",id:"Closures",level:3},{value:"Debugging",id:"Debugging",level:3},{value:"Variables",id:"Variables",level:3},{value:"Aliases",id:"Aliases",level:2},{value:"Sharing Context",id:"Sharing-Context",level:3},{value:"Accessing Fixtures:",id:"Accessing-Fixtures",level:4},{value:"Avoiding the use of <code>this</code>",id:"Avoiding-the-use-of-this",level:4},{value:"Elements",id:"Elements",level:3},{value:"Stale Elements:",id:"Stale-Elements",level:4},{value:"Intercepts",id:"Intercepts",level:3},{value:"Requests",id:"Requests",level:3},{value:"Aliases are reset before each test",id:"Aliases-are-reset-before-each-test",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components},{DocsImage:s,Icon:i}=n;return s||u("DocsImage",!0),i||u("Icon",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.h5,{id:"What-youll-learn",children:[(0,t.jsx)(i,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Common patterns for handling asynchronous code in Cypress"}),"\n",(0,t.jsx)(n.li,{children:"When to assign variables and when not to"}),"\n",(0,t.jsx)(n.li,{children:"How to use aliases to share objects between hooks and tests"}),"\n",(0,t.jsxs)(n.li,{children:["Pitfalls with using ",(0,t.jsx)(n.code,{children:"this"})," and how to avoid them"]}),"\n",(0,t.jsx)(n.li,{children:"How to alias DOM elements, intercepts, and requests"}),"\n"]})]}),"\n",(0,t.jsx)(n.p,{children:"New users to Cypress may initially find it challenging to work with the\nasynchronous nature of our APIs.There are many ways to reference, compare and utilize the objects that Cypress\ncommands yield you. Once you get the hang of async code you'll realize you can do everything you\ncould do synchronously, without your code doing any backflips."}),"\n",(0,t.jsx)(n.p,{children:"This guide explores many common patterns for writing good Cypress code that can\nhandle even the most complex situations."}),"\n",(0,t.jsx)(n.p,{children:"Asynchronous APIs are here to stay in JavaScript. They are found everywhere in\nmodern code. In fact, most new browser APIs are asynchronous and many core Node\nmodules are asynchronous as well."}),"\n",(0,t.jsx)(n.p,{children:"The patterns we'll explore below are useful in and outside of Cypress. The first and most important concept you should recognize is..."}),"\n",(0,t.jsx)(n.admonition,{type:"danger",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"You cannot assign or work with the return values"})," of any Cypress command.\nCommands are enqueued and run asynchronously."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// this won't work the way you think it does\nconst button = cy.get('button')\nconst form = cy.get('form')\n\nbutton.click()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"Closures",children:"Closures"}),"\n",(0,t.jsxs)(n.p,{children:["To access what each Cypress command yields you use\n",(0,t.jsx)(n.a,{href:"/api/commands/then",children:(0,t.jsx)(n.code,{children:".then()"})}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.get('button').then(($btn) => {\n  // $btn is the object that the previous\n  // command yielded us\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you're familiar with\n",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises",children:"native Promises"}),"\nthe Cypress ",(0,t.jsx)(n.code,{children:".then()"})," works similarly. You can continue to nest more Cypress\ncommands inside of the ",(0,t.jsx)(n.code,{children:".then()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Each nested command has access to the work done in previous commands. This ends\nup reading very nicely."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.get('button').then(($btn) => {\n\n  // store the button's text\n  const txt = $btn.text()\n\n  // submit a form\n  cy.get('form').submit()\n\n  // compare the two buttons' text\n  // and make sure they are different\n  cy.get('button').should(($btn2) => {\n    expect($btn2.text()).not.to.eq(txt)\n  })\n})\n\n// these commands run after all of the\n// other previous commands have finished\ncy.get(...).find(...).should(...)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The commands outside of the ",(0,t.jsx)(n.code,{children:".then()"})," will not run until all of the nested\ncommands finish."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["By using callback functions we've created a\n",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures",children:"closure"}),".\nClosures enable us to keep references around to refer to work done in previous\ncommands."]})}),"\n",(0,t.jsx)(n.h3,{id:"Debugging",children:"Debugging"}),"\n",(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:".then()"})," functions is an excellent opportunity to use\n",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger",children:(0,t.jsx)(n.code,{children:"debugger"})}),".\nThis can help you understand the order in which commands are run. This also\nenables you to inspect the objects that Cypress yields you in each command."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.get('button').then(($btn) => {\n  // inspect $btn <object>\n  debugger\n\n  cy.get('[data-testid=\"countries\"]')\n    .select('USA')\n    .then(($select) => {\n      // inspect $select <object>\n      debugger\n\n      cy.clock().then(($clock) => {\n        // inspect $clock <object>\n        debugger\n\n        $btn // is still available\n        $select // is still available too\n      })\n    })\n})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"Variables",children:"Variables"}),"\n",(0,t.jsxs)(n.p,{children:["Typically in Cypress you hardly need to ever use ",(0,t.jsx)(n.code,{children:"const"}),", ",(0,t.jsx)(n.code,{children:"let"}),", or ",(0,t.jsx)(n.code,{children:"var"}),". When\nusing closures you'll always have access to the objects that were yielded to you\nwithout assigning them."]}),"\n",(0,t.jsx)(n.p,{children:"The one exception to this rule is when you are dealing with mutable objects\n(that change state). When things change state you often want to compare an\nobject's previous value to the next value."}),"\n",(0,t.jsxs)(n.p,{children:["Here's a great use case for a ",(0,t.jsx)(n.code,{children:"const"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<button>increment</button>\n\nyou clicked button <span data-testid="num">0</span> times\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// app code\nlet count = 0\n\n$('button').on('click', () => {\n  $('[data-testid=\"num\"]').text((count += 1))\n})\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// cypress test code\ncy.get('[data-testid=\"num\"]').then(($span) => {\n  // capture what num is right now\n  const num1 = parseFloat($span.text())\n\n  cy.get('button')\n    .click()\n    .then(() => {\n      // now capture it again\n      const num2 = parseFloat($span.text())\n\n      // make sure it's what we expected\n      expect(num2).to.eq(num1 + 1)\n    })\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The reason for using ",(0,t.jsx)(n.code,{children:"const"})," is because the ",(0,t.jsx)(n.code,{children:"$span"})," object is mutable. Whenever\nyou have mutable objects and you're trying to compare them, you'll need to store\ntheir values. Using ",(0,t.jsx)(n.code,{children:"const"})," is a perfect way to do that."]}),"\n",(0,t.jsx)(n.h2,{id:"Aliases",children:"Aliases"}),"\n",(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:".then()"})," callback functions to access the previous command values is\ngreat\u2014but what happens when you're running code in hooks like ",(0,t.jsx)(n.code,{children:"before"})," or\n",(0,t.jsx)(n.code,{children:"beforeEach"}),"?"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"beforeEach(() => {\n  cy.get('button').then(($btn) => {\n    const text = $btn.text()\n  })\n})\n\nit('does not have access to text', () => {\n  // how do we get access to text ?!?!\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["How will we get access to ",(0,t.jsx)(n.code,{children:"text"}),"?"]}),"\n",(0,t.jsxs)(n.p,{children:["We could make our code do some ugly backflips using ",(0,t.jsx)(n.code,{children:"let"})," to get access to it."]}),"\n",(0,t.jsxs)(n.admonition,{type:"danger",children:[(0,t.jsx)("strong",{children:"Do not do this"}),(0,t.jsx)(n.p,{children:"This code below is just for demonstration."})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describe('a suite', () => {\n  // this creates a closure around\n  // 'text' so we can access it\n  let text\n\n  beforeEach(() => {\n    cy.get('button').then(($btn) => {\n      // redefine text reference\n      text = $btn.text()\n    })\n  })\n\n  it('does have access to text', () => {\n    // now text is available to us\n    // but this is not a great solution :(\n    text\n  })\n})\n"})}),"\n",(0,t.jsx)(n.p,{children:"Fortunately, you don't have to make your code do backflips. With Cypress, we can\nbetter handle these situations."}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)("strong",{children:"Introducing Aliases"}),(0,t.jsx)(n.p,{children:"Aliases are a powerful construct in Cypress that have many uses. We'll explore\neach of their capabilities below."}),(0,t.jsx)(n.p,{children:"At first, we'll use them to share objects between your hooks and your tests."})]}),"\n",(0,t.jsx)(n.h3,{id:"Sharing-Context",children:"Sharing Context"}),"\n",(0,t.jsx)(n.p,{children:"Sharing context is the simplest way to use aliases."}),"\n",(0,t.jsxs)(n.p,{children:["To alias something you'd like to share use the ",(0,t.jsx)(n.a,{href:"/api/commands/as",children:(0,t.jsx)(n.code,{children:".as()"})}),"\ncommand."]}),"\n",(0,t.jsx)(n.p,{children:"Let's look at our previous example with aliases."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"beforeEach(() => {\n  // alias the $btn.text() as 'text'\n  cy.get('button').invoke('text').as('text')\n})\n\nit('has access to text', function () {\n  this.text // is now available\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Under the hood, aliasing basic objects and primitives utilizes Mocha's shared\n",(0,t.jsx)(n.a,{href:"https://github.com/mochajs/mocha/wiki/Shared-Behaviours",children:(0,t.jsx)(n.code,{children:"context"})})," object:\nthat is, aliases are available as ",(0,t.jsx)(n.code,{children:"this.*"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Mocha automatically shares contexts for us across all applicable hooks for each\ntest. Additionally these aliases and properties are automatically cleaned up\nafter each test."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describe('parent', () => {\n  beforeEach(() => {\n    cy.wrap('one').as('a')\n  })\n\n  context('child', () => {\n    beforeEach(() => {\n      cy.wrap('two').as('b')\n    })\n\n    describe('grandchild', () => {\n      beforeEach(() => {\n        cy.wrap('three').as('c')\n      })\n\n      it('can access all aliases as properties', function () {\n        expect(this.a).to.eq('one') // true\n        expect(this.b).to.eq('two') // true\n        expect(this.c).to.eq('three') // true\n      })\n    })\n  })\n})\n"})}),"\n",(0,t.jsx)(n.h4,{id:"Accessing-Fixtures",children:"Accessing Fixtures:"}),"\n",(0,t.jsxs)(n.p,{children:["The most common use case for sharing context is when dealing with\n",(0,t.jsx)(n.a,{href:"/api/commands/fixture",children:(0,t.jsx)(n.code,{children:"cy.fixture()"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Often times you may load a fixture in a ",(0,t.jsx)(n.code,{children:"beforeEach"})," hook but want to utilize\nthe values in your tests."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"beforeEach(() => {\n  // alias the users fixtures\n  cy.fixture('users.json').as('users')\n})\n\nit('utilize users in some way', function () {\n  // access the users property\n  const user = this.users[0]\n\n  // make sure the header contains the first\n  // user's name\n  cy.get('header').should('contain', user.name)\n})\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"danger",children:[(0,t.jsx)("strong",{children:"Watch out for async commands"}),(0,t.jsxs)(n.p,{children:["Do not forget that ",(0,t.jsx)(n.strong,{children:"Cypress commands are async"}),"!"]}),(0,t.jsxs)(n.p,{children:["You cannot use a ",(0,t.jsx)(n.code,{children:"this.*"})," reference until the ",(0,t.jsx)(n.code,{children:".as()"})," command runs."]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('is not using aliases correctly', function () {\n  cy.fixture('users.json').as('users')\n\n  // nope this won't work\n  //\n  // this.users is not defined\n  // because the 'as' command has only\n  // been enqueued - it has not run yet\n  const user = this.users[0]\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The same principles we introduced before apply to this situation. If you want to\naccess what a command yields you have to do it in a closure using a\n",(0,t.jsx)(n.a,{href:"/api/commands/then",children:(0,t.jsx)(n.code,{children:".then()"})}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// yup all good\ncy.fixture('users.json').then((users) => {\n  // now we can avoid the alias altogether\n  // and use a callback function\n  const user = users[0]\n\n  // passes\n  cy.get('header').should('contain', user.name)\n})\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"Avoiding-the-use-of-this",children:["Avoiding the use of ",(0,t.jsx)(n.code,{children:"this"})]}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsx)("strong",{children:"Arrow Functions"}),(0,t.jsxs)(n.p,{children:["Accessing aliases as properties with ",(0,t.jsx)(n.code,{children:"this.*"})," will not work if you use\n",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions",children:"arrow functions"}),"\nfor your tests or hooks."]}),(0,t.jsxs)(n.p,{children:["This is why all of our examples use the regular ",(0,t.jsx)(n.code,{children:"function () {}"}),' syntax as\nopposed to the lambda "fat arrow" syntax ',(0,t.jsx)(n.code,{children:"() => {}"}),"."]})]}),"\n",(0,t.jsxs)(n.p,{children:["Instead of using the ",(0,t.jsx)(n.code,{children:"this.*"})," syntax, there is another way to access aliases."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/api/commands/get",children:(0,t.jsx)(n.code,{children:"cy.get()"})})," command is capable of accessing aliases with\na special syntax using the ",(0,t.jsx)(n.code,{children:"@"})," character:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"beforeEach(() => {\n  // alias the users fixtures\n  cy.fixture('users.json').as('users')\n})\n\nit('utilize users in some way', function () {\n  // use the special '@' syntax to access aliases\n  // which avoids the use of 'this'\n  cy.get('@users').then((users) => {\n    // access the users argument\n    const user = users[0]\n\n    // make sure the header contains the first\n    // user's name\n    cy.get('header').should('contain', user.name)\n  })\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["By using ",(0,t.jsx)(n.a,{href:"/api/commands/get",children:(0,t.jsx)(n.code,{children:"cy.get()"})})," we avoid the use of ",(0,t.jsx)(n.code,{children:"this"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Keep in mind that there are use cases for both approaches because they have one\nmajor difference."}),"\n",(0,t.jsxs)(n.p,{children:["When using ",(0,t.jsx)(n.code,{children:"this.users"}),", it is stored on the context when it is first evaluated.\nBut when using ",(0,t.jsx)(n.code,{children:"cy.get('@users')"}),", any queries are re-evaluated every time the\nalias is accessed."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const favorites = { color: 'blue' }\n\ncy.wrap(favorites).its('color').as('favoriteColor')\n\ncy.then(function () {\n  favorites.color = 'red'\n})\n\ncy.get('@favoriteColor').then(function (aliasValue) {\n  expect(aliasValue).to.eql('red')\n\n  expect(this.favoriteColor).to.eql('blue')\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In the second ",(0,t.jsx)(n.code,{children:".then()"})," block, ",(0,t.jsx)(n.code,{children:"cy.get('@favoriteColor')"})," runs\n",(0,t.jsx)(n.code,{children:"cy.wrap(favorites).its('color')"})," fresh each time, but ",(0,t.jsx)(n.code,{children:"this.favoriteColor"})," was set when\nthe alias was first stored, back when our favorite color was blue."]}),"\n",(0,t.jsx)(n.h3,{id:"Elements",children:"Elements"}),"\n",(0,t.jsx)(n.p,{children:"Aliases have other special characteristics when being used with DOM elements."}),"\n",(0,t.jsx)(n.p,{children:"After you alias DOM elements, you can then later access them for reuse."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// alias all of the tr's found in the table as 'rows'\ncy.get('table').find('tr').as('rows')\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Internally, Cypress has made a reference to the ",(0,t.jsx)(n.code,{children:"<tr>"}),' collection returned as\nthe alias "rows". To reference these same "rows" later, you can use the\n',(0,t.jsx)(n.a,{href:"/api/commands/get",children:(0,t.jsx)(n.code,{children:"cy.get()"})})," command."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Cypress returns the reference to the <tr>'s\n// which allows us to continue to chain commands\n// finding the 1st row.\ncy.get('@rows').first().click()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Because we've used the ",(0,t.jsx)(n.code,{children:"@"})," character in ",(0,t.jsx)(n.a,{href:"/api/commands/get",children:(0,t.jsx)(n.code,{children:"cy.get()"})}),", instead\nof querying the DOM for elements, ",(0,t.jsx)(n.a,{href:"/api/commands/get",children:(0,t.jsx)(n.code,{children:"cy.get()"})})," looks for an\nexisting alias called ",(0,t.jsx)(n.code,{children:"rows"})," and returns the reference (if it finds it)."]}),"\n",(0,t.jsx)(n.h4,{id:"Stale-Elements",children:"Stale Elements:"}),"\n",(0,t.jsx)(n.p,{children:"In many single-page applications, the JavaScript re-renders parts of the DOM\nconstantly. This is why we always re-run queries when you fetch an alias, so you\nnever end up with stale elements."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<ul id="todos">\n  <li>\n    Walk the dog\n    <button class="edit">edit</button>\n  </li>\n  <li>\n    Feed the cat\n    <button class="edit">edit</button>\n  </li>\n</ul>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Let's imagine when we click the ",(0,t.jsx)(n.code,{children:".edit"})," button that our ",(0,t.jsx)(n.code,{children:"<li>"})," is re-rendered in\nthe DOM. Instead of displaying the edit button it instead displays an\n",(0,t.jsx)(n.code,{children:"<input />"})," text field allowing you to edit the todo. The previous ",(0,t.jsx)(n.code,{children:"<li>"})," has\nbeen ",(0,t.jsx)(n.em,{children:"completely"})," removed from the DOM and a new ",(0,t.jsx)(n.code,{children:"<li>"})," is rendered in its\nplace."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"cy.get('[data-testid=\"todos\"] li').first().as('firstTodo')\n\ncy.get('@firstTodo').find('.edit').click()\n\ncy.get('@firstTodo')\n  .should('have.class', 'editing')\n  .find('input')\n  .type('Clean the kitchen')\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Every time we reference ",(0,t.jsx)(n.code,{children:"@firstTodo"}),", Cypress re-runs the queries leading up to\nthe alias definition."]}),"\n",(0,t.jsxs)(n.p,{children:["In our case it would re-query the DOM using: ",(0,t.jsx)(n.code,{children:"cy.get('#todos li').first()"}),".\nEverything works because the new ",(0,t.jsx)(n.code,{children:"<li>"})," is found."]}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Usually"}),", replaying previous commands will return what you expect, but not\nalways. It is recommended that you ",(0,t.jsx)(n.strong,{children:"alias elements before running commands"}),"."]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cy.get('nav').find('header').find('[data-testid=\"user\"]').as('user').click()"}),"\n",(0,t.jsx)(i,{name:"check-circle",color:"green"})," (good)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cy.get('nav').find('header').find('[data-testid=\"user\"]').click().as('user')"}),"\n",(0,t.jsx)(i,{name:"exclamation-triangle",color:"red"})," (bad)"]}),"\n"]})]}),"\n",(0,t.jsx)(n.h3,{id:"Intercepts",children:"Intercepts"}),"\n",(0,t.jsxs)(n.p,{children:["Aliases can also be used with ",(0,t.jsx)(n.a,{href:"/api/commands/intercept",children:"cy.intercept()"}),".\nAliasing your intercepted routes enables you to:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ensure your application makes the intended requests"}),"\n",(0,t.jsx)(n.li,{children:"wait for your server to send the response"}),"\n",(0,t.jsx)(n.li,{children:"access the actual request object for assertions"}),"\n"]}),"\n",(0,t.jsx)(s,{src:"/img/app/core-concepts/aliasing-routes.png",alt:"Alias commands"}),"\n",(0,t.jsx)(n.p,{children:"Here's an example of aliasing an intercepted route and waiting on it to\ncomplete."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.intercept('POST', '/users', { id: 123 }).as('postUser')\n\ncy.get('form').submit()\n\ncy.wait('@postUser').then(({ request }) => {\n  expect(request.body).to.have.property('name', 'Brian')\n})\n\ncy.contains('Successfully created user: Brian')\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)("strong",{children:"New to Cypress?"}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/app/guides/network-requests",children:"We have a much more detailed and comprehensive guide on routing Network Requests."})})]}),"\n",(0,t.jsx)(n.h3,{id:"Requests",children:"Requests"}),"\n",(0,t.jsxs)(n.p,{children:["Aliases can also be used with ",(0,t.jsx)(n.a,{href:"/api/commands/request",children:"requests"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Here's an example of aliasing a request and accessing its properties later."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.request('https://jsonplaceholder.cypress.io/comments').as('comments')\n\n// other test code here\n\ncy.get('@comments').should((response) => {\n  if (response.status === 200) {\n      expect(response).to.have.property('duration')\n    } else {\n      // whatever you want to check here\n    }\n  })\n})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"Aliases-are-reset-before-each-test",children:"Aliases are reset before each test"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," all aliases are reset before each test. A common user mistake is to\ncreate aliases using the ",(0,t.jsx)(n.code,{children:"before"})," hook. Such aliases work in the first test\nonly!"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// \ud83d\udea8 THIS EXAMPLE DOES NOT WORK\nbefore(() => {\n  // notice this alias is created just once using \"before\" hook\n  cy.wrap('some value').as('exampleValue')\n})\n\nit('works in the first test', () => {\n  cy.get('@exampleValue').should('equal', 'some value')\n})\n\n// NOTE the second test is failing because the alias is reset\nit('does not exist in the second test', () => {\n  // there is not alias because it is created once before\n  // the first test, and is reset before the second test\n  cy.get('@exampleValue').should('equal', 'some value')\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The solution is to create the aliases before each test using the ",(0,t.jsx)(n.code,{children:"beforeEach"}),"\nhook"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// \u2705 THE CORRECT EXAMPLE\nbeforeEach(() => {\n  // we will create a new alias before each test\n  cy.wrap('some value').as('exampleValue')\n})\n\nit('works in the first test', () => {\n  cy.get('@exampleValue').should('equal', 'some value')\n})\n\nit('works in the second test', () => {\n  cy.get('@exampleValue').should('equal', 'some value')\n})\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,s)=>{s.d(n,{Z:()=>r,a:()=>o});var t=s(7294);const a={},i=t.createContext(a);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);