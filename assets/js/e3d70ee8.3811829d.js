"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[7128],{7116:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var s=t(5893),i=t(1151);const a={title:"Okta Authentication in Cypress",sidebar_label:"Okta Authentication",description:"Implement Okta authentication in Cypress end-to-end testing. Ensure secure and reliable authentication processes for Cypress testing scenarios"},o="Okta Authentication",r={id:"app/guides/authentication-testing/okta-authentication",title:"Okta Authentication in Cypress",description:"Implement Okta authentication in Cypress end-to-end testing. Ensure secure and reliable authentication processes for Cypress testing scenarios",source:"@site/docs/app/guides/authentication-testing/okta-authentication.mdx",sourceDirName:"app/guides/authentication-testing",slug:"/app/guides/authentication-testing/okta-authentication",permalink:"/app/guides/authentication-testing/okta-authentication",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/guides/authentication-testing/okta-authentication.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",frontMatter:{title:"Okta Authentication in Cypress",sidebar_label:"Okta Authentication",description:"Implement Okta authentication in Cypress end-to-end testing. Ensure secure and reliable authentication processes for Cypress testing scenarios"},sidebar:"app",previous:{title:"Google Authentication",permalink:"/app/guides/authentication-testing/google-authentication"},next:{title:"Social Authentication",permalink:"/app/guides/authentication-testing/social-authentication"}},c={},d=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"Okta Developer Console Setup",id:"Okta-Developer-Console-Setup",level:2},{value:"Setting Okta app credentials in Cypress",id:"Setting-Okta-app-credentials-in-Cypress",level:2},{value:"Custom Command for Okta Authentication",id:"Custom-Command-for-Okta-Authentication",level:2},{value:"Login with <code>cy.origin()</code>",id:"Login-with-cyorigin",level:3},{value:"Programmatic Login",id:"Programmatic-Login",level:3},{value:"Adapting an Okta App for Testing",id:"Adapting-an-Okta-App-for-Testing",level:3},{value:"Adapting the back end",id:"Adapting-the-back-end",level:4},{value:"Adapting the front end",id:"Adapting-the-front-end",level:4}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components},{CypressConfigFileTabs:t,DocsVideo:a,Icon:o}=n;return t||p("CypressConfigFileTabs",!0),a||p("DocsVideo",!0),o||p("Icon",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"Okta-Authentication",children:"Okta Authentication"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.h5,{id:"What-youll-learn",children:[(0,s.jsx)(o,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"How to test Okta authentication in Cypress"}),"\n",(0,s.jsx)(n.li,{children:"How to set Okta credentials in Cypress"}),"\n",(0,s.jsx)(n.li,{children:"How to adapt an Okta app for testing"}),"\n"]})]}),"\n",(0,s.jsxs)(n.p,{children:["The scope of this guide is to demonstrate authentication solely against the\n",(0,s.jsx)(n.a,{href:"https://www.okta.com/products/universal-directory/",children:"Okta Universal Directory"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"Okta-Developer-Console-Setup",children:"Okta Developer Console Setup"}),"\n",(0,s.jsxs)(n.p,{children:["If not already setup, you'll need to\n",(0,s.jsx)(n.a,{href:"https://okta.com",children:"create an Okta application"})," within the Okta Developer\nConsole. Once the Okta application is created, the Okta Developer Console will\nprovide a ",(0,s.jsx)(n.strong,{children:"Client ID"}),", which will be used alongside your ",(0,s.jsx)(n.strong,{children:"Okta domain"})," to\n",(0,s.jsx)(n.a,{href:"https://developer.okta.com/docs/app/sign-into-spa/react/configure-the-sdk/",children:"configure Okta SDKs"}),"\nas shown in the subsequent sections of this guide."]}),"\n",(0,s.jsx)(n.h2,{id:"Setting-Okta-app-credentials-in-Cypress",children:"Setting Okta app credentials in Cypress"}),"\n",(0,s.jsxs)(n.p,{children:["To have access to test user credentials within our tests we need to configure\nCypress to use the Okta environment variables set in the\n",(0,s.jsx)(n.code,{children:".env"})," file."]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n// Populate process.env with values from .env file\nrequire('dotenv').config()\n\nmodule.exports = defineConfig({\n  env: {\n    auth_username: process.env.AUTH_USERNAME,\n    auth_password: process.env.AUTH_PASSWORD,\n    okta_domain: process.env.REACT_APP_OKTA_DOMAIN,\n    okta_client_id: process.env.REACT_APP_OKTA_CLIENTID,\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n// Populate process.env with values from .env file\nrequire('dotenv').config()\n\nexport default defineConfig({\n  env: {\n    auth_username: process.env.AUTH_USERNAME,\n    auth_password: process.env.AUTH_PASSWORD,\n    okta_domain: process.env.REACT_APP_OKTA_DOMAIN,\n    okta_client_id: process.env.REACT_APP_OKTA_CLIENTID,\n  },\n})\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"Custom-Command-for-Okta-Authentication",children:"Custom Command for Okta Authentication"}),"\n",(0,s.jsx)(n.p,{children:"There are two ways you can authenticate to Okta:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsxs)(n.a,{href:"#Login-with-cyorigin",children:["Login with ",(0,s.jsx)(n.code,{children:"cy.origin()"})]})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#Programmatic-Login",children:"Programmatic Access"})}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"Login-with-cyorigin",children:["Login with ",(0,s.jsx)(n.code,{children:"cy.origin()"})]}),"\n",(0,s.jsxs)(n.p,{children:["We'll write a custom command called ",(0,s.jsx)(n.code,{children:"loginByOkta"})," to perform a login to\nOkta. This command will use\n",(0,s.jsx)(n.a,{href:"/api/commands/origin",children:(0,s.jsx)(n.code,{children:"cy.origin()"})})," to"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Navigate to the Okta origin"}),"\n",(0,s.jsx)(n.li,{children:"Input user credentials"}),"\n",(0,s.jsxs)(n.li,{children:["Sign in and redirect back to the\n",(0,s.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-realworld-app",children:"Cypress Real World App"})]}),"\n",(0,s.jsxs)(n.li,{children:["Cache the results with ",(0,s.jsx)(n.a,{href:"/api/commands/session",children:(0,s.jsx)(n.code,{children:"cy.session()"})})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:'title="cypress/support/auth-provider-commands/okta.ts"',children:"// Okta\nconst loginToOkta = (username: string, password: string) => {\n  Cypress.log({\n    displayName: 'OKTA LOGIN',\n    message: [`\ud83d\udd10 Authenticating | ${username}`],\n    autoEnd: false,\n  })\n\n  cy.visit('/')\n  cy.origin(\n    Cypress.env('okta_domain'),\n    { args: { username, password } },\n    ({ username, password }) => {\n      cy.get('input[name=\"identifier\"]').type(username)\n      cy.get('input[name=\"credentials.passcode\"]').type(password, {\n        log: false,\n      })\n      cy.get('[type=\"submit\"]').click()\n    }\n  )\n\n  cy.get('[data-test=\"sidenav-username\"]').should('contain', username)\n}\n// right now our custom command is light. More on this later!\nCypress.Commands.add('loginByOkta', (username: string, password: string) => {\n  return loginToOkta(username, password)\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now, we can use our ",(0,s.jsx)(n.code,{children:"loginByOkta"})," command in the test. Below is our test to\nlogin as a user via Okta and run a few basic sanity checks."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The\n",(0,s.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/cypress/tests/ui-auth-providers/okta.spec.ts",children:"runnable version of this test"}),"\nis in the ",(0,s.jsx)(o,{name:"github",inline:"true",contentType:"rwa"}),"."]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:'title="auth.cy.js"',children:"describe('Okta', function () {\n  beforeEach(function () {\n    cy.task('db:seed')\n    cy.loginByOkta(Cypress.env('okta_username'), Cypress.env('okta_password'))\n  })\n\n  it('verifies signed in user does not have a bank account', function () {\n    cy.get('[data-test=\"sidenav-bankaccounts\"]').click()\n    cy.get('[data-test=\"empty-list-header\"]').should('be.visible')\n  })\n})\n"})}),"\n",(0,s.jsx)(a,{src:"https://vimeo.com/789093739",title:"Okta authentication with cy.origin()"}),"\n",(0,s.jsxs)(n.p,{children:["Lastly, we can refactor our login command to take advantage of\n",(0,s.jsx)(n.a,{href:"/api/commands/session",children:(0,s.jsx)(n.code,{children:"cy.session()"})})," to store our logged in user so we don't\nhave to reauthenticate with everything test."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:'title="cypress/support/commands.js"',children:"Cypress.Commands.add('loginByOkta', (username: string, password: string) => {\n  cy.session(\n    `okta-${username}`,\n    () => {\n      return loginToOkta(username, password)\n    },\n    {\n      validate() {\n        cy.visit('/')\n        cy.get('[data-test=\"sidenav-username\"]').should('contain', username)\n      },\n    }\n  )\n})\n"})}),"\n",(0,s.jsx)(a,{src:"https://vimeo.com/789093688",title:"Okta authentication with cy.session()"}),"\n",(0,s.jsx)(n.h3,{id:"Programmatic-Login",children:"Programmatic Login"}),"\n",(0,s.jsxs)(n.p,{children:["Next, we'll write a command named ",(0,s.jsx)(n.code,{children:"loginByOktaApi"})," to perform a programmatic\nlogin into Okta and set an item in ",(0,s.jsx)(n.code,{children:"localStorage"})," with the\nauthenticated users details, which we'll use in our application code to verify\nwe are authenticated under test."]}),"\n",(0,s.jsxs)(n.p,{children:["In order to make sure this is enabled inside the ",(0,s.jsx)(o,{name:"github",inline:"true",contentType:"rwa"}),",\nset the ",(0,s.jsx)(n.code,{children:"REACT_APP_OKTA_PROGRAMMATIC"})," environment variable to ",(0,s.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"loginByOktaApi"})," command will execute the following steps:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Use the\n",(0,s.jsx)(n.a,{href:"https://developer.okta.com/docs/reference/api/authn/",children:"Okta Authentication API"}),"\nto perform the programmatic login."]}),"\n",(0,s.jsxs)(n.li,{children:["Use an instance of ",(0,s.jsx)(n.code,{children:"OktaAuth"})," client from the\n",(0,s.jsx)(n.a,{href:"https://github.com/okta/okta-auth-js",children:"Okta Auth SDK"})," to gain the ",(0,s.jsx)(n.code,{children:"id_token"}),"\nonce a session token is obtained."]}),"\n",(0,s.jsxs)(n.li,{children:["Finally the ",(0,s.jsx)(n.code,{children:"oktaCypress"})," localStorage item is set with the ",(0,s.jsx)(n.code,{children:"access token"}),"\nand user profile."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:'title="cypress/support/commands.js"',children:"import { OktaAuth } from '@okta/okta-auth-js'\n\n// Okta\nCypress.Commands.add('loginByOktaApi', (username, password) => {\n  cy.request({\n    method: 'POST',\n    url: `https://${Cypress.env('okta_domain')}/api/v1/authn`,\n    body: {\n      username,\n      password,\n    },\n  }).then(({ body }) => {\n    const user = body._embedded.user\n    const config = {\n      issuer: `https://${Cypress.env('okta_domain')}/oauth2/default`,\n      clientId: Cypress.env('okta_client_id'),\n      redirectUri: 'http://localhost:3000/implicit/callback',\n      scopes: ['openid', 'email', 'profile'],\n    }\n\n    const authClient = new OktaAuth(config)\n\n    return authClient.token\n      .getWithoutPrompt({ sessionToken: body.sessionToken })\n      .then(({ tokens }) => {\n        const userItem = {\n          token: tokens.accessToken.value,\n          user: {\n            sub: user.id,\n            email: user.profile.login,\n            given_name: user.profile.firstName,\n            family_name: user.profile.lastName,\n            preferred_username: user.profile.login,\n          },\n        }\n\n        window.localStorage.setItem('oktaCypress', JSON.stringify(userItem))\n\n        log.snapshot('after')\n        log.end()\n      })\n  })\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["With our Okta app setup properly in Okta Developer console, necessary\nenvironment variables in place, and our ",(0,s.jsx)(n.code,{children:"loginByOktaApi"})," command implemented, we\nwill be able to authenticate with Okta while our app is under test. Below is a\ntest to login as a user via Okta, complete the onboarding\nprocess and logout."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:'title="auth.cy.js"',children:"describe('Okta', function () {\n  beforeEach(function () {\n    cy.task('db:seed')\n    cy.loginByOktaApi(\n      Cypress.env('auth_username'),\n      Cypress.env('auth_password')\n    )\n  })\n\n  it('shows onboarding', function () {\n    cy.contains('Get Started').should('be.visible')\n  })\n})\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The\n",(0,s.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/cypress/tests/ui-auth-providers/okta.spec.ts",children:"runnable version of this test"}),"\nis in the ",(0,s.jsx)(o,{name:"github",inline:"true",contentType:"rwa"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"Adapting-an-Okta-App-for-Testing",children:"Adapting an Okta App for Testing"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)("strong",{children:"Note"}),(0,s.jsx)(n.p,{children:"The previous section focused on the programmatic Okta authentication practice\nwithin Cypress tests. To use this practice, it's assumed you are testing an app\nappropriately built or adapted to use Okta."}),(0,s.jsxs)(n.p,{children:["Unlike programmatic login, authenticating with\n",(0,s.jsx)(n.a,{href:"/api/commands/origin",children:(0,s.jsx)(n.code,{children:"cy.origin()"})})," doesn't require adapting the application\nto work. This step is only needed if implementing programmatic login."]}),(0,s.jsx)(n.p,{children:"The following sections provides guidance on building or adapting an app to use\nOkta authentication."})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(o,{name:"github",inline:"true",contentType:"rwa"})," is\nused and provides configuration and runnable code for both the React SPA and the\nExpress back end."]}),"\n",(0,s.jsxs)(n.p,{children:["The front end uses the ",(0,s.jsx)(n.a,{href:"https://github.com/okta/okta-react",children:"Okta React SDK"})," for\nReact Single Page Applications (SPA), which uses the\n",(0,s.jsx)(n.a,{href:"https://github.com/okta/okta-auth-js",children:"Okta Auth SDK"})," underneath. The back end\nuses the\n",(0,s.jsx)(n.a,{href:"https://github.com/okta/okta-oidc-js/tree/master/packages/jwt-verifier",children:"Okta JWT Verifier for Node.js"}),"\nto validate JWTs from ",(0,s.jsx)(n.a,{href:"https://okta.com",children:"Okta"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.code,{children:"yarn dev:okta"})," command when starting the\n",(0,s.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-realworld-app",children:"Cypress Real World App"}),"."]})}),"\n",(0,s.jsx)(n.h4,{id:"Adapting-the-back-end",children:"Adapting the back end"}),"\n",(0,s.jsxs)(n.p,{children:["In order to validate API requests from the frontend, we install\n",(0,s.jsx)(n.a,{href:"https://github.com/okta/okta-oidc-js/tree/master/packages/jwt-verifier",children:"Okta JWT Verifier for Node.js"}),"\nand configure it using the Okta Domain and Client ID provided after\n",(0,s.jsx)(n.a,{href:"https://developer.okta.com/docs/app/sign-into-spa/react/create-okta-application/",children:"Creating an Okta application"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:'title="backend/helpers.ts"',children:"import OktaJwtVerifier from '@okta/jwt-verifier'\n\ndotenv.config()\n\n// Okta Validate the JWT Signature\nconst oktaJwtVerifier = new OktaJwtVerifier({\n  issuer: `https://${process.env.REACT_APP_OKTA_DOMAIN}/oauth2/default`,\n  clientId: process.env.REACT_APP_OKTA_CLIENTID,\n  assertClaims: {\n    aud: 'api://default',\n    cid: process.env.REACT_APP_OKTA_CLIENTID,\n  },\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Next, we'll define an Express middleware function to be use in our routes to\nverify the ",(0,s.jsx)(n.a,{href:"https://okta.com",children:"Okta"})," JWT sent by the front end API requests as\nthe ",(0,s.jsx)(n.code,{children:"Bearer"})," token."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:'title="backend/helpers.ts"',children:"// ...\n\nexport const verifyOktaToken = (req, res, next) => {\n  const bearerHeader = req.headers['authorization']\n\n  if (bearerHeader) {\n    const bearer = bearerHeader.split(' ')\n    const bearerToken = bearer[1]\n\n    oktaJwtVerifier\n      .verifyAccessToken(bearerToken, 'api://default')\n      .then((jwt) => {\n        // the token is valid\n        req.user = {\n          // @ts-ignore\n          sub: jwt.sub,\n        }\n\n        return next()\n      })\n      .catch((err) => {\n        // a validation failed, inspect the error\n        console.log('error', err)\n      })\n  } else {\n    res.status(401).send({\n      error: 'Unauthorized',\n    })\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Once this helper is defined, we can use it globally to apply to all routes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:'title="backend/app.ts"',children:"// initial imports ...\nimport { verifyOktaToken } from './helpers'\n\n// ...\n\nif (process.env.REACT_APP_OKTA) {\n  app.use(verifyOktaToken)\n}\n\n// routes ...\n"})}),"\n",(0,s.jsx)(n.h4,{id:"Adapting-the-front-end",children:"Adapting the front end"}),"\n",(0,s.jsxs)(n.p,{children:["We need to update our front end React app to allow for authentication with\nOkta using the\n",(0,s.jsx)(n.a,{href:"https://github.com/okta/okta-react",children:"Okta React SDK"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["First, we create a ",(0,s.jsx)(n.code,{children:"AppOkta.tsx"})," container, based off of the ",(0,s.jsx)(n.code,{children:"App.tsx"}),"\ncomponent."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"AppOkta.tsx"})," uses the ",(0,s.jsx)(n.code,{children:"useOktaAuth"})," React Hook, replaces the Sign Up and Sign\nIn routes with a ",(0,s.jsx)(n.code,{children:"SecureRoute"})," and ",(0,s.jsx)(n.code,{children:"LoginCallback"})," and wraps the component with\nthe ",(0,s.jsx)(n.code,{children:"withOktaAuth"})," higher order component (HOC)."]}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.code,{children:"useEffect"})," hook is added to get the access token for the authenticated user\nand send an ",(0,s.jsx)(n.code,{children:"OKTA"})," event with the ",(0,s.jsx)(n.code,{children:"user"})," and ",(0,s.jsx)(n.code,{children:"token"})," objects to work with the\nexisting authentication layer (",(0,s.jsx)(n.code,{children:"authMachine.ts"}),"). We define a route for\n",(0,s.jsx)(n.code,{children:"implicit/callback"})," to render the ",(0,s.jsx)(n.code,{children:"LoginCallback"})," component and a ",(0,s.jsx)(n.code,{children:"SecureRoute"}),"\nfor the root path."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:'title="src/containers/AppOkta.tsx"',children:"// initial imports ...\nimport {\n  LoginCallback,\n  SecureRoute,\n  useOktaAuth,\n  withOktaAuth,\n} from '@okta/okta-react'\n\n// ...\n\nconst AppOkta: React.FC = () => {\n  const { authState, oktaAuth } = useOktaAuth()\n\n  // ...\n\n  useEffect(() => {\n    if (authState.isAuthenticated) {\n      oktaAuth.getUser().then((user) => {\n        authService.send('OKTA', { user, token: oktaAuthState.accessToken })\n      })\n    }\n  }, [authState, oktaAuth])\n\n  // ...\n\n  return (\n    <div className={classes.root}>\n      // ...\n      {authState.matches('unauthorized') && (\n        <>\n          <Route path=\"/implicit/callback\" component={LoginCallback} />\n          <SecureRoute exact path=\"/\" />\n        </>\n      )}\n      // ...\n    </div>\n  )\n}\n\nexport default withOktaAuth(AppOkta)\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["The full\n",(0,s.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/src/containers/AppOkta.tsx",children:"AppOkta.tsx component"}),"\nis in the"]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(o,{name:"github",inline:"true",contentType:"rwa"}),"."]})]}),"\n",(0,s.jsxs)(n.p,{children:["Next, we update our entry point (",(0,s.jsx)(n.code,{children:"index.tsx"}),") to wrap our application with the\n",(0,s.jsx)(n.code,{children:"<Security>"})," component from the\n",(0,s.jsx)(n.a,{href:"https://github.com/okta/okta-react",children:"Okta React SDK"})," providing ",(0,s.jsx)(n.code,{children:"issuer"}),",\n",(0,s.jsx)(n.code,{children:"clientId"})," from our Okta application, along with a ",(0,s.jsx)(n.code,{children:"redirectUri"})," as props using\nthe ",(0,s.jsx)(n.code,{children:"REACT_APP_OKTA"})," variables are defined in our ",(0,s.jsx)(n.code,{children:".env"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:'title="src/index.tsx"',children:"// initial imports ...\nimport { OktaAuth } from '@okta/okta-auth-js'\nimport { Security } from '@okta/okta-react'\nimport AppOkta from './containers/AppOkta'\n\n// ...\n\nconst oktaAuth = new OktaAuth({\n  issuer: `https://${process.env.REACT_APP_OKTA_DOMAIN}/oauth2/default`,\n  clientId: process.env.REACT_APP_OKTA_CLIENTID,\n  redirectUri: window.location.origin + '/implicit/callback',\n})\n\nReactDOM.render(\n  <Router history={history}>\n    <ThemeProvider theme={theme}>\n      {process.env.REACT_APP_OKTA ? (\n        <Security oktaAuth={oktaAuth}>\n          <AppOkta />\n        </Security>\n      ) : (\n        <App />\n      )}\n    </ThemeProvider>\n  </Router>,\n  document.getElementById('root')\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["An update to our\n",(0,s.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/src/containers/AppOkta.tsx",children:"AppOkta.tsx component"}),"\nis needed to conditionally use the ",(0,s.jsx)(n.code,{children:"oktaCypress"})," localStorage item."]}),"\n",(0,s.jsxs)(n.p,{children:["In the code below, we conditionally apply a ",(0,s.jsx)(n.code,{children:"useEffect"})," block based on being\nunder test with Cypress (using ",(0,s.jsx)(n.code,{children:"window.Cypress"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["In addition, we will update the export to be wrapped with the ",(0,s.jsx)(n.code,{children:"withOktaAuth"}),"\nhigher order component only if we are not under test in Cypress. This allows our\napplication to work with the ",(0,s.jsx)(n.a,{href:"https://okta.com",children:"Okta"})," redirect login flow in\ndevelopment/production but not when under test in Cypress."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:'title="src/containers/AppOkta.tsx"',children:'// initial imports ...\nimport { LoginCallback, SecureRoute, useOktaAuth, withOktaAuth } from "@okta/okta-react";\n\n// ...\n\nconst AppOkta: React.FC = () => {\n  const { authState, oktaAuth } = useOktaAuth();\n\n  // ...\n\n  // If under test in Cypress, get credentials from "oktaCypress" localstorage item and send event to our state management to log the user into the SPA\n  if (window.Cypress) {\n    useEffect(() => {\n      const okta = JSON.parse(localStorage.getItem("oktaCypress")!);\n      authService.send("OKTA", {\n        user: okta.user,\n        token: okta.token,\n      });\n    }, []);\n  } else {\n    useEffect(() => {\n      if (authState.isAuthenticated) {\n        oktaAuth.getUser().then((user) => {\n          authService.send("OKTA", { user, token: oktaAuthState.accessToken });\n        });\n      }\n    }, [authState, oktaAuth]);\n  }\n\n  // ...\n\n  return (\n    <div className={classes.root}>\n\n      // ...\n\n      {authState.matches("unauthorized") && (\n        <>\n          <Route path="/implicit/callback" component={LoginCallback} />\n          <SecureRoute exact path="/" />\n        </>\n      )}\n\n      // ...\n    </div>\n  );\n};\n\n// Conditional export wrapped with `withOktaAuth` if we are not under test in Cypress\nlet appOkta = window.Cypress ? AppOkta : withOktaAuth(AppOkta);\nexport default appOkta;\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>o});var s=t(7294);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);