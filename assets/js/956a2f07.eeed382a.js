"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[916],{1209:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=s(5893),i=s(1151);const r={title:"Custom Queries",sidebar_position:30},o=void 0,c={id:"api/cypress-api/custom-queries",title:"Custom Queries",description:"Starting in Cypress 12, Cypress comes with its own API for creating custom",source:"@site/docs/api/cypress-api/custom-queries.mdx",sourceDirName:"api/cypress-api",slug:"/api/cypress-api/custom-queries",permalink:"/api/cypress-api/custom-queries",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/cypress-api/custom-queries.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",sidebarPosition:30,frontMatter:{title:"Custom Queries",sidebar_position:30},sidebar:"api",previous:{title:"Custom Commands",permalink:"/api/cypress-api/custom-commands"},next:{title:"Cypress.arch",permalink:"/api/cypress-api/arch"}},a={},l=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:3},{value:"Arguments",id:"Arguments",level:3},{value:"Examples",id:"Examples",level:2},{value:"<code>.focused()</code>",id:"focused",level:3},{value:"The outer function",id:"The-outer-function",level:4},{value:"The inner function",id:"The-inner-function",level:4},{value:"Overwriting Existing Queries",id:"Overwriting-Existing-Queries",level:3},{value:"Adding alias support to <code>.contains()</code>",id:"Adding-alias-support-to-contains",level:4},{value:"Validation",id:"Validation",level:2},{value:"Notes",id:"Notes",level:2},{value:"Best Practices",id:"Best-Practices",level:3},{value:"1. Don&#39;t make everything a custom query",id:"1-Dont-make-everything-a-custom-query",level:4},{value:"2. Don&#39;t overcomplicate things",id:"2-Dont-overcomplicate-things",level:4},{value:"History",id:"History",level:2},{value:"See also",id:"See-also",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components},{Icon:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Icon",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Starting in Cypress 12, Cypress comes with its own API for creating custom\nqueries. The built in Cypress queries use the very same API that's explained\nbelow."}),"\n",(0,t.jsxs)(n.p,{children:["Queries are a type of command, used for ",(0,t.jsx)(n.em,{children:"querying"})," the state of your\napplication. They are different from other commands in that they follow three\nimportant rules:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Queries are ",(0,t.jsx)(n.em,{children:"synchronous."})," They do not return or await promises."]}),"\n",(0,t.jsxs)(n.li,{children:["Queries are ",(0,t.jsx)(n.em,{children:"retriable."})," Once you return the inner function, Cypress takes\ncontrol, handling retries on your behalf."]}),"\n",(0,t.jsxs)(n.li,{children:["Queries are ",(0,t.jsx)(n.em,{children:"idempotent."})," Once you return the inner function, Cypress will\ninvoke it repeatedly. Invoking the inner function multiple times must not\nchange the state of your application."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["With these rules, queries are simple to write and extremely powerful. They are\nthe building blocks on which Cypress' API is built. To learn more about the\ndifferences between commands and queries, see our\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/retry-ability#Only-queries-are-retried",children:"guide on Retry-ability"}),"."]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:["If you want to chain together existing Cypress commands as a shortcut, you\nprobably want to write a ",(0,t.jsx)(n.a,{href:"/api/cypress-api/custom-commands",children:"custom command"}),"\ninstead."]}),(0,t.jsx)(n.p,{children:"You'll also want to write a command instead of a query if your method needs to\nbe asynchronous, or if it can be called only once."})]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["We recommend defining queries in your ",(0,t.jsx)(n.code,{children:"cypress/support/commands.js"})," file, since\nit is loaded before any test files are evaluated via an import statement in the\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/writing-and-organizing-tests#Support-file",children:"supportFile"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"Syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"Cypress.Commands.addQuery(name, callbackFn)\nCypress.Commands.overwriteQuery(name, callbackFn)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"Usage",children:"Usage"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(s,{name:"check-circle",color:"green"})," ",(0,t.jsx)(n.strong,{children:"Correct Usage"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"Cypress.Commands.addQuery('getById', function (id) {\n  return (subject) => newSubject\n})\n\nCypress.Commands.overwriteQuery('get', function (originalFn, ...args) {\n  return originalFn.apply(this, args)\n})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"Arguments",children:"Arguments"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(s,{name:"angle-right"})," ",(0,t.jsxs)(n.strong,{children:["name ",(0,t.jsx)(n.em,{children:"(String)"})]})]}),"\n",(0,t.jsx)(n.p,{children:"The name of the query you're adding."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(s,{name:"angle-right"})," ",(0,t.jsxs)(n.strong,{children:["callbackFn ",(0,t.jsx)(n.em,{children:"(Function)"})]})]}),"\n",(0,t.jsx)(n.p,{children:"Pass a function that receives the arguments passed to the query."}),"\n",(0,t.jsx)(n.p,{children:"This outer function is invoked once. It should return a function that takes a\nsubject and returns a new subject; this inner function might be called multiple\ntimes."}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["The query API relies on ",(0,t.jsx)(n.code,{children:"this"})," to set timeouts, which means that ",(0,t.jsx)(n.code,{children:"callbackFn"}),"\nshould always use ",(0,t.jsx)(n.code,{children:"function () {}"})," and not be an arrow function (",(0,t.jsx)(n.code,{children:"() => {}"}),")."]})}),"\n",(0,t.jsx)(n.h2,{id:"Examples",children:"Examples"}),"\n",(0,t.jsx)(n.h3,{id:"focused",children:(0,t.jsx)(n.code,{children:".focused()"})}),"\n",(0,t.jsxs)(n.p,{children:["The callback function can be thought of as two separate parts. The ",(0,t.jsx)(n.em,{children:"outer\nfunction"}),", which is invoked once, where you perform setup and state management,\nand the ",(0,t.jsx)(n.em,{children:"query function"}),", which might be called repeatedly."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's look at an example. This is actual Cypress code - how ",(0,t.jsx)(n.code,{children:".focused()"})," is\nimplemented internally, with some small adjustments to make it work from a\nsupport file. The only thing omitted here for simplicity is the TypeScript\ndefinitions."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"Cypress.Commands.addQuery('focused2', function focused2(options = {}) {\n  const log = options.log !== false && Cypress.log({ timeout: options.timeout })\n\n  this.set('timeout', options.timeout)\n\n  return () => {\n    let $el = cy.getFocused()\n\n    log &&\n      cy.state('current') === this &&\n      log.set({\n        $el,\n        consoleProps: () => {\n          return {\n            Yielded: $el?.length ? $el[0] : '--nothing--',\n            Elements: $el != null ? $el.length : 0,\n          }\n        },\n      })\n\n    if (!$el) {\n      $el = cy.$$(null)\n      $el.selector = 'focused'\n    }\n\n    return $el\n  }\n})\n"})}),"\n",(0,t.jsx)(n.h4,{id:"The-outer-function",children:"The outer function"}),"\n",(0,t.jsx)(n.p,{children:"The outer function is called once each time test uses the query. It performs\nsetup and state management:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function focused2(options = {}) {\n  const log = options.log !== false && Cypress.log({ timeout: options.timeout })\n\n  this.set('timeout', options.timeout)\n\n  return () => { ... } // Inner function\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let's look at this piece by piece."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function focused2(options = {}) { ... }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Cypress passes the outer function whatever arguments the user calls it with; no\nprocessing or validation is done on the user's arguments. In our case,\n",(0,t.jsx)(n.code,{children:".focused2()"})," accepts one optional argument, ",(0,t.jsx)(n.code,{children:"options"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"If you wanted to validate the incoming arguments, you might add something like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"if (options === null || !_.isPlainObject(options)) {\n  const err = `cy.root() requires an \\`options\\` object. You passed in: \\`{options}\\``\n  throw new TypeError(err)\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"This is a general pattern: when something goes wrong, queries just throw an\nerror. Cypress will handle displaying the error in the Command Log."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const log = options.log !== false && Cypress.log({ timeout: options.timeout })\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If the user has not set ",(0,t.jsx)(n.code,{children:"{ log: false }"}),", we create a new ",(0,t.jsx)(n.code,{children:"Cypress.log()"}),"\ninstance. See ",(0,t.jsx)(n.a,{href:"/api/cypress-api/cypress-log",children:(0,t.jsx)(n.code,{children:"Cypress.log()"})})," for more\ninformation."]}),"\n",(0,t.jsxs)(n.p,{children:["This line is setup code, so it lives in the outer function - we only want it to\nrun once, creating the log message when Cypress first begins executing this\nquery. We hold onto a reference to ",(0,t.jsx)(n.code,{children:"Log"})," instance. We'll update it later with\nadditional details when the inner function executes."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"this.set('timeout', options.timeout)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When defining ",(0,t.jsx)(n.code,{children:"focused2()"}),", it's important to note that we used ",(0,t.jsx)(n.code,{children:"function"}),",\nrather than an arrow function. This gives us access to ",(0,t.jsx)(n.code,{children:"this"}),", where we can set\nthe ",(0,t.jsx)(n.code,{children:"timeout"}),". If you don't call ",(0,t.jsx)(n.code,{children:"this.set('timeout')"}),", or call it with ",(0,t.jsx)(n.code,{children:"null"}),"\nor ",(0,t.jsx)(n.code,{children:"undefined"}),", your query will use the\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/introduction-to-cypress#Timeouts",children:"default timeout"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"  return () => { ... }\n"})}),"\n",(0,t.jsx)(n.h4,{id:"The-inner-function",children:"The inner function"}),"\n",(0,t.jsx)(n.p,{children:"The outer function's return value is the inner function."}),"\n",(0,t.jsx)(n.p,{children:"The inner function is called any number of times. It's first invoked repeatedly\nuntil it passes or the query times out; it can then be invoked again later to\ndetermine the subject of future commands, or when the user retrieves an alias."}),"\n",(0,t.jsxs)(n.p,{children:["The inner function is called with one argument: the previous subject. Cypress\nperforms no validation on this - it could be any type, including ",(0,t.jsx)(n.code,{children:"null"})," or\n",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:".focused2()"})," ignores any previous subject, but many queries do not - for\nexample, ",(0,t.jsx)(n.code,{children:".contains()"})," accepts only certain types of subjects. You can use\nCypress' builtin ",(0,t.jsx)(n.code,{children:"ensures"})," functions, as ",(0,t.jsx)(n.code,{children:".contains()"})," does:\n",(0,t.jsx)(n.code,{children:"cy.ensureSubjectByType(subject, ['optional', 'element', 'window', 'document'], this)"})]}),"\n",(0,t.jsxs)(n.p,{children:["or you can perform your own validation and simply throw an error:\n",(0,t.jsx)(n.code,{children:"if (!_.isString(subject)) { throw new Error('MyCustomCommand only accepts strings as a subject!') }"})]}),"\n",(0,t.jsx)(n.p,{children:"If the inner function throws an error, Cypress will retry it after a short delay\nuntil it either passes or the query times out. This is the core of Cypress'\nretry-ability, and the guarantees it provides that your tests interact with the\npage as a user would."}),"\n",(0,t.jsxs)(n.p,{children:["Looking back to our ",(0,t.jsx)(n.code,{children:".focused2()"})," example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"return () => {\n  let $el = cy.getFocused()\n\n  log &&\n    cy.state('current') === this &&\n    log.set({\n      $el,\n      consoleProps: () => {\n        return {\n          Yielded: $el?.length ? $el[0] : '--nothing--',\n          Elements: $el != null ? $el.length : 0,\n        }\n      },\n    })\n\n  if (!$el) {\n    $el = cy.$$(null)\n    $el.selector = 'focused'\n  }\n\n  return $el\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Piece by piece again:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"let $el = cy.getFocused()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This is the 'business end' of ",(0,t.jsx)(n.code,{children:".focused2()"})," - finding the element on the page\nthat's currently focused."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"    log && cy.state('current') === this && log.set({...})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"log"})," is defined (ie, the user did not pass in ",(0,t.jsx)(n.code,{children:"{ log: false }"}),"), and this\nquery is the current command, we update the log message with new information,\nsuch as ",(0,t.jsx)(n.code,{children:"$el"})," (the subject we're about to yield from this query), and the\n",(0,t.jsx)(n.code,{children:"consoleProps"}),", a function that\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/open-mode#Console-output",children:"returns console output"})," for\nthe user."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"if (!$el) {\n  $el = cy.$$(null)\n  $el.selector = 'focused'\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"If there's no focused element on the page, we create an empty jquery object."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"return $el\n"})}),"\n",(0,t.jsx)(n.p,{children:"The return value of the inner function becomes the new subject for the next\ncommand."}),"\n",(0,t.jsxs)(n.p,{children:["With this return value in hand, Cypress verifies any upcoming assertions, such\nas user's ",(0,t.jsx)(n.code,{children:".should()"})," commands, or if there are none, the default implicit\nassertions that the subject should exist."]}),"\n",(0,t.jsx)(n.h3,{id:"Overwriting-Existing-Queries",children:"Overwriting Existing Queries"}),"\n",(0,t.jsx)(n.p,{children:"You can also modify the behavior of existing Cypress queries. This is useful to\nextend the functionality of builtin commands."}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Cypress.Commands.overwriteQuery"})," can only overwrite queries, not other\ncommands. If you want to modify the behavior of a non-query command, you'll need\nto use ",(0,t.jsx)(n.a,{href:"/api/cypress-api/custom-commands",children:(0,t.jsx)(n.code,{children:"Cypress.Commands.overwrite"})})," instead."]})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Remember that query functions rely on ",(0,t.jsx)(n.code,{children:"this"})," - when you invoke ",(0,t.jsx)(n.code,{children:"originalFn"}),", be\nsure to use ",(0,t.jsx)(n.code,{children:".call"})," or ",(0,t.jsx)(n.code,{children:".apply"}),"."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"Cypress.Commands.overwriteQuery('get', function (originalFn, ...args) {\n  console.log('get called with args:', args)\n\n  const innerFn = originalFn.apply(this, args)\n\n  return (subject) => {\n    console.log('get inner function called with subject:', subject)\n\n    return innerFn(subject)\n  }\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"originalFn"})," is the function originally passed to\n",(0,t.jsx)(n.code,{children:"Cypress.Commands.addQuery"})," - it is a ",(0,t.jsx)(n.strong,{children:"function that returns a function."})," This\ngives you access to both the outer arguments (before you call ",(0,t.jsx)(n.code,{children:"originalFn"}),") and\nthe inner function (the return value of ",(0,t.jsx)(n.code,{children:"originalFn"}),"), giving you a great deal\nof control over how the query executes."]}),"\n",(0,t.jsxs)(n.h4,{id:"Adding-alias-support-to-contains",children:["Adding alias support to ",(0,t.jsx)(n.code,{children:".contains()"})]}),"\n",(0,t.jsxs)(n.p,{children:["In this example, ",(0,t.jsx)(n.code,{children:"cy.contains()"})," is extended to support querying for aliased\nsubjects, like ",(0,t.jsx)(n.code,{children:"cy.contains('@foo')"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"Cypress.Commands.overwriteQuery(\n  'contains',\n  function (originalFn, filter, text, userOptions) {\n    if (_.isString(filter) && filter[0] === '@') {\n      let alias = cy.state('aliases')[filter.slice(1)]\n      let subject = cy.getSubjectFromChain(alias?.subjectChain)\n      filter = subject\n    }\n\n    if (_.isString(text) && text[0] === '@') {\n      let alias = cy.state('aliases')[text.slice(1)]\n      let subject = cy.getSubjectFromChain(alias?.subjectChain)\n      text = subject\n    }\n\n    return originalFn.call(this, filter, text, userOptions)\n  }\n)\n\ncy.wrap('li').as('element')\ncy.wrap('asdf 1').as('content')\n\ncy.contains('@element', '@content')\n"})}),"\n",(0,t.jsx)(n.h2,{id:"Validation",children:"Validation"}),"\n",(0,t.jsx)(n.p,{children:"As noted in the examples above, Cypress performs very little validation around\nqueries - it is the responsibility of each implementation to ensure that its\narguments and subject are of the correct type."}),"\n",(0,t.jsx)(n.p,{children:"Cypress has several builtin 'ensures' which can be helpful in this regard:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cy.ensureSubjectByType(subject, types, this)"}),": Accepts an array with any of\nthe strings ",(0,t.jsx)(n.code,{children:"optional"}),", ",(0,t.jsx)(n.code,{children:"element"}),", ",(0,t.jsx)(n.code,{children:"document"}),", or ",(0,t.jsx)(n.code,{children:"window"}),".\n",(0,t.jsx)(n.code,{children:"ensureSubjectByType"})," is how\n",(0,t.jsxs)(n.a,{href:"/api/cypress-api/custom-commands#Validations",children:[(0,t.jsx)(n.code,{children:"prevSubject"})," validation"]})," is\nimplemented for commmands."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cy.ensureElement(subject, queryName)"}),": Ensure that the passed in ",(0,t.jsx)(n.code,{children:"subject"})," is\none or more DOM elements."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cy.ensureWindow(subject)"}),": Ensure that the passed in ",(0,t.jsx)(n.code,{children:"subject"})," is a ",(0,t.jsx)(n.code,{children:"window"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cy.ensureDocument(subject)"}),": Ensure that the passed in ",(0,t.jsx)(n.code,{children:"subject"})," is a\n",(0,t.jsx)(n.code,{children:"document"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cy.ensureAttached(subject, queryName)"}),": Ensure that DOM element(s) are\nattached to the page."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cy.ensureNotDisabled(subject)"}),": Ensure that form elements aren't disabled."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cy.ensureVisibility(subject)"}),": Ensure that a DOM element is visible on the\npage."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"There's nothing special about these functions - they simply validate their\nargument and throw an error if the check fails. You can throw errors of any type\nat any time inside your queries - Cypress will catch and handle it\nappropriately."}),"\n",(0,t.jsx)(n.h2,{id:"Notes",children:"Notes"}),"\n",(0,t.jsx)(n.h3,{id:"Best-Practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h4,{id:"1-Dont-make-everything-a-custom-query",children:"1. Don't make everything a custom query"}),"\n",(0,t.jsxs)(n.p,{children:["Custom queries work well when you're needing to describe behavior that's\ndesirable across ",(0,t.jsx)(n.strong,{children:"all of your tests"}),". Examples would be ",(0,t.jsx)(n.code,{children:"cy.findBreadcrumbs()"}),"\nor ",(0,t.jsx)(n.code,{children:"cy.getLoginForm()"}),". These are specific to your application and can be used\neverywhere."]}),"\n",(0,t.jsxs)(n.p,{children:["However, this pattern can be used and abused. Let's not forget - writing Cypress\ntests is ",(0,t.jsx)(n.strong,{children:"JavaScript"}),", and it's often more efficient to write a function for\nrepeatable behavior than it is to implement a custom query."]}),"\n",(0,t.jsx)(n.h4,{id:"2-Dont-overcomplicate-things",children:"2. Don't overcomplicate things"}),"\n",(0,t.jsx)(n.p,{children:"Every custom query you write is generally an abstraction for locating elements\non the page. That means you and your team members exert much more mental effort\nto understand what your custom command does."}),"\n",(0,t.jsx)(n.p,{children:"There's no reason to add this level of complexity when the builtin queries are\nalready quite expressive and powerful."}),"\n",(0,t.jsx)(n.p,{children:"Don't do things like:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(s,{name:"exclamation-triangle",color:"red"})," ",(0,t.jsx)(n.code,{children:"cy.getButton()"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(s,{name:"exclamation-triangle",color:"red"})," ",(0,t.jsx)(n.code,{children:".getFirstTableRow()"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Both of these are wrapping ",(0,t.jsx)(n.code,{children:"cy.get(selector)"}),". It's completely unnecessary. Just\ncall ",(0,t.jsx)(n.code,{children:".get('button')"})," or ",(0,t.jsx)(n.code,{children:".get('tr:first')"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Testing in Cypress is all about ",(0,t.jsx)(n.strong,{children:"readability"})," and ",(0,t.jsx)(n.strong,{children:"simplicity"}),". You don't\nhave to do that much actual programming to get a lot done. You also don't need\nto worry about keeping your code as DRY as possible. Test code serves a\ndifferent purpose than app code. Understandability and debuggability should be\nprioritized above all else."]}),"\n",(0,t.jsx)(n.p,{children:"Try not to overcomplicate things and create too many abstractions."}),"\n",(0,t.jsx)(n.h2,{id:"History",children:"History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Version"}),(0,t.jsx)(n.th,{children:"Changes"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/app/references/changelog#12-6-0",children:"12.6.0"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"overrideQuery"})," API added"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/app/references/changelog#12-0-0",children:"12.0.0"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"addQuery"})," API added"]})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"See-also",children:"See also"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["See how to add\n",(0,t.jsx)(n.a,{href:"/app/tooling/typescript-support#Types-for-Custom-Commands",children:"TypeScript support for custom commands"})]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)("a",{href:"/app/plugins/plugins-list#custom-commands",children:(0,t.jsx)(n.p,{children:"Plugins using custom commands"})}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/api/cypress-api/cypress-log",children:"Cypress.log()"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>o});var t=s(7294);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);