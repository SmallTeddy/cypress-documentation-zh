"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[771],{8994:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=s(5893),r=s(1151);const i={title:"API for test results | Cypress UI Coverage",description:"Programmatically fetch UI Coverage results in a CI environment and fail the build if the test coverage is not acceptable.",sidebar_label:"Results API",sidebar_position:100},o="Results API",l={id:"ui-coverage/results-api",title:"API for test results | Cypress UI Coverage",description:"Programmatically fetch UI Coverage results in a CI environment and fail the build if the test coverage is not acceptable.",source:"@site/docs/ui-coverage/results-api.mdx",sourceDirName:"ui-coverage",slug:"/ui-coverage/results-api",permalink:"/ui-coverage/results-api",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/ui-coverage/results-api.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",sidebarPosition:100,frontMatter:{title:"API for test results | Cypress UI Coverage",description:"Programmatically fetch UI Coverage results in a CI environment and fail the build if the test coverage is not acceptable.",sidebar_label:"Results API",sidebar_position:100},sidebar:"ui-coverage",previous:{title:"views",permalink:"/ui-coverage/configuration/views"},next:{title:"Troubleshooting",permalink:"/ui-coverage/troubleshooting"}},a={},c=[{value:"Supported CI Providers",id:"Supported-CI-Providers",level:2},{value:"Installation",id:"Installation",level:2},{value:"Usage",id:"Usage",level:2},{value:"<strong>1. Get the Results</strong>",id:"1-Get-the-Results",level:3},{value:"<code>getUICoverageResults</code> Arguments",id:"getUICoverageResults-Arguments",level:4},{value:"Result Types",id:"Result-Types",level:4},{value:"<strong>2. Add to CI Workflow</strong>",id:"2-Add-to-CI-Workflow",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components},{TabItem:s,Tabs:i,UICovAddon:o}=n;return s||h("TabItem",!0),i||h("Tabs",!0),o||h("UICovAddon",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"Results-API",children:"Results API"}),"\n",(0,t.jsx)(o,{}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"@cypress/extract-cloud-results"})," module provides the ",(0,t.jsx)(n.code,{children:"getUICoverageResults"})," utility which enables you to programmatically fetch your run's UI Coverage results in a CI environment. It determines the Cypress run created for the given CI workflow and will return the UI Coverage results associated with that run. The results will be returned once the Cypress run has finished and the UI Coverage report has been processed."]}),"\n",(0,t.jsx)(n.p,{children:"This allows you to review the results within CI and to determine if the results are acceptable or need to be addressed before code changes can merge."}),"\n",(0,t.jsx)(n.h2,{id:"Supported-CI-Providers",children:"Supported CI Providers"}),"\n",(0,t.jsx)(n.p,{children:"Fetching UI Coverage results for a run supports fetching results for the following CI providers. Please see the docs below for information on general setup."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/app/continuous-integration/overview#Azure-Pipelines",children:"Azure"})," (requires Cypress v13.13.1)"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/app/continuous-integration/circleci",children:"CircleCI "})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/app/continuous-integration/github-actions",children:"GitHub Actions"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/app/continuous-integration/gitlab-ci",children:"GitLab"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/app/continuous-integration/overview#Jenkins",children:"Jenkins"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Please reach out to Cypress Support to request support for a different provider."}),"\n",(0,t.jsx)(n.h2,{id:"Installation",children:"Installation"}),"\n",(0,t.jsxs)(n.p,{children:["Install the ",(0,t.jsx)(n.code,{children:"@cypress/extract-cloud-results"})," module in your install step in CI."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsxs)(n.p,{children:["Do not check this module in as a dependency. We recommend you install it separately outside of your normal module installation. Use ",(0,t.jsx)(n.code,{children:"--force"})," to get the latest version."]}),(0,t.jsx)(n.p,{children:"If you check this in as a dependency, your installation will fail when we update the package."})]}),"\n",(0,t.jsx)(n.h2,{id:"Usage",children:"Usage"}),"\n",(0,t.jsx)(n.h3,{id:"1-Get-the-Results",children:(0,t.jsx)(n.strong,{children:"1. Get the Results"})}),"\n",(0,t.jsxs)(n.p,{children:["Write a script using the ",(0,t.jsx)(n.code,{children:"getUICoverageResults"})," utility to retrieve the results and perform one or more assertions to verify if the changes are acceptable. This script will be executed in CI."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'title="scripts/verifyUICoverageResults.js"',children:"getUICoverageResults({\n  projectId: '...', // optional if set from env\n  recordKey: '...', // optional if set from env\n  runTags: [process.env.RUN_TAGS], // required if recording multiple runs\n}).then((results) => {\n  const { runNumber, uiCoverageReportUrl, summary, views } = results\n\n  console\n    .log(\n      `Received ${summary.isPartialReport ? 'partial' : ''} results for run #${runNumber}.`\n    )\n    .console.log(`See full report at ${uiCoverageReportUrl}.`)\n\n  // verify project coverage\n  if (summary.coverage < 80) {\n    throw new Error(\n      `Project coverage is ${summary.coverage}, which does not meet the minimum coverage of 80%.`\n    )\n  }\n\n  const criticalViews = [/login/, /checkout/]\n\n  // verify critical view coverage\n  const criticalViewResults = views.forEach((view) => {\n    const { displayName, coverage, uiCoverageReportUrl } = view\n\n    const isCriticalView = criticalViews.some((rx) => rx.test(displayName))\n    if (!isCriticalView) return\n\n    if (coverage < 95) {\n      throw new Error(\n        `The critical view ${displayName} has the coverage of ${coverage}, which does not meet the critical view coverage of 95%. See report at ${uiCoverageReportUrl}.`\n      )\n    }\n  })\n\n  console.log('Your UI Coverage looks great!')\n})\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"getUICoverageResults-Arguments",children:[(0,t.jsx)(n.code,{children:"getUICoverageResults"})," Arguments"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"getUICoverageResults"})," uses the following attributes to identify the Cypress run and return the UI Coverage results:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"getUICoverageResults({\n  // The Cypress project ID.\n  // Optional if the CYPRESS_PROJECT_ID env is set\n  // Can be explicitly passed to override the env var\n  projectId: string\n\n  // The project's record key.\n  // Optional if the CYPRESS_RECORD_KEY env is set\n  // Can be explicitly passed to override the env var\n  recordKey: string\n\n  // The run tags associated with the run.\n  // Required IF you are recording multiple Cypress runs from a single CI build.\n  // Pass the run tags you used when recording in each run\n  // See below for more information\n  runTags: string[]\n})\n"})}),"\n",(0,t.jsx)(n.h4,{id:"Result-Types",children:"Result Types"}),"\n",(0,t.jsx)(n.p,{children:"The UI Coverage results for the run are returned as an object containing the following data:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n  // The run number of the identified build.\n  runNumber: number\n\n  // The run url for the identified build.\n  runUrl: 'https://cloud.cypress.io/projects/:project_id/runs/:run_number'\n\n  // The status of the identified build.\n  runStatus: 'passed' | 'failed' | 'errored' | 'timedOut' | 'cancelled' | 'noTests'\n\n   // The url that links to UI Coverage report for the identified build.\n  uiCoverageReportUrl: 'https://cloud.cypress.io/[...]'\n\n  summary: {\n    // Indicates whether a complete UI Coverage report was generated.\n    // For example, if a run was cancelled and the report expected to run\n    // for 20 specs, but only 10 ran, this would result in a partial report.\n    isPartialReport: boolean\n\n    // The report coverage from 0-100 with 2 decimal precision (e.g 92.45).\n    coverage: float\n\n    // The number of views tested and analyzed.\n    viewCount: number\n\n    // The number of interactive elements that were tested.\n    testedElementsCount:number\n\n    // The number of interactive elements that were not tested.\n    untestedElementsCount: number\n  }\n\n  // The list of tested views and the coverage of each page.\n  views: [{\n    // The sanatized URL pattern shown in the report.\n    displayName: string\n\n    // The view coverage from 0-100 with 2 decimal precision (e.g 92.45).\n    coverage: float\n\n    // The number of interactive elements that were tested on this view.\n    testedElementsCount:number\n\n    // The number of interactive elements that were not tested on this view.\n    untestedElementsCount: number\n\n    // The url that links the report for this view.\n    uiCoverageReportUrl: 'https://cloud.cypress.io/[...]'\n  }]\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-Add-to-CI-Workflow",children:(0,t.jsx)(n.strong,{children:"2. Add to CI Workflow"})}),"\n",(0,t.jsx)(n.p,{children:"In your CI workflow that runs your Cypress tests,"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Update your install job to install the ",(0,t.jsx)(n.code,{children:"@cypress/extract-cloud-results"})," module."]}),"\n",(0,t.jsxs)(n.li,{children:["Pass in the necessary arguments to ",(0,t.jsx)(n.code,{children:"getUICoverageResults"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Add a new step to the job that runs your Cypress tests to verify the UI Coverage results."}),"\n"]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:["If you record multiple runs in a single CI build, you must record these runs using the ",(0,t.jsx)(n.code,{children:"--tag"})," parameter and then call ",(0,t.jsx)(n.code,{children:"getUICoverageResults"})," with the ",(0,t.jsx)(n.code,{children:"runTags"})," argument for each run."]}),(0,t.jsx)(n.p,{children:"This is necessary to identify each unique run and return a corresponding set of results. The tags are how each run is uniquely identified."}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example"})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Let's imagine that within a single CI build you call ",(0,t.jsx)(n.code,{children:"cypress run --record"})," multiple times because you're running one set of tests against a ",(0,t.jsx)(n.code,{children:"staging"})," environment, followed by a ",(0,t.jsx)(n.code,{children:"production"})," environment."]}),"\n",(0,t.jsxs)(n.li,{children:["In this scenario, you pass a different ",(0,t.jsx)(n.code,{children:"--tag"})," to each cypress run","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress run --record --tag staging"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress run --record --tag production"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["When calling ",(0,t.jsx)(n.code,{children:"getUICoverageResults"})," you would then pass these same tags to get the unique set of results for each run","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"getUICoverageResults({ runTags: ['staging']})"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"getUICoverageResults({ runTags: ['production']})"})}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,t.jsxs)(i,{groupId:"ui-cov-results-api",children:[(0,t.jsx)(s,{value:"GitHub Actions",active:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",metastring:'title="test_cypress.yaml"',children:"name: My Workflow\non: push\n\nenv:\n  CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}\n\njobs:\n  run-cypress:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: install\n        run: npm install\n      - name: Run\n        run: npx cypress run --record\n+     - name: Verify UI Coverage Results\n+       run: |\n+          npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz\n+          node ./scripts/verifyUICoverageResults.js\n"})})}),(0,t.jsx)(s,{value:"GitLab",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",metastring:'title=".git-ci.yml"',children:"name: Run Cypress Tests\n\nimage: node:latest\n\nstages:\n  - test\n\nrun-cypress:\n  stage: test\n  secrets:\n    CYPRESS_RECORD_KEY:\n      vault: vault/cypressRecordKey\n  script:\n    - npm install\n    - npx cypress run --record\n+   - npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz\n+   - node ./scripts/verifyUICoverageResults.js\n"})})}),(0,t.jsx)(s,{value:"Jenkins",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:"pipeline {\n  agent {\n    docker {\n      image 'cypress/base:latest'\n    }\n  }\n\n  environment {\n    CYPRESS_PROJECT_ID: 'xxxx'\n    CYPRESS_RECORD_KEY = credentials('cypress-record-key')\n  }\n\n  stages {\n    stage('build and test') {\n      steps {\n        sh 'npm ci'\n        sh 'npx cypress run --record'\n      }\n    }\n\n+   stage('Verify UI Coverage Results') {\n+     steps {\n+       sh 'npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz'\n+       sh 'node ./scripts/verifyUICoverageResults.js'\n+     }\n+   }\n  }\n}\n"})})}),(0,t.jsx)(s,{value:"Azure",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:"jobs:\n  - job: run_tests\n    pool:\n      vmImage: 'ubuntu-latest'\n    steps:\n      - task: NodeTool@0\n        inputs:\n          versionSpec: '20.x'\n          displayName: 'Install Node.js'\n\n      - script: npm i\n        displayName: 'Install npm dependencies'\n\n      - script: npx cypress run --record\n        displayName: 'Run Cypress tests'\n        env:\n          # avoid warnings about terminal\n          TERM: xterm\n          CYPRESS_RECORD_KEY: $(CYPRESS_RECORD_KEY)\n\n+     - script: |\n+           npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz\n+           node ./scripts/verifyUICoverageResults.js\n+       displayName: 'Verify UI Coverage Results'\n+       env:\n+         CYPRESS_PROJECT_ID: $(CYPRESS_PROJECT_ID)\n+         CYPRESS_RECORD_KEY: $(CYPRESS_RECORD_KEY)\n"})})}),(0,t.jsx)(s,{value:"CircleCI",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:"version: 2.1\n\njobs:\n  linux-test:\n    docker:\n      - image: cypress/base:latest\n\n    working_directory: ~/repo\n    steps:\n      - checkout\n      - run: npm install\n      - run: npx run cypress:run --record\n+     - run: npm install --force https://cdn.cypress.io/extract-cloud-results/beta/v1/extract-cloud-results.tgz\n+     - run: node ./scripts/verifyUICoverageResults.js\n\nworkflows:\n  version: 2\n  tests:\n    jobs:\n      - run-cypress\n"})})})]})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>o});var t=s(7294);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);