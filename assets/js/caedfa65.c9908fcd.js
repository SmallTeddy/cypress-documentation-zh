"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[6931],{2908:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var s=i(5893),r=i(1151);const o={title:"Environment Variables"},t=void 0,l={id:"app/references/environment-variables",title:"Environment Variables",description:"Difference between OS-level and Cypress environment variables",source:"@site/docs/app/references/environment-variables.mdx",sourceDirName:"app/references",slug:"/app/references/environment-variables",permalink:"/app/references/environment-variables",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/references/environment-variables.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",frontMatter:{title:"Environment Variables"},sidebar:"app",previous:{title:"Content Security Policy",permalink:"/app/references/content-security-policy"},next:{title:"Error Messages",permalink:"/app/references/error-messages"}},a={},c=[{value:"Instead of hard coding this in your tests:",id:"Instead-of-hard-coding-this-in-your-tests",level:4},{value:"We can move this into a Cypress environment variable:",id:"We-can-move-this-into-a-Cypress-environment-variable",level:4},{value:"Setting",id:"Setting",level:2},{value:"Option #1: configuration file",id:"Option-1-configuration-file",level:3},{value:"Test file",id:"Test-file",level:4},{value:"Overview",id:"Overview",level:4},{value:"Option #2: <code>cypress.env.json</code>",id:"Option-2-cypressenvjson",level:3},{value:"From test file",id:"From-test-file",level:4},{value:"An Overview",id:"An-Overview",level:4},{value:"Option #3: <code>CYPRESS_*</code>",id:"Option-3-CYPRESS_",level:3},{value:"Overriding configuration options",id:"Overriding-configuration-options",level:4},{value:"Overriding environment variables",id:"Overriding-environment-variables",level:4},{value:"Overview:",id:"Overview-1",level:4},{value:"Option #4: <code>--env</code>",id:"Option-4---env",level:3},{value:"From the command line or CI",id:"From-the-command-line-or-CI",level:4},{value:"Test file:",id:"Test-file-1",level:4},{value:"Overview -",id:"Overview--",level:4},{value:"Option #5: Test Configuration",id:"Option-5-Test-Configuration",level:3},{value:"Suite of test configuration",id:"Suite-of-test-configuration",level:4},{value:"Single test configuration",id:"Single-test-configuration",level:4},{value:"Overview",id:"Overview-2",level:4},{value:"Overriding Configuration",id:"Overriding-Configuration",level:2},{value:"See also",id:"See-also",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components},{CypressConfigFileTabs:i,E2EOrCtTabs:o}=n;return i||v("CypressConfigFileTabs",!0),o||v("E2EOrCtTabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.admonition,{type:"caution",children:[(0,s.jsx)("strong",{children:"Difference between OS-level and Cypress environment variables"}),(0,s.jsxs)(n.p,{children:['In Cypress, "environment variables" are variables that are accessible via\n',(0,s.jsx)(n.code,{children:"Cypress.env"}),". These are not the same as OS-level environment variables.\nHowever,\n",(0,s.jsx)(n.a,{href:"/app/references/environment-variables#Option-3-CYPRESS_",children:"it is possible to set Cypress environment variables from OS-level environment variables"}),"."]})]}),"\n",(0,s.jsx)(n.p,{children:"Environment variables are useful when:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Values are different across developer machines."}),"\n",(0,s.jsxs)(n.li,{children:["Values are different across multiple environments: ",(0,s.jsx)(n.em,{children:"(dev, staging, qa, prod)"})]}),"\n",(0,s.jsx)(n.li,{children:"Values change frequently and are highly dynamic."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Environment variables can be changed easily - especially when running in CI."}),"\n",(0,s.jsx)(n.h4,{id:"Instead-of-hard-coding-this-in-your-tests",children:"Instead of hard coding this in your tests:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"cy.request('https://api.acme.corp') // this will break on other environments\n"})}),"\n",(0,s.jsx)(n.h4,{id:"We-can-move-this-into-a-Cypress-environment-variable",children:"We can move this into a Cypress environment variable:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"cy.request(Cypress.env('EXTERNAL_API')) // points to a dynamic env var\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)("strong",{children:"Using 'baseUrl'"}),(0,s.jsx)(n.p,{children:"Environment variables are great at pointing to external services and servers, or\nstoring password or other credentials."}),(0,s.jsxs)(n.p,{children:["However, you ",(0,s.jsx)(n.strong,{children:"do not"})," need to use environment variables to point to the origin\nand domain under test. Use ",(0,s.jsx)(n.code,{children:"baseUrl"})," instead of environment variables."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/api/commands/visit",children:(0,s.jsx)(n.code,{children:"cy.visit()"})})," and ",(0,s.jsx)(n.a,{href:"/api/commands/request",children:(0,s.jsx)(n.code,{children:"cy.request()"})}),"\nare automatically prefixed with this value - avoiding the need to specify them."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"baseUrl"})," can be set in the Cypress configuration file - and then you can set an\nenvironment variable in your OS to override it like shown below."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"CYPRESS_BASE_URL=https://staging.app.com cypress run\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"Setting",children:"Setting"}),"\n",(0,s.jsx)(n.p,{children:"There are different ways to set environment variables. Each has a slightly\ndifferent use case."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"To summarize you can:"})})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#Option-1-configuration-file",children:"Set in your configuration file"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsxs)(n.a,{href:"#Option-2-cypressenvjson",children:["Create a ",(0,s.jsx)(n.code,{children:"cypress.env.json"})]})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsxs)(n.a,{href:"#Option-3-CYPRESS_",children:["Export as ",(0,s.jsx)(n.code,{children:"CYPRESS_*"})]})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsxs)(n.a,{href:"#Option-4---env",children:["Pass in the CLI as ",(0,s.jsx)(n.code,{children:"--env"})]})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#Option-5-Test-Configuration",children:"Set an environment variable within test configuration."})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Don't feel obligated to pick just one method. It is common to use one strategy\nfor local development but another when running in\n",(0,s.jsx)(n.a,{href:"/app/continuous-integration/overview",children:"CI"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When your tests are running, you can use the\n",(0,s.jsx)(n.a,{href:"/api/cypress-api/env",children:(0,s.jsx)(n.code,{children:"Cypress.env"})})," function to access the values of your\nenvironment variables."]}),"\n",(0,s.jsx)(n.h3,{id:"Option-1-configuration-file",children:"Option #1: configuration file"}),"\n",(0,s.jsxs)(n.p,{children:["Any key/value you set in your\n",(0,s.jsx)(n.a,{href:"/app/references/configuration",children:"Cypress configuration"})," under the ",(0,s.jsx)(n.code,{children:"env"})," key\nwill become an environment variable."]}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  projectId: '128076ed-9868-4e98-9cef-98dd8b705d75',\n  env: {\n    login_url: '/login',\n    products_url: '/products',\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  projectId: '128076ed-9868-4e98-9cef-98dd8b705d75',\n  env: {\n    login_url: '/login',\n    products_url: '/products',\n  },\n})\n"})})]}),"\n",(0,s.jsx)(n.h4,{id:"Test-file",children:"Test file"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Cypress.env() // {login_url: '/login', products_url: '/products'}\nCypress.env('login_url') // '/login'\nCypress.env('products_url') // '/products'\n"})}),"\n",(0,s.jsx)(n.h4,{id:"Overview",children:"Overview"}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)("strong",{children:"Benefits"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Great for values that need to be checked into source control and remain the\nsame on all machines."}),"\n"]})]}),"\n",(0,s.jsxs)(n.admonition,{type:"danger",children:[(0,s.jsx)("strong",{children:"Downsides"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Only works for values that should be the same on across all machines."}),"\n"]})]}),"\n",(0,s.jsxs)(n.h3,{id:"Option-2-cypressenvjson",children:["Option #2: ",(0,s.jsx)(n.code,{children:"cypress.env.json"})]}),"\n",(0,s.jsxs)(n.p,{children:["You can create your own ",(0,s.jsx)(n.code,{children:"cypress.env.json"})," file that Cypress will automatically\ncheck. Values in here will overwrite conflicting environment variables in your\n",(0,s.jsx)(n.a,{href:"/app/references/configuration",children:"Cypress configuration"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["This strategy is useful because if you add ",(0,s.jsx)(n.code,{children:"cypress.env.json"})," to your\n",(0,s.jsx)(n.code,{children:".gitignore"})," file, the values in here can be different for each developer\nmachine."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "host": "veronica.dev.local",\n  "api_server": "http://localhost:8888/api/v1/"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"From-test-file",children:"From test file"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Cypress.env() // {host: 'veronica.dev.local', api_server: 'http://localhost:8888/api/v1'}\nCypress.env('host') // 'veronica.dev.local'\nCypress.env('api_server') // 'http://localhost:8888/api/v1/'\n"})}),"\n",(0,s.jsx)(n.h4,{id:"An-Overview",children:"An Overview"}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)("strong",{children:"Benefits"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Dedicated file just for environment variables."}),"\n",(0,s.jsx)(n.li,{children:"Enables you to generate this file from other build processes."}),"\n",(0,s.jsx)(n.li,{children:"Values can be different on each machine (if not checked into source control)."}),"\n",(0,s.jsxs)(n.li,{children:["Supports nested fields (objects), e.g.\n",(0,s.jsx)(n.code,{children:"{ testUser: { name: '...', email: '...' } }"}),"."]}),"\n"]})]}),"\n",(0,s.jsxs)(n.admonition,{type:"danger",children:[(0,s.jsx)("strong",{children:"Downsides"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Another file you have to deal with."}),"\n",(0,s.jsx)(n.li,{children:"Overkill for 1 or 2 environment variables."}),"\n"]})]}),"\n",(0,s.jsxs)(n.h3,{id:"Option-3-CYPRESS_",children:["Option #3: ",(0,s.jsx)(n.code,{children:"CYPRESS_*"})]}),"\n",(0,s.jsxs)(n.p,{children:["Any exported environment variables set on the command line or in your CI\nprovider that start with either ",(0,s.jsx)(n.code,{children:"CYPRESS_"})," or ",(0,s.jsx)(n.code,{children:"cypress_"})," will automatically be\nparsed by Cypress."]}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsxs)(n.p,{children:["The environment variable ",(0,s.jsx)(n.code,{children:"CYPRESS_INTERNAL_ENV"})," is reserved and should not be\nset."]})}),"\n",(0,s.jsx)(n.h4,{id:"Overriding-configuration-options",children:"Overriding configuration options"}),"\n",(0,s.jsxs)(n.p,{children:["Environment variables that match a corresponding configuration option will\noverride any value set in the\n",(0,s.jsx)(n.a,{href:"/app/references/configuration",children:"Cypress configuration"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Cypress automatically normalizes both the key and the value. The leading\n",(0,s.jsx)(n.code,{children:"CYPRESS_"})," or ",(0,s.jsx)(n.code,{children:"cypress_"})," is removed and the remaining name is camelCased, while\nvalues are converted to ",(0,s.jsx)(n.code,{children:"Number"})," or ",(0,s.jsx)(n.code,{children:"Boolean"})," wherever possible."]})}),"\n",(0,s.jsxs)(n.p,{children:["For example, these environment variables in the command line will override any\n",(0,s.jsx)(n.code,{children:"viewportWidth"})," or ",(0,s.jsx)(n.code,{children:"viewportHeight"})," options set in the Cypress configuration:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"export CYPRESS_VIEWPORT_WIDTH=800\nexport CYPRESS_VIEWPORT_HEIGHT=600\n"})}),"\n",(0,s.jsx)(n.h4,{id:"Overriding-environment-variables",children:"Overriding environment variables"}),"\n",(0,s.jsxs)(n.p,{children:["Environment variables that do not match configuration options will be set as\nenvironment variables for use in tests with\n",(0,s.jsx)(n.a,{href:"/api/cypress-api/env",children:(0,s.jsx)(n.code,{children:"Cypress.env()"})}),", and will override any existing values\nin the Cypress configuration ",(0,s.jsx)(n.code,{children:"env"})," object and ",(0,s.jsx)(n.code,{children:"cypress.env.json"})," files."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Cypress automatically removes the leading ",(0,s.jsx)(n.code,{children:"CYPRESS_"})," or ",(0,s.jsx)(n.code,{children:"cypress_"})," from any\nenvironment variable name specified in this way."]})}),"\n",(0,s.jsx)(n.p,{children:"For example, these environment variables in the command line:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"export CYPRESS_HOST=laura.dev.local\nexport cypress_api_server=http://localhost:8888/api/v1/\n"})}),"\n",(0,s.jsx)(n.p,{children:"Will yield these results inside a test file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Cypress.env() // {HOST: 'laura.dev.local', api_server: 'http://localhost:8888/api/v1'}\nCypress.env('HOST') // 'laura.dev.local'\nCypress.env('api_server') // 'http://localhost:8888/api/v1/'\n"})}),"\n",(0,s.jsx)(n.h4,{id:"Overview-1",children:"Overview:"}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)("strong",{children:"Benefits"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Quickly export some values."}),"\n",(0,s.jsxs)(n.li,{children:["Can be stored in your ",(0,s.jsx)(n.code,{children:"bash_profile"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Allows for dynamic values between different machines."}),"\n",(0,s.jsx)(n.li,{children:"Especially useful for CI environments."}),"\n"]})]}),"\n",(0,s.jsxs)(n.admonition,{type:"danger",children:[(0,s.jsx)("strong",{children:"Downsides"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Not as obvious where values come from versus the other options."}),"\n",(0,s.jsx)(n.li,{children:"No support for nested fields."}),"\n"]})]}),"\n",(0,s.jsxs)(n.h3,{id:"Option-4---env",children:["Option #4: ",(0,s.jsx)(n.code,{children:"--env"})]}),"\n",(0,s.jsxs)(n.p,{children:["You can pass in environment variables as options when\n",(0,s.jsx)(n.a,{href:"/app/references/command-line#cypress-run",children:"using the CLI tool"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Values here will overwrite all other conflicting environment variables."}),"\n",(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.code,{children:"--env"})," argument for\n",(0,s.jsx)(n.a,{href:"/app/references/command-line#cypress-run",children:"cypress run"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["Multiple values must be separated by a comma, not a space. In some shells, like Windows PowerShell, you may need to surround the key/value pair with quotes: ",(0,s.jsx)(n.code,{children:'--env "cyuser=dummyUser,cypassword=dummyPassword"'}),"."]})}),"\n",(0,s.jsx)(n.h4,{id:"From-the-command-line-or-CI",children:"From the command line or CI"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cypress run --env host=kevin.dev.local,api_server=http://localhost:8888/api/v1\n"})}),"\n",(0,s.jsx)(n.h4,{id:"Test-file-1",children:"Test file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Cypress.env() // {host: 'kevin.dev.local', api_server: 'http://localhost:8888/api/v1'}\nCypress.env('host') // 'kevin.dev.local'\nCypress.env('api_server') // 'http://localhost:8888/api/v1/'\n"})}),"\n",(0,s.jsx)(n.h4,{id:"Overview--",children:"Overview -"}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)("strong",{children:"Benefits"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Does not require any changes to files or configuration."}),"\n",(0,s.jsx)(n.li,{children:"More clear where environment variables come from."}),"\n",(0,s.jsx)(n.li,{children:"Allows for dynamic values between different machines."}),"\n",(0,s.jsx)(n.li,{children:"Overwrites all other forms of setting env variables."}),"\n"]})]}),"\n",(0,s.jsxs)(n.admonition,{type:"danger",children:[(0,s.jsx)("strong",{children:"Downsides"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Pain to write the ",(0,s.jsx)(n.code,{children:"--env"})," options everywhere you use Cypress."]}),"\n",(0,s.jsx)(n.li,{children:"No support for nested fields."}),"\n"]})]}),"\n",(0,s.jsx)(n.h3,{id:"Option-5-Test-Configuration",children:"Option #5: Test Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["You can set environment variables for specific suites or tests by passing the\n",(0,s.jsx)(n.code,{children:"env"})," values to the\n",(0,s.jsx)(n.a,{href:"/app/references/configuration#Test-Configuration",children:"test configuration"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"Suite-of-test-configuration",children:"Suite of test configuration"}),"\n",(0,s.jsxs)(o,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// change environment variable for single suite of tests\ndescribe(\n  'test against Spanish content',\n  {\n    env: {\n      language: 'es',\n    },\n  },\n  () => {\n    it('displays Spanish', () => {\n      cy.visit(`https://docs.cypress.io/${Cypress.env('language')}/`)\n      cy.contains('\xbfPor qu\xe9 Cypress?')\n    })\n  }\n)\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// change environment variable for single suite of tests\ndescribe(\n  'test against Spanish content',\n  {\n    env: {\n      language: 'es',\n    },\n  },\n  () => {\n    it('displays Spanish', () => {\n      cy.mount(<International lang={Cypress.env('language')} />)\n      cy.contains('\xbfPor qu\xe9 Cypress?')\n    })\n  }\n)\n"})})]}),"\n",(0,s.jsx)(n.h4,{id:"Single-test-configuration",children:"Single test configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// change environment variable for single test\nit(\n  'smoke test develop api',\n  {\n    env: {\n      api: 'https://dev.myapi.com',\n    },\n  },\n  () => {\n    cy.request(Cypress.env('api')).its('status').should('eq', 200)\n  }\n)\n\n// change environment variable for single test\nit(\n  'smoke test staging api',\n  {\n    env: {\n      api: 'https://staging.myapi.com',\n    },\n  },\n  () => {\n    cy.request(Cypress.env('api')).its('status').should('eq', 200)\n  }\n)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"Overview-2",children:"Overview"}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)("strong",{children:"Benefits"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Only takes effect for duration of suite or test."}),"\n",(0,s.jsx)(n.li,{children:"More clear where environment variables come from."}),"\n",(0,s.jsx)(n.li,{children:"Allows for dynamic values between tests"}),"\n"]})]}),"\n",(0,s.jsx)(n.h2,{id:"Overriding-Configuration",children:"Overriding Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["If your environment variables match a standard configuration key, then instead\nof setting an ",(0,s.jsx)(n.code,{children:"environment variable"})," they will instead override the\nconfiguration value."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Change the ",(0,s.jsx)(n.code,{children:"baseUrl"})," configuration value / not set env var in\n",(0,s.jsx)(n.code,{children:"Cypress.env()"})]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"export CYPRESS_BASE_URL=http://localhost:8080\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["'foo' does not match config / sets env var in ",(0,s.jsx)(n.code,{children:"Cypress.env()"})]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"export CYPRESS_FOO=bar\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can\n",(0,s.jsx)(n.a,{href:"/app/references/configuration",children:"read more about how environment variables can change configuration here"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"See-also",children:"See also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/api/cypress-api/env",children:"Cypress.env()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/api/node-events/configuration-api",children:"Configuration API"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/app/references/recipes#Fundamentals",children:"Environment Variables recipe"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/app/references/configuration#Test-Configuration",children:"Test Configuration"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function v(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>t});var s=i(7294);const r={},o=s.createContext(r);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);