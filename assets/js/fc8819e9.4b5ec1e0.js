"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[8944],{2236:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>o});var a=s(5893),i=s(1151);const t={title:"and",slug:"/api/commands/and"},r=void 0,l={id:"api/commands/and",title:"and",description:"Create an assertion. Assertions are automatically retried as part of the",source:"@site/docs/api/commands/and.mdx",sourceDirName:"api/commands",slug:"/api/commands/and",permalink:"/api/commands/and",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/commands/and.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",frontMatter:{title:"and",slug:"/api/commands/and"},sidebar:"api",previous:{title:"Table of Contents",permalink:"/api/table-of-contents"},next:{title:"as",permalink:"/api/commands/as"}},c={},o=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:3},{value:"Arguments",id:"Arguments",level:3},{value:"Yields <Icon></Icon>",id:"Yields",level:3},{value:"Examples",id:"Examples",level:2},{value:"Chainers",id:"Chainers",level:3},{value:"Chain assertions on the same subject",id:"Chain-assertions-on-the-same-subject",level:4},{value:"Value",id:"Value",level:3},{value:"Chain assertions when yield changes",id:"Chain-assertions-when-yield-changes",level:4},{value:"Method and Value",id:"Method-and-Value",level:3},{value:"Assert the href is equal to &#39;/users&#39;",id:"Assert-the-href-is-equal-to-users",level:4},{value:"Function",id:"Function",level:3},{value:"Verify length, content, and classes from multiple <code>&lt;p&gt;</code>",id:"Verify-length-content-and-classes-from-multiple-p",level:4},{value:"Notes",id:"Notes",level:2},{value:"Chai",id:"Chai",level:3},{value:"Similarities to Chai",id:"Similarities-to-Chai",level:4},{value:"Subjects",id:"Subjects",level:3},{value:"How do I know which assertions change the subject and which keep it the same?",id:"How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same",level:4},{value:"Using a callback function will not change what is yielded",id:"Using-a-callback-function-will-not-change-what-is-yielded",level:4},{value:"Differences",id:"Differences",level:3},{value:"Rules",id:"Rules",level:2},{value:"Requirements <Icon></Icon>",id:"Requirements",level:3},{value:"Timeouts <Icon></Icon>",id:"Timeouts",level:3},{value:"Command Log",id:"Command-Log",level:2},{value:"See also",id:"See-also",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components},{DocsImage:s,Icon:t,ThenShouldAndDifference:r}=n;return s||u("DocsImage",!0),t||u("Icon",!0),r||u("ThenShouldAndDifference",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Create an assertion. Assertions are automatically retried as part of the\nprevious command until they pass or time out."}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["An alias of ",(0,a.jsx)(n.a,{href:"/api/commands/should",children:(0,a.jsx)(n.code,{children:".should()"})})]})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Note:"})," ",(0,a.jsx)(n.code,{children:".and()"})," assumes you are already familiar with core concepts such as\n",(0,a.jsx)(n.a,{href:"/app/core-concepts/introduction-to-cypress#Assertions",children:"assertions"})]})}),"\n",(0,a.jsx)(n.h2,{id:"Syntax",children:"Syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:".and(chainers)\n.and(chainers, value)\n.and(chainers, method, value)\n.and(callbackFn)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"Usage",children:"Usage"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(t,{name:"check-circle",color:"green"})," ",(0,a.jsx)(n.strong,{children:"Correct Usage"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"cy.get('.err').should('be.empty').and('be.hidden') // Assert '.err' is empty & hidden\n\ncy.contains('Login').and('be.visible') // Assert el is visible\n\ncy.wrap({ foo: 'bar' })\n  .should('have.property', 'foo') // Assert 'foo' property exists\n  .and('eq', 'bar') // Assert 'foo' property is 'bar'\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(t,{name:"exclamation-triangle",color:"red"})," ",(0,a.jsx)(n.strong,{children:"Incorrect Usage"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"cy.and('eq', '42') // Can not be chained off 'cy'\n\ncy.get('button').click().and('be.focused') // Should not be chained off\n// action commands that may update the DOM\n"})}),"\n",(0,a.jsx)(n.h3,{id:"Arguments",children:"Arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(t,{name:"angle-right"})," ",(0,a.jsxs)(n.strong,{children:["chainers ",(0,a.jsx)(n.em,{children:"(String)"})]})]}),"\n",(0,a.jsxs)(n.p,{children:["Any valid chainer that comes from ",(0,a.jsx)(n.a,{href:"/app/references/assertions#Chai",children:"Chai"})," or\n",(0,a.jsx)(n.a,{href:"/app/references/assertions#Chai-jQuery",children:"Chai-jQuery"})," or\n",(0,a.jsx)(n.a,{href:"/app/references/assertions#Sinon-Chai",children:"Sinon-Chai"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(t,{name:"angle-right"})," ",(0,a.jsxs)(n.strong,{children:["value ",(0,a.jsx)(n.em,{children:"(String)"})]})]}),"\n",(0,a.jsx)(n.p,{children:"Value to assert against chainer."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(t,{name:"angle-right"})," ",(0,a.jsxs)(n.strong,{children:["method ",(0,a.jsx)(n.em,{children:"(String)"})]})]}),"\n",(0,a.jsx)(n.p,{children:"A method to be called on the chainer."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(t,{name:"angle-right"})," ",(0,a.jsxs)(n.strong,{children:["callbackFn ",(0,a.jsx)(n.em,{children:"(Function)"})]})]}),"\n",(0,a.jsx)(n.p,{children:"Pass a function that can have any number of explicit assertions within it.\nWhatever was passed to the function is what is yielded."}),"\n",(0,a.jsxs)(n.h3,{id:"Yields",children:["Yields ",(0,a.jsx)(n.a,{href:"/app/core-concepts/introduction-to-cypress#Subject-Management",children:(0,a.jsx)(t,{name:"question-circle"})})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["In most cases, ",(0,a.jsx)(n.code,{children:".and()"})," yields the same subject it was given."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:".and()"})," is an assertion, and it is ",(0,a.jsx)(n.em,{children:"safe"})," to chain further commands that use\nthe subject."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"cy.get('nav') // yields <nav>\n  .should('be.visible') // yields <nav>\n  .and('have.class', 'open') // yields <nav>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["However, some chainers change the subject. In the example below, ",(0,a.jsx)(n.code,{children:".and()"})," yields\nthe string ",(0,a.jsx)(n.code,{children:"sans-serif"})," because the chainer ",(0,a.jsx)(n.code,{children:"have.css, 'font-family'"})," changes\nthe subject."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"cy.get('nav') // yields <nav>\n  .should('be.visible') // yields <nav>\n  .and('have.css', 'font-family') // yields 'sans-serif'\n  .and('match', /serif/) // yields 'sans-serif'\n"})}),"\n",(0,a.jsx)(n.h2,{id:"Examples",children:"Examples"}),"\n",(0,a.jsx)(n.h3,{id:"Chainers",children:"Chainers"}),"\n",(0,a.jsx)(n.h4,{id:"Chain-assertions-on-the-same-subject",children:"Chain assertions on the same subject"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"cy.get('button').should('have.class', 'active').and('not.be.disabled')\n"})}),"\n",(0,a.jsx)(n.h3,{id:"Value",children:"Value"}),"\n",(0,a.jsx)(n.h4,{id:"Chain-assertions-when-yield-changes",children:"Chain assertions when yield changes"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'{/* App Code */}\n<ul>\n  <li>\n    <a href="users/123/edit">Edit User</a>\n  </li>\n</ul>\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"cy.get('a')\n  .should('contain', 'Edit User') // yields <a>\n  .and('have.attr', 'href') // yields string value of href\n  .and('match', /users/) // yields string value of href\n  .and('not.include', '#') // yields string value of href\n"})}),"\n",(0,a.jsx)(n.h3,{id:"Method-and-Value",children:"Method and Value"}),"\n",(0,a.jsx)(n.h4,{id:"Assert-the-href-is-equal-to-users",children:"Assert the href is equal to '/users'"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"cy.get('#header a')\n  .should('have.class', 'active')\n  .and('have.attr', 'href', '/users')\n"})}),"\n",(0,a.jsx)(n.h3,{id:"Function",children:"Function"}),"\n",(0,a.jsxs)(n.h4,{id:"Verify-length-content-and-classes-from-multiple-p",children:["Verify length, content, and classes from multiple ",(0,a.jsx)(n.code,{children:"<p>"})]}),"\n",(0,a.jsxs)(n.p,{children:["Passing a function to ",(0,a.jsx)(n.code,{children:".and()"})," enables you to assert on the yielded subject.\nThis gives you the opportunity to ",(0,a.jsx)(n.em,{children:"massage"})," what you'd like to assert."]}),"\n",(0,a.jsxs)(n.p,{children:["Be sure ",(0,a.jsx)(n.em,{children:"not"})," to include any code that has side effects in your callback\nfunction."]}),"\n",(0,a.jsx)(n.p,{children:"The callback function will be retried over and over again until no assertions\nwithin it throw."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<div>\n  <p class="text-primary">Hello World</p>\n  <p class="text-danger">You have an error</p>\n  <p class="text-default">Try again later</p>\n</div>\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"cy.get('p')\n  .should('not.be.empty')\n  .and(($p) => {\n    // should have found 3 elements\n    expect($p).to.have.length(3)\n\n    // make sure the first contains some text content\n    expect($p.first()).to.contain('Hello World')\n\n    // use jquery's map to grab all of their classes\n    // jquery's map returns a new jquery object\n    const classes = $p.map((i, el) => {\n      return Cypress.$(el).attr('class')\n    })\n\n    // call classes.get() to make this a plain array\n    expect(classes.get()).to.deep.eq([\n      'text-primary',\n      'text-danger',\n      'text-default',\n    ])\n  })\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Using a callback function ",(0,a.jsx)(n.a,{href:"#Subjects",children:"will not change the subject"})]})}),"\n",(0,a.jsx)(n.h2,{id:"Notes",children:"Notes"}),"\n",(0,a.jsx)(n.h3,{id:"Chai",children:"Chai"}),"\n",(0,a.jsx)(n.h4,{id:"Similarities-to-Chai",children:"Similarities to Chai"}),"\n",(0,a.jsxs)(n.p,{children:["If you've worked in ",(0,a.jsx)(n.a,{href:"http://chaijs.com/",children:"Chai"})," before, you will recognize that\n",(0,a.jsx)(n.code,{children:".and()"})," matches the same fluent assertion syntax."]}),"\n",(0,a.jsxs)(n.p,{children:["Take this ",(0,a.jsx)(n.em,{children:"explicit"})," assertion for example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"expect({ foo: 'bar' }).to.have.property('foo').and.eq('bar')\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:".and()"})," reproduces this same assertion behavior."]}),"\n",(0,a.jsx)(n.h3,{id:"Subjects",children:"Subjects"}),"\n",(0,a.jsx)(n.h4,{id:"How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same",children:"How do I know which assertions change the subject and which keep it the same?"}),"\n",(0,a.jsxs)(n.p,{children:["The chainers that come from ",(0,a.jsx)(n.a,{href:"/app/references/bundled-libraries#Chai",children:"Chai"})," or\n",(0,a.jsx)(n.a,{href:"/app/references/bundled-libraries#Chai-jQuery",children:"Chai-jQuery"})," will always\ndocument what they return."]}),"\n",(0,a.jsx)(n.h4,{id:"Using-a-callback-function-will-not-change-what-is-yielded",children:"Using a callback function will not change what is yielded"}),"\n",(0,a.jsxs)(n.p,{children:["Whenever you use a callback function, its return value is always ignored.\nCypress always forces the command to yield the value from the previous cy\ncommand's yield (which in the example below is ",(0,a.jsx)(n.code,{children:"<button>"}),")"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"cy.get('button')\n  .should('be.active')\n  .and(($button) => {\n    expect({ foo: 'bar' }).to.deep.eq({ foo: 'bar' })\n\n    return { foo: 'bar' } // return is ignored, .and() yields <button>\n  })\n  .then(($button) => {\n    // do anything we want with <button>\n  })\n"})}),"\n",(0,a.jsx)(n.h3,{id:"Differences",children:"Differences"}),"\n",(0,a.jsx)(r,{}),"\n",(0,a.jsx)(n.h2,{id:"Rules",children:"Rules"}),"\n",(0,a.jsxs)(n.h3,{id:"Requirements",children:["Requirements ",(0,a.jsx)(n.a,{href:"/app/core-concepts/introduction-to-cypress#Chains-of-Commands",children:(0,a.jsx)(t,{name:"question-circle"})})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:".and()"})," requires being chained off a previous command."]}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"Timeouts",children:["Timeouts ",(0,a.jsx)(n.a,{href:"/app/core-concepts/introduction-to-cypress#Timeouts",children:(0,a.jsx)(t,{name:"question-circle"})})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:".and()"})," will continue to ",(0,a.jsx)(n.a,{href:"/app/core-concepts/retry-ability",children:"retry"})," its\nspecified assertions until it times out."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"cy.get('input', {timeout: 10000}).should('have.value', '10').and('have.class', 'error')\n                         \u21b2\n  // timeout here will be passed down to the '.and()'\n  // and it will retry for up to 10 secs\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"cy.get('input', {timeout: 10000}).should('have.value', 'US').and(($input) => {\n                         \u21b2\n  // timeout here will be passed down to the '.and()'\n  // unless an assertion throws earlier,\n  // ALL of the assertions will retry for up to 10 secs\n  expect($input).to.not.be('disabled')\n  expect($input).to.not.have.class('error')\n})\n"})}),"\n",(0,a.jsx)(n.h2,{id:"Command-Log",children:"Command Log"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Chain assertions on the same subject"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"cy.get('.list')\n  .find('input[type=\"checkbox\"]')\n  .should('be.checked')\n  .and('not.be.disabled')\n"})}),"\n",(0,a.jsx)(n.p,{children:"The commands above will display in the Command Log as:"}),"\n",(0,a.jsx)(s,{src:"/img/api/and/cypress-and-command-log.png",alt:"Command log for assertions"}),"\n",(0,a.jsxs)(n.p,{children:["When clicking on ",(0,a.jsx)(n.code,{children:"assert"})," within the command log, the console outputs the\nfollowing:"]}),"\n",(0,a.jsx)(s,{src:"/img/api/and/cypress-assertions-console-log.png",alt:"console.log for assertions"}),"\n",(0,a.jsx)(n.h2,{id:"See-also",children:"See also"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/api/commands/should",children:(0,a.jsx)(n.code,{children:".should()"})})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/app/core-concepts/introduction-to-cypress#Assertions",children:"Guide: Introduction to Cypress"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/app/references/assertions",children:"Reference: List of Assertions"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>r});var a=s(7294);const i={},t=a.createContext(i);function r(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);