"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[3857],{5074:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var o=t(5893),s=t(1151);const i={title:"Amazon Cognito Authentication in Cypress",sidebar_label:"Amazon Cognito Authentication",description:"Implement Amazon Cognito authentication in Cypress. Securely manage authentication processes for Cypress end-to-end testing scenarios"},a="Amazon Cognito Authentication",r={id:"app/guides/authentication-testing/amazon-cognito-authentication",title:"Amazon Cognito Authentication in Cypress",description:"Implement Amazon Cognito authentication in Cypress. Securely manage authentication processes for Cypress end-to-end testing scenarios",source:"@site/docs/app/guides/authentication-testing/amazon-cognito-authentication.mdx",sourceDirName:"app/guides/authentication-testing",slug:"/app/guides/authentication-testing/amazon-cognito-authentication",permalink:"/app/guides/authentication-testing/amazon-cognito-authentication",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/guides/authentication-testing/amazon-cognito-authentication.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",frontMatter:{title:"Amazon Cognito Authentication in Cypress",sidebar_label:"Amazon Cognito Authentication",description:"Implement Amazon Cognito authentication in Cypress. Securely manage authentication processes for Cypress end-to-end testing scenarios"},sidebar:"app",previous:{title:"Accessibility Testing",permalink:"/app/guides/accessibility-testing"},next:{title:"Auth0 Integration",permalink:"/app/guides/authentication-testing/auth0-authentication"}},c={},l=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"Amazon Cognito Setup",id:"Amazon-Cognito-Setup",level:2},{value:"Setting Amazon Cognito app credentials in Cypress",id:"Setting-Amazon-Cognito-app-credentials-in-Cypress",level:2},{value:"Custom Command for Amazon Cognito Authentication",id:"Custom-Command-for-Amazon-Cognito-Authentication",level:2},{value:"Login with <code>cy.origin()</code>",id:"Login-with-cyorigin",level:3},{value:"Programmatic Login",id:"Programmatic-Login",level:3},{value:"Adapting an Amazon Cognito App for Testing",id:"Adapting-an-Amazon-Cognito-App-for-Testing",level:3},{value:"Adapting the back end",id:"Adapting-the-back-end",level:4},{value:"Adapting the front end",id:"Adapting-the-front-end",level:4}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...n.components},{CypressConfigFileTabs:t,DocsVideo:i,Icon:a,TabItem:r,Tabs:c}=e;return t||p("CypressConfigFileTabs",!0),i||p("DocsVideo",!0),a||p("Icon",!0),r||p("TabItem",!0),c||p("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"Amazon-Cognito-Authentication",children:"Amazon Cognito Authentication"}),"\n",(0,o.jsxs)(e.admonition,{type:"info",children:[(0,o.jsxs)(e.h5,{id:"What-youll-learn",children:[(0,o.jsx)(a,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"How to implement Amazon Cognito authentication in Cypress"}),"\n",(0,o.jsx)(e.li,{children:"How to securely manage authentication processes for Cypress end-to-end testing scenarios"}),"\n"]})]}),"\n",(0,o.jsxs)(e.p,{children:["Amazon ",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/cognito",children:"Cognito"})," is an authentication provider\napart of ",(0,o.jsx)(e.a,{href:"https://aws.amazon.com",children:"Amazon Web Services (AWS)"}),"."]}),"\n",(0,o.jsxs)(e.p,{children:["The documentation for ",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/cognito",children:"Amazon Cognito"}),"\nrecommends using the\n",(0,o.jsx)(e.a,{href:"https://aws-amplify.github.io/amplify-js/api/classes/authclass.html",children:"AWS Amplify Framework Authentication Library"}),"\nfrom the ",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/amplify/framework/",children:"AWS Amplify Framework"})," to\ninteract with a deployed ",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/cognito",children:"Amazon Cognito"}),"\ninstance. Using the\n",(0,o.jsx)(e.a,{href:"https://aws-amplify.github.io/amplify-js/api/classes/authclass.html",children:"AWS Amplify Framework Authentication Library"}),",\nwe are able to programmatically drive the creation and authentication of users\nagainst a fully deployed back end."]}),"\n",(0,o.jsxs)(e.p,{children:["This guide illustrates the limited code from the\n",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/amplify/framework/",children:"AWS Amplify Framework"})," needed to\nprogrammatically log an existing a user into an application."]}),"\n",(0,o.jsxs)(c,{children:[(0,o.jsx)(r,{value:"v5",label:"Amplify v5.x.x",default:!0,children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"// Add 'aws-amplify' library into your application\nimport Amplify, { Auth } from 'aws-amplify'\n\n// Configure Auth category with your Amazon Cognito credentials\nAmplify.configure({\n  Auth: {\n    identityPoolId: 'XX-XXXX-X:XXXXXXXX-XXXX', // Amazon Cognito Identity Pool ID\n    region: 'XX-XXXX-X', // Amazon Cognito Region\n  },\n})\n\n// Call Auth.signIn with user credentials\nAuth.signIn(username, password)\n  .then((user) => console.log(user))\n  .catch((err) => console.log(err))\n"})})}),(0,o.jsx)(r,{value:"v6",label:"Amplify v6.x.x",children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:'import { Amplify } from "aws-amplify";\nimport { fetchAuthSession, signIn } from "aws-amplify/auth";\n\nAmplify.configure({\n  Auth: {\n    Cognito: {\n      userPoolId: "XX-XXXX-X_XXXXXXXXX",\n      userPoolClientId: "XXXXXXXXXXXXXXXXXXXXXXXXX",\n      // OR:\n      identityPoolId: \'XX-XXXX-X:XXXXXXXX-XXXX\', // Amazon Cognito Identity Pool ID\n    },\n  },\n});\nsignIn({ username, password, { authFlowType: "USER_PASSWORD_AUTH" } })\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  .then((_signInOutput) => fetchAuthSession())\n  .then((authSession) => console.log(authSession))\n  .catch((err) => console.log(err));\n'})})})]}),"\n",(0,o.jsx)(e.h2,{id:"Amazon-Cognito-Setup",children:"Amazon Cognito Setup"}),"\n",(0,o.jsxs)(e.p,{children:["If not already setup, you will need to\n",(0,o.jsx)(e.a,{href:"https://docs.amplify.aws/start/getting-started/installation/q/integration/react#sign-up-for-an-aws-account",children:"create an account"}),"\nwith ",(0,o.jsx)(e.a,{href:"https://aws.amazon.com",children:"Amazon Web Services (AWS)"}),"."]}),"\n",(0,o.jsxs)(e.p,{children:["An ",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/cognito",children:"Amazon Cognito"})," integration is available in\nthe"]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(a,{name:"github",inline:"true",contentType:"rwa"}),". Clone the Cypress Real\nWorld App and install the ",(0,o.jsx)(e.a,{href:"https://docs.amplify.aws/cli",children:"AWS Amazon Amplify CLI"}),"\nas follows:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"npm install @aws-amplify/cli --global\n"})}),"\n",(0,o.jsx)(e.p,{children:"The"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(a,{name:"github",inline:"true",contentType:"rwa"})," is configured with an optional\n",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/cognito",children:"Amazon Cognito"})," instance via the ",(0,o.jsx)(e.a,{href:"https://aws-amplify.github.io/amplify-js/api/classes/authclass.html",children:"AWS Amplify Framework\nAuthentication Library"}),".\nThe ",(0,o.jsx)(e.a,{href:"https://docs.amplify.aws/cli",children:"AWS Amazon Amplify CLI"})," is used to provision the\n",(0,o.jsx)(e.a,{href:"https://aws.amazon.com",children:"Amazon Web Services (AWS)"})," infrastructure needed to configure\nyour environment and cloud resources."]}),"\n",(0,o.jsxs)(e.p,{children:["First, run the\n",(0,o.jsx)(e.a,{href:"https://docs.amplify.aws/cli/start/workflows#initialize-new-project",children:"amplify init"}),"\ncommand to initialize the\nReal World App.\nThis will provision the project with your ",(0,o.jsx)(e.a,{href:"https://aws.amazon.com",children:"AWS"}),"\ncredentials."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"amplify init\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Next, run the\n",(0,o.jsx)(e.a,{href:"https://docs.amplify.aws/cli/start/workflows#amplify-push",children:"amplify push"}),"\ncommand to create the ",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/cognito",children:"Amazon Cognito"})," resources\nin the cloud:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"amplify push\n"})}),"\n",(0,o.jsxs)(e.admonition,{type:"info",children:[(0,o.jsx)("strong",{children:"Note"}),(0,o.jsxs)(e.p,{children:["Use the ",(0,o.jsx)(e.code,{children:"yarn dev:cognito"})," command when starting the\nReal World App."]})]}),"\n",(0,o.jsx)(e.h2,{id:"Setting-Amazon-Cognito-app-credentials-in-Cypress",children:"Setting Amazon Cognito app credentials in Cypress"}),"\n",(0,o.jsxs)(e.p,{children:["First, we need to configure Cypress to use the\n",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/cognito",children:"AWS Cognito"})," environment variables set in the\n",(0,o.jsx)(e.code,{children:".env"})," file. In addition, we are using the ",(0,o.jsx)(e.code,{children:"aws-exports.js"})," supplied during the\n",(0,o.jsx)(e.a,{href:"https://docs.amplify.aws/cli",children:"AWS Amplify CLI"})," build process."]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n// Populate process.env with values from .env file\nrequire('dotenv').config()\n// AWS exports\nconst awsConfig = require('./aws-exports-es5.js')\n\nmodule.exports = defineConfig({\n  env: {\n    cognito_username: process.env.AWS_COGNITO_USERNAME,\n    cognito_password: process.env.AWS_COGNITO_PASSWORD,\n    awsConfig: awsConfig.default,\n  },\n})\n"})}),(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n// Populate process.env with values from .env file\nrequire('dotenv').config()\n// AWS exports\nconst awsConfig = require('./aws-exports-es5.js')\n\nexport default defineConfig({\n  env: {\n    cognito_username: process.env.AWS_COGNITO_USERNAME,\n    cognito_password: process.env.AWS_COGNITO_PASSWORD,\n    awsConfig: awsConfig.default,\n  },\n})\n"})})]}),"\n",(0,o.jsx)(e.h2,{id:"Custom-Command-for-Amazon-Cognito-Authentication",children:"Custom Command for Amazon Cognito Authentication"}),"\n",(0,o.jsx)(e.p,{children:"There are two ways you can authenticate to AWS Cognito:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsxs)(e.a,{href:"/app/guides/authentication-testing/amazon-cognito-authentication#Login-with-cyorigin",children:["Login with ",(0,o.jsx)(e.code,{children:"cy.origin()"})]})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/app/guides/authentication-testing/amazon-cognito-authentication#Programmatic-Login",children:"Programmatic Access"})}),"\n"]}),"\n",(0,o.jsxs)(e.h3,{id:"Login-with-cyorigin",children:["Login with ",(0,o.jsx)(e.a,{href:"/api/commands/origin",children:(0,o.jsx)(e.code,{children:"cy.origin()"})})]}),"\n",(0,o.jsxs)(e.p,{children:["We'll write a custom command called ",(0,o.jsx)(e.code,{children:"loginByCognito"})," to perform a login to\n",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/cognito",children:"Amazon Cognito"}),". This command will use\n",(0,o.jsx)(e.a,{href:"/api/commands/origin",children:(0,o.jsx)(e.code,{children:"cy.origin()"})})," to"]}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:"Navigate to the Cognito origin"}),"\n",(0,o.jsx)(e.li,{children:"Input user credentials"}),"\n",(0,o.jsxs)(e.li,{children:["Sign in and redirect back to the","\n",(0,o.jsx)(a,{name:"github",inline:"true",contentType:"rwa"}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["Cache the results with ",(0,o.jsx)(e.a,{href:"/api/commands/session",children:(0,o.jsx)(e.code,{children:"cy.session()"})})]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",metastring:'title="cypress/support/auth-provider-commands/cognito.ts"',children:"// Amazon Cognito\nconst loginToCognito = (username: string, password: string) => {\n  Cypress.log({\n    displayName: 'COGNITO LOGIN',\n    message: [`\ud83d\udd10 Authenticating | ${username}`],\n    autoEnd: false,\n  })\n\n  cy.visit('/')\n\n  cy.origin(\n    Cypress.env('cognito_domain'),\n    {\n      args: {\n        username,\n        password,\n      },\n    },\n    ({ username, password }) => {\n      cy.contains('Sign in with your email and password')\n      // Cognito log in page has some elements of the same id but are off screen.\n      // We only want the visible elements to log in\n      cy.get('input[name=\"username\"]:visible').type(username)\n      cy.get('input[name=\"password\"]:visible').type(password, {\n        // use log: false to prevent your password from showing in the Command Log\n        log: false,\n      })\n      cy.get('input[name=\"signInSubmitButton\"]:visible').click()\n    }\n  )\n\n  // give a few seconds for redirect to settle\n  cy.wait(2000)\n\n  // verify we have made it passed the login screen\n  cy.contains('Get Started').should('be.visible')\n}\n\n// right now our custom command is light. More on this later!\nCypress.Commands.add('loginByCognito', (username, password) => {\n  return loginToCognito(username, password)\n})\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Now, we can use our ",(0,o.jsx)(e.code,{children:"loginByCognito"})," command in the test. Below is our test to\nlogin as a user via ",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/cognito",children:"Amazon Cognito"}),", complete\nthe onboarding process and logout."]}),"\n",(0,o.jsxs)(e.admonition,{type:"info",children:[(0,o.jsxs)(e.p,{children:["The\n",(0,o.jsx)(e.a,{href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/cypress/tests/ui-auth-providers/cognito.spec.ts",children:"runnable version of this test"}),"\nis in the"]}),(0,o.jsxs)(e.p,{children:[(0,o.jsx)(a,{name:"github",inline:"true",contentType:"rwa"}),"."]})]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",metastring:'title="auth.spec.js"',children:"describe('Cognito, cy.origin() login', function () {\n  beforeEach(function () {\n    // Seed database with test data\n    cy.task('db:seed')\n\n    // login via Amazon Cognito via cy.origin()\n    cy.loginByCognito(\n      Cypress.env('cognito_username'),\n      Cypress.env('cognito_password')\n    )\n  })\n\n  it('shows onboarding', function () {\n    cy.contains('Get Started').should('be.visible')\n  })\n})\n"})}),"\n",(0,o.jsx)(i,{src:"https://vimeo.com/789093851",title:"AWS Cognito Authentication with cy.origin()"}),"\n",(0,o.jsxs)(e.p,{children:["Now, we can refactor our login command to take advantage of\n",(0,o.jsx)(e.a,{href:"/api/commands/session",children:(0,o.jsx)(e.code,{children:"cy.session()"})})," to store our logged in user so we don't\nhave to reauthenticate with every test."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",metastring:'title="cypress/support/auth-provider-commands/cognito.ts"',children:"// Amazon Cognito\nCypress.Commands.add(\n  'loginByCognito, cy.origin() login',\n  (username, password) => {\n    cy.session(\n      `cognito-${username}`,\n      () => {\n        return loginToCognito(username, password)\n      },\n      {\n        validate() {\n          cy.visit('/')\n          // revalidate our session to make sure we are logged in\n          cy.contains('Get Started').should('be.visible')\n        },\n      }\n    )\n  }\n)\n"})}),"\n",(0,o.jsx)(i,{src:"https://vimeo.com/789093817",title:"AWS Cognito Authentication with cy.session()"}),"\n",(0,o.jsx)(e.h3,{id:"Programmatic-Login",children:"Programmatic Login"}),"\n",(0,o.jsxs)(e.p,{children:["Next, we'll write a command to perform a programmatic login into\n",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/cognito",children:"Amazon Cognito"})," and set items in ",(0,o.jsx)(e.code,{children:"localStorage"}),"\nwith the authenticated users details, which we will use in our application code\nto verify we are authenticated under test."]}),"\n",(0,o.jsxs)(e.p,{children:["In this ",(0,o.jsx)(e.code,{children:"loginByCognitoApi"})," command, we call ",(0,o.jsx)(e.code,{children:"Auth.signIn"}),", then use that\nresponse to set the items inside of localStorage for the UI to know that our\nuser is logged into the application."]}),"\n",(0,o.jsxs)(c,{children:[(0,o.jsx)(r,{value:"v5",label:"Amplify v5.x.x",default:!0,children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",metastring:'title="cypress/support/auth-provider-commands/cognito.ts"',children:"import Amplify, { Auth } from 'aws-amplify'\n\nAmplify.configure(Cypress.env('awsConfig'))\n\n// Amazon Cognito\nCypress.Commands.add('loginByCognitoApi', (username, password) => {\n  const log = Cypress.log({\n    displayName: 'COGNITO LOGIN',\n    message: [`\ud83d\udd10 Authenticating | ${username}`],\n    // @ts-ignore\n    autoEnd: false,\n  })\n\n  log.snapshot('before')\n\n  const signIn = Auth.signIn({ username, password })\n\n  cy.wrap(signIn, { log: false }).then((cognitoResponse) => {\n    const keyPrefixWithUsername = `${cognitoResponse.keyPrefix}.${cognitoResponse.username}`\n\n    window.localStorage.setItem(\n      `${keyPrefixWithUsername}.idToken`,\n      cognitoResponse.signInUserSession.idToken.jwtToken\n    )\n\n    window.localStorage.setItem(\n      `${keyPrefixWithUsername}.accessToken`,\n      cognitoResponse.signInUserSession.accessToken.jwtToken\n    )\n\n    window.localStorage.setItem(\n      `${keyPrefixWithUsername}.refreshToken`,\n      cognitoResponse.signInUserSession.refreshToken.token\n    )\n\n    window.localStorage.setItem(\n      `${keyPrefixWithUsername}.clockDrift`,\n      cognitoResponse.signInUserSession.clockDrift\n    )\n\n    window.localStorage.setItem(\n      `${cognitoResponse.keyPrefix}.LastAuthUser`,\n      cognitoResponse.username\n    )\n\n    window.localStorage.setItem('amplify-authenticator-authState', 'signedIn')\n    log.snapshot('after')\n    log.end()\n  })\n\n  cy.visit('/')\n})\n"})})}),(0,o.jsx)(r,{value:"v6",label:"Amplify v6.x.x",children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",metastring:'title="cypress/support/auth-provider-commands/cognito.ts"',children:"import { Amplify } from 'aws-amplify'\nimport { fetchAuthSession, signIn } from 'aws-amplify/auth'\n\nAmplify.configure(Cypress.env('awsConfig'))\nconst fetchJwts = async (username: string, password: string) => {\n  const options = { authFlowType: 'USER_PASSWORD_AUTH' as const }\n  await signIn({ username, password, options })\n  const authSession = await fetchAuthSession()\n  const tokens = authSession.tokens!\n  const accessToken = tokens.accessToken\n  const accessTokenPayload = accessToken.payload\n  return {\n    idToken: tokens.idToken!.toString(),\n    accessToken: accessToken.toString(),\n    clientId: accessTokenPayload.client_id as string,\n    accessTokenSub: accessTokenPayload.sub!,\n  }\n}\ntype JwtResponse = Awaited<ReturnType<typeof fetchJwts>>\n\n// Amazon Cognito\nCypress.Commands.add(\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  'loginByCognitoApi',\n  (username: string, password: string) => {\n    const log = Cypress.log({\n      displayName: 'COGNITO LOGIN',\n      message: [`\ud83d\udd10 Authenticating | ${username}`],\n      autoEnd: false,\n    })\n\n    log.snapshot('before')\n\n    cy.wrap(fetchJwts(username, password), { log: false }).then(\n      (unknownJwts) => {\n        const { idToken, accessToken, clientId, accessTokenSub } =\n          unknownJwts as JwtResponse\n\n        const keyPrefix = `CognitoIdentityServiceProvider.${clientId}`\n        const keyPrefixWithUsername = `${keyPrefix}.${accessTokenSub}`\n\n        const ls = window.localStorage\n        ls.setItem(`${keyPrefixWithUsername}.idToken`, idToken)\n        ls.setItem(`${keyPrefixWithUsername}.accessToken`, accessToken)\n        ls.setItem(`${keyPrefix}.LastAuthUser`, accessTokenSub)\n\n        log.snapshot('after')\n        log.end()\n      }\n    )\n  }\n)\n"})})})]}),"\n",(0,o.jsxs)(e.p,{children:["Finally, we can use our ",(0,o.jsx)(e.code,{children:"loginByCognitoApi"})," command in at test. Below is our\ntest to login as a user via ",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/cognito",children:"Amazon Cognito"}),",\ncomplete the onboarding process and logout."]}),"\n",(0,o.jsx)(e.admonition,{type:"info",children:(0,o.jsxs)(e.p,{children:["The\n",(0,o.jsx)(e.a,{href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/cypress/tests/ui-auth-providers/cognito.spec.ts",children:"runnable version of this test"}),"\nis in the ",(0,o.jsx)(a,{name:"github",inline:"true",contentType:"rwa"}),"."]})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"describe('Cognito, programmatic login', function () {\n  beforeEach(function () {\n    // Seed database with test data\n    cy.task('db:seed')\n\n    // Programmatically login via Amazon Cognito API\n    cy.loginByCognitoApi(\n      Cypress.env('cognito_username'),\n      Cypress.env('cognito_password')\n    )\n  })\n\n  it('shows onboarding', function () {\n    cy.contains('Get Started').should('be.visible')\n  })\n})\n"})}),"\n",(0,o.jsx)(e.h3,{id:"Adapting-an-Amazon-Cognito-App-for-Testing",children:"Adapting an Amazon Cognito App for Testing"}),"\n",(0,o.jsxs)(e.admonition,{type:"info",children:[(0,o.jsx)("strong",{children:"AWS Backend Services Need No Adaptation"}),(0,o.jsxs)(e.p,{children:["Often times, AWS Cognito is used when other AWS services provide the backend,\nsuch as AWS AppSync for GraphQL APIs or AWS API Gateway for REST APIs. These\nbackend services can be configured to verify cognito JWTs without additional\ncode. However, if you are hosting a webserver backend, like the ",(0,o.jsx)(e.a,{href:"https://github.com/cypress-io/cypress-realworld-app",children:"cypress\nreal-world app"})," does with\nthe Express npm library, it must be adapted, as the real-world app is, to verify\nthe Cognito JWTs to authorize the frontend's requests."]})]}),"\n",(0,o.jsx)(e.p,{children:"The"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(a,{name:"github",inline:"true",contentType:"rwa"})," is used and provides configuration\nand runnable code for both the React SPA and the Express back end."]}),"\n",(0,o.jsxs)(e.p,{children:["The front end uses the\n",(0,o.jsx)(e.a,{href:"https://aws-amplify.github.io/amplify-js/api/classes/authclass.html",children:"AWS Amplify Framework Authentication Library"}),".\nThe back end uses the ",(0,o.jsx)(e.a,{href:"https://github.com/auth0/express-jwt",children:"express-jwt"})," to\nvalidate JWTs from ",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/cognito",children:"Amazon Cognito"}),"."]}),"\n",(0,o.jsx)(e.h4,{id:"Adapting-the-back-end",children:"Adapting the back end"}),"\n",(0,o.jsxs)(e.p,{children:["In order to validate API requests from the frontend, we install\n",(0,o.jsx)(e.a,{href:"https://github.com/auth0/express-jwt",children:"express-jwt"})," and\n",(0,o.jsx)(e.a,{href:"https://github.com/auth0/node-jwks-rsa",children:"jwks-rsa"})," and configure validation for\nJWT's from ",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/cognito",children:"Amazon Cognito"}),"."]}),"\n",(0,o.jsxs)(c,{children:[(0,o.jsx)(r,{value:"v5",label:"Amplify v5.x.x",default:!0,children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",metastring:'title="backend/helpers.ts"',children:"// ... initial imports\nimport jwt from 'express-jwt'\nimport jwksRsa from 'jwks-rsa'\n\n// ...\n\nconst awsCognitoJwtConfig = {\n  secret: jwksRsa.expressJwtSecret({\n    jwksUri: `https://cognito-idp.${awsConfig.aws_cognito_region}.amazonaws.com/${awsConfig.aws_user_pools_id}/.well-known/jwks.json`,\n  }),\n\n  issuer: `https://cognito-idp.${awsConfig.aws_cognito_region}.amazonaws.com/${awsConfig.aws_user_pools_id}`,\n  algorithms: ['RS256'],\n}\n\nexport const checkCognitoJwt = jwt(awsCognitoJwtConfig).unless({\n  path: ['/testData/*'],\n})\n"})})}),(0,o.jsx)(r,{value:"v6",label:"Amplify v6.x.x",children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",metastring:'title="backend/helpers.ts"',children:"// ... initial imports\nimport jwt from 'express-jwt'\nimport jwksRsa from 'jwks-rsa'\n\n// ...\nconst userPoolId = awsConfig.Auth.Cognito.userPoolId\nconst region = userPoolId.split('_')[0]\nconst awsCognitoJwtConfig = {\n  secret: jwksRsa.expressJwtSecret({\n    jwksUri: `https://cognito-idp.${region}.amazonaws.com/${userPoolId}/.well-known/jwks.json`,\n  }),\n\n  issuer: `https://cognito-idp.${region}.amazonaws.com/${userPoolId}`,\n  algorithms: ['RS256'],\n}\n\nexport const checkCognitoJwt = jwt(awsCognitoJwtConfig).unless({\n  path: ['/testData/*'],\n})\n"})})})]}),"\n",(0,o.jsx)(e.p,{children:"Once this helper is defined, we can use globally to apply to all routes:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",metastring:'title="backend/app.ts"',children:"// initial imports ...\nimport { checkCognitoJwt } from './helpers'\n\n// ...\n\nif (process.env.REACT_APP_AWS_COGNITO) {\n  app.use(checkCognitoJwt)\n}\n\n// routes ...\n"})}),"\n",(0,o.jsx)(e.h4,{id:"Adapting-the-front-end",children:"Adapting the front end"}),"\n",(0,o.jsxs)(e.p,{children:["We need to update our front end React app to allow for authentication with\n",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/cognito",children:"Amazon Cognito"})," using the\n",(0,o.jsx)(e.a,{href:"https://aws-amplify.github.io/amplify-js/api/classes/authclass.html",children:"AWS Amplify Framework Authentication Library"}),"."]}),"\n",(0,o.jsxs)(e.p,{children:["First, we create a ",(0,o.jsx)(e.code,{children:"AppCognito.tsx"})," container, based off of the ",(0,o.jsx)(e.code,{children:"App.tsx"}),"\ncomponent."]}),"\n",(0,o.jsxs)(e.p,{children:["A ",(0,o.jsx)(e.code,{children:"useEffect"})," hook is added to get the access token for the authenticated user\nand send a ",(0,o.jsx)(e.code,{children:"COGNITO"})," event with the token to work with the existing authentication\nlayer (",(0,o.jsx)(e.code,{children:"authMachine.ts"}),"). If no access token is yet available, we redirect the\nbrowser to the ",(0,o.jsx)(e.a,{href:"https://aws.amazon.com/cognito",children:"Amazon Cognito"})," User Pool Hosted UI\nto provide the login form."]}),"\n",(0,o.jsx)(c,{children:(0,o.jsx)(r,{value:"v6",label:"Amplify v6.x.x",children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",metastring:'title="src/containers/AppCognito.tsx"',children:'// amplify v6\n// initial imports ...\nimport { Amplify, ResourcesConfig } from "aws-amplify";\nimport { fetchAuthSession, signInWithRedirect, signOut } from "aws-amplify/auth";\n\nimport awsConfig from "../aws-exports";\n\nAmplify.configure(awsConfig as ResourcesConfig);\n\n// ...\n\nconst AppCognito: React.FC = () => {\n\n  // ...\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      fetchAuthSession().then((authSession) => {\n        if (authSession && authSession.tokens && authSession.tokens.accessToken) {\n          const { tokens, userSub } = authSession;\n          authService.send("COGNITO", {\n            accessTokenJwtString: tokens!.accessToken.toString(),\n            userSub: userSub!,\n            email: tokens!.idToken!.payload.email,\n          });\n        } else {\n          void signInWithRedirect();\n        }\n      });\n    }\n  }, [isLoggedIn]);\n\n  // ...\n\n  if (!isLoggedIn) {\n    return null; // redirection will occur soon anyway\n  }\n};\n\nexport default AppCognito;\n'})})})}),"\n",(0,o.jsxs)(e.admonition,{type:"tip",children:[(0,o.jsx)("strong",{children:"Try it out"}),(0,o.jsxs)(e.p,{children:["The complete\n",(0,o.jsx)(e.a,{href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/src/containers/AppCognito.tsx",children:"AppCognito.tsx component"}),"\nis in the ",(0,o.jsx)(a,{name:"github",inline:"true",contentType:"rwa"}),"."]})]}),"\n",(0,o.jsxs)(e.p,{children:["Next, we update our entry point (",(0,o.jsx)(e.code,{children:"index.tsx"}),") to use our ",(0,o.jsx)(e.code,{children:"AppCognito.tsx"}),"\ncomponent."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",metastring:'title="src/index.tsx"',children:"// ... initial imports\nimport AppCognito from './containers/AppCognito'\n\n// ...\n\nif (process.env.REACT_APP_AWS_COGNITO) {\n  ReactDOM.render(\n    <Router history={history}>\n      <ThemeProvider theme={theme}>\n        <AppCognito />\n      </ThemeProvider>\n    </Router>,\n    document.getElementById('root')\n  )\n}\n"})})]})}function h(n={}){const{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}function p(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(n,e,t)=>{t.d(e,{Z:()=>r,a:()=>a});var o=t(7294);const s={},i=o.createContext(s);function a(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);