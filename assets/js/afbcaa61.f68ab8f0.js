"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[7207],{9669:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>a});var r=n(5893),i=n(1151);const t={title:"Cypress.$"},c=void 0,l={id:"api/utilities/$",title:"Cypress.$",description:"Cypress automatically includes jQuery and exposes it as",source:"@site/docs/api/utilities/$.mdx",sourceDirName:"api/utilities",slug:"/api/utilities/$",permalink:"/api/utilities/$",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/utilities/$.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",frontMatter:{title:"Cypress.$"},sidebar:"api",previous:{title:"Cypress._",permalink:"/api/utilities/_"},next:{title:"Cypress.Blob",permalink:"/api/utilities/blob"}},o={},a=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:3},{value:"Examples",id:"Examples",level:2},{value:"Selector",id:"Selector",level:3},{value:"Notes",id:"Notes",level:2},{value:"Cypress.$ vs. cy.$$",id:"Cypress-vs-cy",level:3},{value:"See also",id:"See-also",level:2}];function d(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components},{Icon:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Icon",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.p,{children:["Cypress automatically includes ",(0,r.jsx)(s.a,{href:"http://jquery.com",children:"jQuery"})," and exposes it as\n",(0,r.jsx)(s.code,{children:"Cypress.$"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["This is a great way to ",(0,r.jsx)(s.em,{children:"synchronously"})," query for elements when debugging from\nDeveloper Tools."]}),"\n",(0,r.jsx)(s.h2,{id:"Syntax",children:"Syntax"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"Cypress.$(selector)\n\n// other proxied jQuery methods\nCypress.$.Event\nCypress.$.Deferred\nCypress.$.ajax\nCypress.$.get\nCypress.$.getJSON\nCypress.$.getScript\nCypress.$.post\n"})}),"\n",(0,r.jsx)(s.h3,{id:"Usage",children:"Usage"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(n,{name:"check-circle",color:"green"})," ",(0,r.jsx)(s.strong,{children:"Correct Usage"})]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"Cypress.$('p')\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(n,{name:"exclamation-triangle",color:"red"})," ",(0,r.jsx)(s.strong,{children:"Incorrect Usage"})]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"cy.$('p') // Errors, cannot be chained off 'cy'\n"})}),"\n",(0,r.jsx)(s.h2,{id:"Examples",children:"Examples"}),"\n",(0,r.jsx)(s.h3,{id:"Selector",children:"Selector"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const $li = Cypress.$('ul li:first')\n\ncy.wrap($li)\n  .should('not.have.class', 'active')\n  .click()\n  .should('have.class', 'active')\n"})}),"\n",(0,r.jsx)(s.h2,{id:"Notes",children:"Notes"}),"\n",(0,r.jsx)(s.h3,{id:"Cypress-vs-cy",children:"Cypress.$ vs. cy.$$"}),"\n",(0,r.jsxs)(s.p,{children:["You can also query DOM elements with ",(0,r.jsx)(s.code,{children:"cy.$$"}),". But ",(0,r.jsx)(s.code,{children:"Cypress.$"})," and ",(0,r.jsx)(s.code,{children:"cy.$$"})," are\ndifferent."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"Cypress.$"})," refers to the ",(0,r.jsx)(s.code,{children:"jQuery"})," function itself. You can do anything with\n",(0,r.jsx)(s.code,{children:"Cypress.$"})," if you can do it with the ",(0,r.jsx)(s.code,{children:"jQuery"})," function. So, both of the\nexamples below work."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"Cypress.$.each([1, 2, 3], (index, value) => {\n  expect(index).to.eq(value)\n}) // works\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"$.each([1, 2, 3], (index, value) => {\n  expect(index).to.eq(value)\n}) // also works\n"})}),"\n",(0,r.jsxs)(s.p,{children:["But ",(0,r.jsx)(s.code,{children:"cy.$$"})," is a wrapper of the ",(0,r.jsx)(s.code,{children:"jQuery.fn.init"})," function. In other words, you\ncan only query DOM elements with ",(0,r.jsx)(s.code,{children:"cy.$$"}),". Because of that, the jQuery utility\nfunctions like ",(0,r.jsx)(s.code,{children:"jQuery.each"}),", ",(0,r.jsx)(s.code,{children:"jQuery.grep"})," don't work with ",(0,r.jsx)(s.code,{children:"cy.$$"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"cy.$$.each([1, 2, 3], (index, value) => {\n  expect(index).to.eq(value)\n}) // fails\n"})}),"\n",(0,r.jsx)(s.h2,{id:"See-also",children:"See also"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"/app/references/bundled-libraries",children:"Bundled Libraries"})}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>l,a:()=>c});var r=n(7294);const i={},t=r.createContext(i);function c(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);