"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[9252],{5394:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var t=n(5893),i=n(1151);const o={title:"Visual Testing"},a=void 0,r={id:"app/tooling/visual-testing",title:"Visual Testing",description:"What you'll learn",source:"@site/docs/app/tooling/visual-testing.mdx",sourceDirName:"app/tooling",slug:"/app/tooling/visual-testing",permalink:"/app/tooling/visual-testing",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/tooling/visual-testing.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",frontMatter:{title:"Visual Testing"},sidebar:"app",previous:{title:"TypeScript",permalink:"/app/tooling/typescript-support"},next:{title:"How to use Plugins",permalink:"/app/plugins/plugins-guide"}},l={},c=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"Introduction",id:"Introduction",level:2},{value:"Tooling",id:"Tooling",level:2},{value:"Applitools",id:"Applitools",level:3},{value:"Percy",id:"Percy",level:3},{value:"Happo",id:"Happo",level:3},{value:"Chromatic",id:"Chromatic",level:3},{value:"Wopee.io",id:"Wopeeio",level:3},{value:"Best practices",id:"Best-practices",level:2},{value:"Recognize the need for visual testing",id:"Recognize-the-need-for-visual-testing",level:3},{value:"DOM state",id:"DOM-state",level:3},{value:"Timestamps",id:"Timestamps",level:3},{value:"Application state",id:"Application-state",level:3},{value:"Visual diff elements",id:"Visual-diff-elements",level:3},{value:"Component testing",id:"Component-testing",level:3},{value:"See also",id:"See-also",level:2}];function h(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components},{DocsImage:n,DocsVideo:o,E2EOrCtTabs:a,Icon:r}=s;return n||p("DocsImage",!0),o||p("DocsVideo",!0),a||p("E2EOrCtTabs",!0),r||p("Icon",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.admonition,{type:"info",children:[(0,t.jsxs)(s.h5,{id:"What-youll-learn",children:[(0,t.jsx)(r,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"The difference between functional and visual testing"}),"\n",(0,t.jsx)(s.li,{children:"How to use visual testing plugins"}),"\n",(0,t.jsx)(s.li,{children:"Best practices for visual testing"}),"\n"]})]}),"\n",(0,t.jsx)(s.h2,{id:"Introduction",children:"Introduction"}),"\n",(0,t.jsx)(s.p,{children:"Cypress offers several solutions for testing an application including:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/app/end-to-end-testing/writing-your-first-end-to-end-test",children:"End-to-end testing"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/app/component-testing/get-started",children:"Component testing"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/app/guides/accessibility-testing",children:"Accessibility testing"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/ui-coverage/get-started/introduction",children:"UI Coverage"})}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["While many of our solutions, like ",(0,t.jsx)(s.a,{href:"/cloud/features/test-replay",children:"Test Replay"}),", ",(0,t.jsx)(s.a,{href:"/accessibility/get-started/introduction",children:"Cypress Accessibility"}),"\nand ",(0,t.jsx)(s.a,{href:"/ui-coverage/get-started/introduction",children:"UI Coverage"}),", offer a visual display of the application, having an automated way to ensure your\napplication visually looks as intended is crucial. This is\nwhere visual testing comes in."]}),"\n",(0,t.jsx)(s.p,{children:"Visual testing is a type of testing that focuses on the appearance of the application.\nIt is a way to ensure that the application looks the same to the user after changes are made."}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"it('completes todo', () => {\n  cy.visit('/') // opens TodoMVC running at \"baseUrl\"\n  cy.get('.new-todo').type('write tests{enter}')\n  cy.contains('.todo-list li', 'write tests').find('.toggle').check()\n\n  cy.contains('.todo-list li', 'write tests').should('have.class', 'completed')\n})\n"})}),(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"it('completes todo', () => {\n  cy.mount(<Todos />)\n  cy.get('.new-todo').type('write tests{enter}')\n  cy.contains('.todo-list li', 'write tests').find('.toggle').check()\n\n  cy.contains('.todo-list li', 'write tests').should('have.class', 'completed')\n})\n"})})]}),"\n",(0,t.jsxs)(s.p,{children:["You could technically write a functional test asserting the CSS properties using\nthe ",(0,t.jsxs)(s.a,{href:"/app/references/assertions#CSS",children:[(0,t.jsx)(s.code,{children:"have.css"})," assertion"]}),", but these may\nquickly become cumbersome to write and maintain, especially when visual styles\nrely on a lot of CSS styles."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"cy.get('.completed').should('have.css', 'text-decoration', 'line-through')\ncy.get('.completed').should('have.css', 'color', 'rgb(217,217,217)')\n"})}),"\n",(0,t.jsx)(s.p,{children:"Your visual styles may also rely on more than CSS, perhaps you want to ensure an\nSVG or image has rendered correctly or shapes were correctly drawn to a canvas."}),"\n",(0,t.jsxs)(s.p,{children:["Luckily, Cypress gives a stable platform for\n",(0,t.jsx)(s.a,{href:"/app/plugins/plugins-guide",children:"including plugins"})," that ",(0,t.jsx)(s.em,{children:"can perform visual\ntesting"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"Typically such plugins take an image snapshot of the entire application under\ntest or a specific element, and then compare the image to a previously approved\nbaseline image. If the images are the same (within a set pixel tolerance), it is\ndetermined that the web application looks the same to the user. If there are\ndifferences, then there has been some change to the DOM layout, fonts, colors or\nother visual properties that needs to be investigated."}),"\n",(0,t.jsxs)(s.p,{children:["For example, one can use the\n",(0,t.jsx)(s.a,{href:"https://github.com/meinaart/cypress-plugin-snapshots",children:"cypress-plugin-snapshots"}),"\nplugin and catch the following visual regression:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-css",children:".todo-list li.completed label {\n  color: #d9d9d9;\n  /* removed the line-through */\n}\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"it('completes todo', () => {\n  cy.visit('/')\n  cy.get('.new-todo').type('write tests{enter}')\n  cy.contains('.todo-list li', 'write tests').find('.toggle').check()\n\n  cy.contains('.todo-list li', 'write tests').should('have.class', 'completed')\n\n  // run 'npm install cypress-plugin-snapshots --save'\n  // capture the element screenshot and\n  // compare to the baseline image\n  cy.get('.todoapp').toMatchImageSnapshot({\n    imageConfig: {\n      threshold: 0.001,\n    },\n  })\n})\n"})}),"\n",(0,t.jsxs)(s.p,{children:["This open source plugin compares the baseline and the current images side by\nside if pixel difference is above the threshold; notice how the baseline image\n(",(0,t.jsx)(s.em,{children:"Expected result"}),") has the label text with the line through, while the new\nimage (",(0,t.jsx)(s.em,{children:"Actual result"}),") does not have it."]}),"\n",(0,t.jsx)(n,{src:"/img/app/visual-testing/diff.png",alt:"Baseline vs current image"}),"\n",(0,t.jsx)(s.p,{children:"Like most image comparison tools, the plugin also shows a difference view on\nmouse hover:"}),"\n",(0,t.jsx)(n,{src:"/img/app/visual-testing/diff-2.png",alt:"Highlighted changes"}),"\n",(0,t.jsx)(s.h2,{id:"Tooling",children:"Tooling"}),"\n",(0,t.jsxs)(s.p,{children:["There are several published, open source plugins, listed in the ",(0,t.jsx)(s.a,{href:"/app/plugins/plugins-list",children:"Plugins"})," Visual Testing section, and several\ncommercial companies have developed visual testing solutions on top of Cypress listed\nbelow."]}),"\n",(0,t.jsx)(s.h3,{id:"Applitools",children:"Applitools"}),"\n",(0,t.jsxs)(s.p,{children:["See ",(0,t.jsx)(s.a,{href:"https://applitools.com/cypress",children:"Applitools' official docs"})," and our ",(0,t.jsx)(s.a,{href:"https://applitools.com/tutorials/cypress.html",children:"tutorial"}),"."]}),"\n",(0,t.jsx)(o,{src:"https://youtube.com/embed/qVRjhABuyG0",title:"Creating a Flawless User Experience, End to End, Functional to Visual - Practical Hands-on Session"}),"\n",(0,t.jsxs)(s.p,{children:["Second joint webinar with Applitools with a focus on\n",(0,t.jsx)(s.a,{href:"/app/core-concepts/testing-types#What-is-Component-Testing",children:"Component Testing"})]}),"\n",(0,t.jsx)(o,{src:"https://youtube.com/embed/Bxh_ebMk1aM",title:"Visual Component Testing - (Applitools)"}),"\n",(0,t.jsx)(s.h3,{id:"Percy",children:"Percy"}),"\n",(0,t.jsxs)(s.p,{children:["See ",(0,t.jsx)(s.a,{href:"https://docs.percy.io/docs/cypress",children:"Percy's official docs"})," and our ",(0,t.jsx)(s.a,{href:"https://docs.percy.io/docs/cypress-tutorial",children:"tutorial"}),"."]}),"\n",(0,t.jsxs)(s.admonition,{type:"info",children:[(0,t.jsxs)(s.p,{children:["The Cypress ",(0,t.jsx)(r,{name:"github",inline:"true",contentType:"rwa"})," uses the\n",(0,t.jsx)(s.code,{children:"cy.percySnapshot()"})," command provided by the\n",(0,t.jsx)(s.a,{href:"https://github.com/percy/percy-cypress",children:"Cypress Percy plugin"})," to take visual\nsnapshots throughout the user journey end-to-end tests"]}),(0,t.jsxs)(s.p,{children:["Check out the\n",(0,t.jsx)(s.a,{href:"https://github.com/cypress-io/cypress-realworld-app/tree/develop/cypress/tests/ui",children:"Real World App test suites"}),"\nto see these Percy and Cypress in action."]})]}),"\n",(0,t.jsx)(o,{src:"https://youtube.com/embed/MXfZeE9RQDw",title:"Cypress.io + Percy = End-to-end functional and visual testing for the web"}),"\n",(0,t.jsx)(s.h3,{id:"Happo",children:"Happo"}),"\n",(0,t.jsxs)(s.p,{children:["See ",(0,t.jsx)(s.a,{href:"https://docs.happo.io/docs/cypress",children:"Happo's official docs"})," and our ",(0,t.jsx)(s.a,{href:"https://www.youtube.com/watch?v=C_p12IvN5HU",children:"webinar"})," and ",(0,t.jsx)(s.a,{href:"https://www.cypress.io/blog/2020/05/27/webcast-recording-keep-your-ui-sharp/",children:"blog"}),"."]}),"\n",(0,t.jsx)(o,{src:"https://youtube.com/embed/C_p12IvN5HU",title:"Keep your UI Sharp: Ensuring Functional and Visual Quality with Cypress.io + Happo.io"}),"\n",(0,t.jsx)(s.h3,{id:"Chromatic",children:"Chromatic"}),"\n",(0,t.jsx)(s.p,{children:"Chromatic leverages your existing Cypress setup\u2014configuration, mocking, and tests\u2014to enable visual testing of your application's UI.\nWith the Chromatic plugin installed, Chromatic captures an archive of your UI while your Cypress tests are running."}),"\n",(0,t.jsxs)(s.p,{children:["See ",(0,t.jsx)(s.a,{href:"https://www.chromatic.com/docs/cypress/setup/?utm_source=cypress_docs",children:"Chromatic's official docs"})," and their ",(0,t.jsx)(s.a,{href:"https://www.chromatic.com/blog/how-to-visual-test-with-cypress/?utm_source=cypress_docs",children:"blog"}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"Wopeeio",children:"Wopee.io"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://wopee.io",children:"Wopee.io"})," seamlessly integrates with Cypress to enhance test coverage, expedite maintenance, and ensure more resilient test runs. Aiming for autonomous visual testing, Wopee.io allows you to easily incorporate visual validation into your existing Cypress tests, adding an extra layer of quality assurance."]}),"\n",(0,t.jsxs)(s.p,{children:["See ",(0,t.jsx)(s.a,{href:"https://docs.wopee.io/integrations/cypress/01-getting-started/?utm_source=cypress_docs",children:"Wopee.io's official docs"}),", our ",(0,t.jsx)(s.a,{href:"https://youtu.be/t008fYcBoi0",children:"webinar"})," and their ",(0,t.jsx)(s.a,{href:"https://wopee.io/blog/autopilot-your-sw-testing/?utm_source=cypress_docs",children:"blog"})," and ",(0,t.jsx)(s.a,{href:"https://youtu.be/t008fYcBoi0",children:"webinar"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"Best-practices",children:"Best practices"}),"\n",(0,t.jsx)(s.p,{children:"As a general rule there are some best practices when visual testing."}),"\n",(0,t.jsx)(s.h3,{id:"Recognize-the-need-for-visual-testing",children:"Recognize the need for visual testing"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(r,{name:"exclamation-triangle",color:"red"})," Assertions that verify style properties"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"cy.get('.completed').should('have.css', 'text-decoration', 'line-through')\n  .and('have.css', 'color', 'rgb(217,217,217)')\ncy.get('.user-info').should('have.css', 'display', 'none')\n...\n"})}),"\n",(0,t.jsx)(s.p,{children:"If your end-to-end tests become full of assertions checking visibility, color\nand other style properties, it might be time to start using visual diffing to\nverify the page appearance."}),"\n",(0,t.jsx)(s.h3,{id:"DOM-state",children:"DOM state"}),"\n",(0,t.jsx)(s.admonition,{type:"tip",children:(0,t.jsxs)(s.p,{children:[(0,t.jsx)(r,{name:"check-circle",color:"green"})," ",(0,t.jsx)(s.strong,{children:"Best Practice:"})," Take a snapshot after\nyou confirm the page is done changing."]})}),"\n",(0,t.jsxs)(s.p,{children:["For example, if the snapshot command is ",(0,t.jsx)(s.code,{children:"cy.mySnapshotCommand"}),":"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(r,{name:"exclamation-triangle",color:"red"})," ",(0,t.jsx)(s.strong,{children:"Incorrect Usage"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"// the web application takes time to add the new item,\n// sometimes it takes the snapshot BEFORE the new item appears\ncy.get('.new-todo').type('write tests{enter}')\ncy.mySnapshotCommand()\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(r,{name:"check-circle",color:"green"})," ",(0,t.jsx)(s.strong,{children:"Correct Usage"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"// use a functional assertion to ensure\n// the web application has re-rendered the page\ncy.get('.new-todo').type('write tests{enter}')\ncy.contains('.todo-list li', 'write tests')\n// great, the new item is displayed,\n// now we can take the snapshot\ncy.mySnapshotCommand()\n"})}),"\n",(0,t.jsx)(s.h3,{id:"Timestamps",children:"Timestamps"}),"\n",(0,t.jsx)(s.admonition,{type:"tip",children:(0,t.jsxs)(s.p,{children:[(0,t.jsx)(r,{name:"check-circle",color:"green"})," ",(0,t.jsx)(s.strong,{children:"Best Practice:"})," Control the timestamp\ninside the application under test."]})}),"\n",(0,t.jsxs)(s.p,{children:["Below we freeze the operating system's time to ",(0,t.jsx)(s.code,{children:"Jan 1, 2018"})," using\n",(0,t.jsx)(s.a,{href:"/api/commands/clock",children:"cy.clock()"})," to ensure all images displaying dates and\ntimes match."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"const now = new Date(2018, 1, 1)\n\ncy.clock(now)\n// ... test\ncy.mySnapshotCommand()\n"})}),"\n",(0,t.jsx)(s.h3,{id:"Application-state",children:"Application state"}),"\n",(0,t.jsx)(s.admonition,{type:"tip",children:(0,t.jsxs)(s.p,{children:[(0,t.jsx)(r,{name:"check-circle",color:"green"})," ",(0,t.jsx)(s.strong,{children:"Best Practice:"})," Use ",(0,t.jsx)(s.a,{href:"/api/commands/fixture",children:"cy.fixture()"}),"\nand network mocking to set the application state."]})}),"\n",(0,t.jsxs)(s.p,{children:["Below we stub network calls using ",(0,t.jsx)(s.a,{href:"/api/commands/intercept",children:"cy.intercept()"})," to\nreturn the same response data for each XHR request. This ensures that the data\ndisplayed in our application images does not change."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"cy.intercept('/api/items', { fixture: 'items' }).as('getItems')\n// ... action\ncy.wait('@getItems')\ncy.mySnapshotCommand()\n"})}),"\n",(0,t.jsx)(s.h3,{id:"Visual-diff-elements",children:"Visual diff elements"}),"\n",(0,t.jsx)(s.admonition,{type:"tip",children:(0,t.jsxs)(s.p,{children:[(0,t.jsx)(r,{name:"check-circle",color:"green"})," ",(0,t.jsx)(s.strong,{children:"Best Practice:"})," Use visual diffing\nto check individual DOM elements rather than the entire page."]})}),"\n",(0,t.jsx)(s.p,{children:'Targeting specific DOM element will help avoid visual changes from component "X"\nbreaking tests in other unrelated components.'}),"\n",(0,t.jsx)(s.h3,{id:"Component-testing",children:"Component testing"}),"\n",(0,t.jsx)(s.admonition,{type:"tip",children:(0,t.jsxs)(s.p,{children:[(0,t.jsx)(r,{name:"check-circle",color:"green"})," ",(0,t.jsx)(s.strong,{children:"Best Practice:"})," Use ",(0,t.jsx)(s.a,{href:"/app/component-testing/get-started",children:"Component Testing"}),"\nto test the individual components functionality in addition to end-to-end and visual\ntests."]})}),"\n",(0,t.jsx)(s.h2,{id:"See-also",children:"See also"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/api/node-events/after-screenshot-api",children:"After Screenshot API"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/api/commands/screenshot",children:"cy.screenshot()"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/api/cypress-api/screenshot-api",children:"Cypress.Screenshot"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/app/plugins/plugins-guide",children:"Plugins"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/app/plugins/plugins-list",children:"Visual Testing Plugins"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/api/node-events/overview",children:"Node Events Overview"})}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(r,{name:"github",contentType:"rwa"})," is a full stack example application that\ndemonstrates ",(0,t.jsx)(s.strong,{children:"best practices and scalable strategies with Cypress in practical\nand realistic scenarios"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Read the blog post\n",(0,t.jsx)(s.a,{href:"https://www.cypress.io/blog/2020/10/02/debug-a-flaky-visual-regression-test/",children:"Debug a Flaky Visual Regression Test"})]}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}function p(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,s,n)=>{n.d(s,{Z:()=>r,a:()=>a});var t=n(7294);const i={},o=t.createContext(i);function a(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);