"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[7008],{5534:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>l});var s=i(5893),o=i(1151);const t={title:"Cypress.config"},r=void 0,c={id:"api/cypress-api/config",title:"Cypress.config",description:"get and set configuration options in your tests.",source:"@site/docs/api/cypress-api/config.mdx",sourceDirName:"api/cypress-api",slug:"/api/cypress-api/config",permalink:"/api/cypress-api/config",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/cypress-api/config.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",frontMatter:{title:"Cypress.config"},sidebar:"api",previous:{title:"Cypress.browser",permalink:"/api/cypress-api/browser"},next:{title:"Cypress.Cookies",permalink:"/api/cypress-api/cookies"}},a={},l=[{value:"Syntax",id:"Syntax",level:2},{value:"Arguments",id:"Arguments",level:3},{value:"Examples",id:"Examples",level:2},{value:"No Arguments",id:"No-Arguments",level:3},{value:"Get all configuration options from the Cypress configuration",id:"Get-all-configuration-options-from-the-Cypress-configuration",level:4},{value:"Name",id:"Name",level:3},{value:"Return a single configuration option from the Cypress configuration",id:"Return-a-single-configuration-option-from-the-Cypress-configuration",level:4},{value:"Name and Value",id:"Name-and-Value",level:3},{value:"Change the values of configuration options from the Cypress configuration from within your tests",id:"Change-the-values-of-configuration-options-from-the-Cypress-configuration-from-within-your-tests",level:4},{value:"Object",id:"Object",level:3},{value:"Override multiple options from the Cypress configuration by passing an object",id:"Override-multiple-options-from-the-Cypress-configuration-by-passing-an-object",level:4},{value:"Notes",id:"Notes",level:2},{value:"Not all config values can be changed at all times",id:"Not-all-config-values-can-be-changed-at-all-times",level:3},{value:"Test Configuration vs <code>Cypress.config()</code>",id:"Test-Configuration-vs-Cypressconfig",level:3},{value:"<code>Cypress.config()</code> executes Synchronously",id:"Cypressconfig-executes-Synchronously",level:3},{value:"Why is it <code>Cypress.config</code> and not <code>cy.config</code>?",id:"Why-is-it-Cypressconfig-and-not-cyconfig",level:3},{value:"History",id:"History",level:2},{value:"See also",id:"See-also",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components},{CypressConfigFileTabs:i,Icon:t}=n;return i||p("CypressConfigFileTabs",!0),t||p("Icon",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"get"})," and ",(0,s.jsx)(n.code,{children:"set"})," configuration options ",(0,s.jsx)(n.em,{children:"in your tests"}),"."]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)("strong",{children:"New to Cypress?"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/app/references/configuration",children:"Read about configuration first."})})]}),"\n",(0,s.jsxs)(n.admonition,{type:"caution",children:[(0,s.jsx)("strong",{children:"Scope"}),(0,s.jsxs)(n.p,{children:["Configuration set using ",(0,s.jsx)(n.code,{children:"Cypress.config"})," ",(0,s.jsx)(n.em,{children:"is only in scope for the current spec\nfile."})]}),(0,s.jsx)(n.p,{children:"Cypress runs each spec file in isolation: the browser is exited between specs.\nConfiguration changed in one spec won't be visible in other specs."})]}),"\n",(0,s.jsxs)(n.admonition,{type:"caution",children:[(0,s.jsx)("strong",{children:"Note"}),(0,s.jsxs)(n.p,{children:["Not all configuration values can be changed during runtime. See ",(0,s.jsx)(n.a,{href:"#Notes",children:"Notes"}),"\nbelow for details."]})]}),"\n",(0,s.jsx)(n.h2,{id:"Syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Cypress.config()\nCypress.config(name)\nCypress.config(name, value)\nCypress.config(object)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"Arguments",children:"Arguments"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(t,{name:"angle-right"})," ",(0,s.jsxs)(n.strong,{children:["name ",(0,s.jsx)(n.em,{children:"(String)"})]})]}),"\n",(0,s.jsx)(n.p,{children:"The name of the configuration to get or set."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(t,{name:"angle-right"})," ",(0,s.jsxs)(n.strong,{children:["value ",(0,s.jsx)(n.em,{children:"(Any)"})]})]}),"\n",(0,s.jsx)(n.p,{children:"The value of the configuration to set."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(t,{name:"angle-right"})," ",(0,s.jsxs)(n.strong,{children:["object ",(0,s.jsx)(n.em,{children:"(Object)"})]})]}),"\n",(0,s.jsx)(n.p,{children:"Set multiple configuration options with an object literal."}),"\n",(0,s.jsx)(n.h2,{id:"Examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"No-Arguments",children:"No Arguments"}),"\n",(0,s.jsxs)(n.h4,{id:"Get-all-configuration-options-from-the-Cypress-configuration",children:["Get all configuration options from the ",(0,s.jsx)(n.a,{href:"/app/references/configuration",children:"Cypress configuration"})]}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  defaultCommandTimeout: 10000,\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  defaultCommandTimeout: 10000,\n})\n"})})]}),"\n","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Cypress.config() // => {defaultCommandTimeout: 10000, pageLoadTimeout: 30000, ...}\n"})}),"\n","\n",(0,s.jsx)(n.h3,{id:"Name",children:"Name"}),"\n",(0,s.jsxs)(n.h4,{id:"Return-a-single-configuration-option-from-the-Cypress-configuration",children:["Return a single configuration option from the ",(0,s.jsx)(n.a,{href:"/app/references/configuration",children:"Cypress configuration"})]}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  pageLoadTimeout: 60000,\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  pageLoadTimeout: 60000,\n})\n"})})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Cypress.config('pageLoadTimeout') // => 60000\n"})}),"\n",(0,s.jsx)(n.h3,{id:"Name-and-Value",children:"Name and Value"}),"\n",(0,s.jsxs)(n.h4,{id:"Change-the-values-of-configuration-options-from-the-Cypress-configuration-from-within-your-tests",children:["Change the values of configuration options from the ",(0,s.jsx)(n.a,{href:"/app/references/configuration",children:"Cypress configuration"})," from within your tests"]}),"\n",(0,s.jsxs)(n.admonition,{type:"caution",children:[(0,s.jsx)("strong",{children:"Scope"}),(0,s.jsxs)(n.p,{children:["Remember, any changes that you make to configuration using this API will be in\neffect for the remainder of the tests ",(0,s.jsx)(n.em,{children:"in the same spec file."})]})]}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  viewportWidth: 1280,\n  viewportHeight: 720,\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  viewportWidth: 1280,\n  viewportHeight: 720,\n})\n"})})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Cypress.config('viewportWidth', 800)\n\nCypress.config('viewportWidth') // => 800\n"})}),"\n",(0,s.jsx)(n.h3,{id:"Object",children:"Object"}),"\n",(0,s.jsxs)(n.h4,{id:"Override-multiple-options-from-the-Cypress-configuration-by-passing-an-object",children:["Override multiple options from the ",(0,s.jsx)(n.a,{href:"/app/references/configuration",children:"Cypress configuration"})," by passing an object"]}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  defaultCommandTimeout: 4000,\n  pageLoadTimeout: 30000,\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  defaultCommandTimeout: 4000,\n  pageLoadTimeout: 30000,\n})\n"})})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Cypress.config({\n  defaultCommandTimeout: 10000,\n  viewportHeight: 900,\n})\n\nCypress.config() // => {defaultCommandTimeout: 10000, viewportHeight: 900, ...}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"Notes",children:"Notes"}),"\n",(0,s.jsx)(n.h3,{id:"Not-all-config-values-can-be-changed-at-all-times",children:"Not all config values can be changed at all times"}),"\n",(0,s.jsxs)(n.p,{children:["Some configuration values are readonly and cannot be changed while running a\ntest. Anything that's not directly under Cypress's control - like timeouts or\nenvironment variables - will be ignored at run-time. Be sure to review the list\nof\n",(0,s.jsx)(n.a,{href:"/app/references/configuration#Test-Configuration",children:"test configuration options"}),"."]}),"\n",(0,s.jsxs)(n.h3,{id:"Test-Configuration-vs-Cypressconfig",children:["Test Configuration vs ",(0,s.jsx)(n.code,{children:"Cypress.config()"})]}),"\n",(0,s.jsxs)(n.p,{children:["To apply specific Cypress configuration values to a suite or test, you can pass\na ",(0,s.jsx)(n.a,{href:"/app/references/configuration#Test-Configuration",children:"test configuration"}),"\nobject to the test or suite function."]}),"\n",(0,s.jsxs)(n.p,{children:["While ",(0,s.jsx)(n.code,{children:"Cypress.config()"})," changes configuration values through the entire spec\nfile, using test configuration will only change configuration values during the\nsuite or test where they are set. The values will then reset to the previous\ndefault values after the suite or test is complete."]}),"\n",(0,s.jsxs)(n.p,{children:["See the full guide on\n",(0,s.jsx)(n.a,{href:"/app/references/configuration#Test-Configuration",children:"test configuration"}),"."]}),"\n",(0,s.jsxs)(n.h3,{id:"Cypressconfig-executes-Synchronously",children:[(0,s.jsx)(n.code,{children:"Cypress.config()"})," executes Synchronously"]}),"\n",(0,s.jsxs)(n.p,{children:["It's important to note that ",(0,s.jsx)(n.code,{children:"Cypress.config()"})," executes synchronously and will\nnot wait for the Cypress commands above it to execute. If you need to update\nyour configuration mid-test, be sure to chain the\n",(0,s.jsx)(n.a,{href:"/app/core-concepts/introduction-to-cypress#Commands-Are-Asynchronous",children:"asynchronously Cypress command"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"it('using cy.then', () => {\n  cy.visit('/my-test_page')\n  cy.click('#download-html').then(() => {\n    Cypress.config('baseUrl', null)\n  })\n  cy.visit('/downloads/contents.html')\n})\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"Why-is-it-Cypressconfig-and-not-cyconfig",children:["Why is it ",(0,s.jsx)(n.code,{children:"Cypress.config"})," and not ",(0,s.jsx)(n.code,{children:"cy.config"}),"?"]}),"\n",(0,s.jsxs)(n.p,{children:["As a rule of thumb anything you call from ",(0,s.jsx)(n.code,{children:"Cypress"})," affects global state.\nAnything you call from ",(0,s.jsx)(n.code,{children:"cy"})," affects local state."]}),"\n",(0,s.jsxs)(n.p,{children:["Since the configuration added or changed by ",(0,s.jsx)(n.code,{children:"Cypress.config"})," is only in scope\nfor the current spec file, you'd think that it should be ",(0,s.jsx)(n.code,{children:"cy.config"})," and not\n",(0,s.jsx)(n.code,{children:"Cypress.config"}),"\u2026and you'd be right. The fact that ",(0,s.jsx)(n.code,{children:"Cypress.config"}),"\naffects local state is an artifact of the API evolving over time:\n",(0,s.jsx)(n.code,{children:"Cypress.config"})," used to affect global state\u2014configuration added in one\ntest spec file was available in other specs\u2014but the Cypress team wisely\nmade each spec run in isolation in ",(0,s.jsx)(n.a,{href:"/app/references/changelog#3-0-0",children:(0,s.jsx)(n.code,{children:"3.0.0"})}),"\nand by that time ",(0,s.jsx)(n.code,{children:"Cypress.config"})," was public API."]}),"\n",(0,s.jsx)(n.h2,{id:"History",children:"History"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Version"}),(0,s.jsx)(n.th,{children:"Changes"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"0.12.6"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"Cypress.config"})," added"]})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"See-also",children:"See also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/app/references/configuration",children:"Cypress configuration"})}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.a,{href:"/app/references/environment-variables",children:"Environment Variable"})," guide"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/app/references/configuration#Test-Configuration",children:"Test Configuration"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>r});var s=i(7294);const o={},t=s.createContext(o);function r(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);