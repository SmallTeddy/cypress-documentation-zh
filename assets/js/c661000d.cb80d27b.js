"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[3352],{86:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>a,contentTitle:()=>t,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var n=r(5893),o=r(1151);const i={title:"Cross Browser Testing"},t=void 0,c={id:"app/guides/cross-browser-testing",title:"Cross Browser Testing",description:"What you'll learn",source:"@site/docs/app/guides/cross-browser-testing.mdx",sourceDirName:"app/guides",slug:"/app/guides/cross-browser-testing",permalink:"/app/guides/cross-browser-testing",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/guides/cross-browser-testing.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",frontMatter:{title:"Cross Browser Testing"},sidebar:"app",previous:{title:"Conditional Testing",permalink:"/app/guides/conditional-testing"},next:{title:"Cross Origin Testing",permalink:"/app/guides/cross-origin-testing"}},a={},l=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"Continuous Integration Strategies",id:"Continuous-Integration-Strategies",level:2},{value:"Periodic Basis",id:"Periodic-Basis",level:3},{value:"Production Deployment",id:"Production-Deployment",level:3},{value:"Subset of Tests",id:"Subset-of-Tests",level:3},{value:"Parallelize per browser",id:"Parallelize-per-browser",level:3},{value:"Running Specific Tests by Browser",id:"Running-Specific-Tests-by-Browser",level:3},{value:"See also",id:"See-also",level:2}];function d(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components},{DocsImage:r,Icon:i}=s;return r||h("DocsImage",!0),i||h("Icon",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.h5,{id:"What-youll-learn",children:[(0,n.jsx)(i,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"How to run tests across multiple browsers"}),"\n",(0,n.jsx)(s.li,{children:"Strategies for incorporating cross-browser testing into your CI process"}),"\n"]})]}),"\n",(0,n.jsx)(s.p,{children:"Cypress has the capability to run tests across multiple browsers. Currently,\nCypress has support for\nChrome-family browsers, Firefox, and\nWebKit (Safari's\nbrowser engine)."}),"\n",(0,n.jsxs)(s.p,{children:["Excluding ",(0,n.jsx)(s.a,{href:"/app/references/launching-browsers#Electron-Browser",children:"Electron"}),", any\nbrowser you want to run Cypress tests in needs to be installed on your local\nsystem or CI environment. A full list of detected browsers is displayed within\nthe browser selection menu of ",(0,n.jsx)(s.a,{href:"/app/core-concepts/open-mode",children:"Cypress"}),"."]}),"\n",(0,n.jsx)(r,{src:"/img/app/cross-browser-testing/v10/browser-select-FF.png",alt:"Cypress with Firefox selected as the browser"}),"\n",(0,n.jsxs)(s.p,{children:["The desired browser can also specified via the\n",(0,n.jsx)(s.a,{href:"/app/references/command-line#Options",children:(0,n.jsx)(s.code,{children:"--browser"})})," flag when using the\n",(0,n.jsx)(s.a,{href:"/app/references/command-line#cypress-run",children:(0,n.jsx)(s.code,{children:"run"})})," command to launch Cypress. For\nexample, to run Cypress tests in Chrome:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"cypress run --browser chrome\n"})}),"\n",(0,n.jsx)(s.p,{children:"To make launching of Cypress with a specific browser even more convenient, npm\nscripts can be used as a shortcut:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-json",metastring:"title='package.json'",children:'"scripts": {\n  "cy:run:chrome": "cypress run --browser chrome",\n  "cy:run:firefox": "cypress run --browser firefox"\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"Continuous-Integration-Strategies",children:"Continuous Integration Strategies"}),"\n",(0,n.jsx)(s.p,{children:"When incorporating testing of multiple browsers within your QA process, you must\nimplement a CI strategy that provides an optimal level of confidence while\ntaking into consideration test duration and infrastructure costs. This optimal\nstrategy will vary by the needs of a particular project. This guide we\npresent several strategies to consider when crafting the strategy for your\nproject."}),"\n",(0,n.jsxs)(s.p,{children:["CI strategies will be demonstrated using the\n",(0,n.jsx)(s.a,{href:"https://circleci.com/orbs/registry/orb/cypress-io/cypress",children:"Circle CI Cypress Orb"}),"\nfor its concise and readable configuration, but the same concepts apply for most\nCI providers."]}),"\n",(0,n.jsx)(s.admonition,{type:"info",children:(0,n.jsxs)(s.p,{children:["The CI configuration examples within this guide use\n",(0,n.jsx)(s.a,{href:"https://github.com/cypress-io/cypress-docker-images/tree/master/browsers",children:"Cypress's Docker images"}),"\nto provision testing environments with desired versions of Node, Chrome, and\nFirefox."]})}),"\n",(0,n.jsx)(s.h3,{id:"Periodic-Basis",children:"Periodic Basis"}),"\n",(0,n.jsx)(s.p,{children:"Generally, it is desired to run tests with each pushed commit, but it may not be\nnecessary to do so for all browsers. For example, we can choose to run tests\nwithin Chrome for each commit, but only run Firefox on a periodic basis (i.e.\nnightly). The periodic frequency will depend on the scheduling of your project\nreleases, so consider a test run frequency that is appropriate for the release\nschedule of your project."}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsx)("strong",{children:"Cron Scheduling"}),(0,n.jsxs)(s.p,{children:["Typically CI providers allow for the scheduling of CI jobs via\n",(0,n.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Cron",children:"cron expressions"}),". For example, the\nexpression ",(0,n.jsx)(s.code,{children:"0 0 * * *"}),' translates to "everyday at midnight" or nightly. Helpful\n',(0,n.jsx)(s.a,{href:"https://crontab.guru/",children:"online utilities"})," are available to assist with creation\nand translation of cron expressions."]})]}),"\n",(0,n.jsxs)(s.p,{children:["The following example demonstrates a nightly CI schedule against production\n(",(0,n.jsx)(s.code,{children:"master"})," branch) for Firefox:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",metastring:"title='.circleci/config.yml'",children:"version: 2.1\norbs:\n  cypress: cypress-io/cypress@3\nworkflows:\n  nightly:\n    triggers:\n      - schedule:\n          cron: '0 0 * * *'\n          filters:\n            branches:\n              only:\n                - master\n    jobs:\n      - cypress/run:\n          install-browsers: true\n          cypress-command: 'npx cypress run --browser firefox'\n          start-command: 'npm start'\n"})}),"\n",(0,n.jsx)(s.h3,{id:"Production-Deployment",children:"Production Deployment"}),"\n",(0,n.jsx)(s.p,{children:"For projects that exhibit consistently stable behavior across browsers, it may\nbe better to run tests against additional browsers only before merging changes\nin the production deployment branch."}),"\n",(0,n.jsxs)(s.p,{children:["The following example demonstrates only running Firefox tests when commits are\nmerged into a specific branch (",(0,n.jsx)(s.code,{children:"develop"})," branch in this case) so any potential\nFirefox issues can be caught before a production release:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",metastring:"title='.circleci/config.yml'",children:"version: 2.1\norbs:\n  cypress: cypress-io/cypress@3\nworkflows:\n  test_develop:\n    jobs:\n      - filters:\n        branches:\n          only:\n            - develop\n      - cypress/run:\n          install-browsers: true\n          cypress-command: 'npx cypress run --browser firefox'\n          start-command: 'npm start'\n"})}),"\n",(0,n.jsx)(s.h3,{id:"Subset-of-Tests",children:"Subset of Tests"}),"\n",(0,n.jsxs)(s.p,{children:['We can choose to only run a subset of tests against a given browser. For\nexample, we can execute only the happy or critical path related test files, or a\ndirectory of specific "smoke" test files. It\'s not always necessary to have\nboth browsers always running ',(0,n.jsx)(s.em,{children:"all"})," tests."]}),"\n",(0,n.jsxs)(s.p,{children:["In the example below, the Chrome ",(0,n.jsx)(s.code,{children:"cypress/run"})," job runs ",(0,n.jsx)(s.em,{children:"all"})," tests against\nChrome and reports results to ",(0,n.jsx)(s.a,{href:"https://on.cypress.io/cloud",children:"Cypress Cloud"})," using\na\n(",(0,n.jsx)(s.a,{href:"/cloud/features/smart-orchestration/parallelization#Grouping-test-runs",children:"group"}),")\nnamed ",(0,n.jsx)(s.code,{children:"chrome"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["The Firefox ",(0,n.jsx)(s.code,{children:"cypress/run"})," job runs a subset of tests, defined in the ",(0,n.jsx)(s.code,{children:"spec"}),"\nparameter, against the Firefox browser, and reports the results to\n",(0,n.jsx)(s.a,{href:"https://on.cypress.io/cloud",children:"Cypress Cloud"})," under the group\n",(0,n.jsx)(s.code,{children:"firefox-critical-path"}),"."]}),"\n",(0,n.jsx)(s.admonition,{type:"info",children:(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Note:"})," The ",(0,n.jsx)(s.code,{children:"name"})," under each ",(0,n.jsx)(s.code,{children:"cypress/run"})," job which will be shown in the\nCircle CI workflow UI to distinguish the jobs."]})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",metastring:"title='.circleci/config.yml'",children:"version: 2.1\norbs:\n  cypress: cypress-io/cypress@3\nworkflows:\n  build:\n    jobs:\n      - cypress/run:\n          name: Chrome\n          start-command: 'npm start'\n          install-browsers: true\n          cypress-command: 'npx cypress run --browser chrome --record --group chrome'\n      - cypress/run:\n          name: Firefox\n          start-command: 'npm start'\n          cypress-command: 'npx cypress run --browser firefox --record --group\n            firefox-critical-path --spec\n            cypress/e2e/signup.cy.js,cypress/e2e/login.cy.js'\n"})}),"\n",(0,n.jsx)(s.h3,{id:"Parallelize-per-browser",children:"Parallelize per browser"}),"\n",(0,n.jsxs)(s.p,{children:["Execution of test files can be parallelized on a per\n",(0,n.jsx)(s.a,{href:"/cloud/features/smart-orchestration/parallelization#Grouping-test-runs",children:"group"}),"\nbasis, where test files can be grouped by the browser under test. This\nversatility enables the ability to allocate the desired amount of CI resources\ntowards a browser to either improve test duration or to minimize CI costs."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"You do not have to run all browsers at the same parallelization level."})," In\nthe example below, the Chrome dedicated ",(0,n.jsx)(s.code,{children:"cypress/run"})," job runs ",(0,n.jsx)(s.em,{children:"all"})," tests in\nparallel, across ",(0,n.jsx)(s.strong,{children:"4 machines"}),", against Chrome and reports results to\n",(0,n.jsx)(s.a,{href:"https://on.cypress.io/cloud",children:"Cypress Cloud"})," under the group name ",(0,n.jsx)(s.code,{children:"chrome"}),". The\nFirefox dedicated ",(0,n.jsx)(s.code,{children:"cypress/run"})," job runs a ",(0,n.jsx)(s.em,{children:"subset"})," of tests in parallel, across\n",(0,n.jsx)(s.strong,{children:"2 machines"}),", defined by the ",(0,n.jsx)(s.code,{children:"spec"})," parameter, against the Firefox browser and\nreports results to ",(0,n.jsx)(s.a,{href:"https://on.cypress.io/cloud",children:"Cypress Cloud"})," under the group\nnamed ",(0,n.jsx)(s.code,{children:"firefox"}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",metastring:"title='.circleci/config.yml'",children:"version: 2.1\norbs:\n  cypress: cypress-io/cypress@3\nworkflows:\n  build:\n    jobs:\n      - cypress/run:\n          name: Chrome\n          cypress-command: 'npx cypress run --record --parallel --group chrome --browser chrome'\n          start-command: 'npm start'\n          parallelism: 4\n          install-browsers: true\n      - cypress/run:\n          name: Firefox\n          cypress-command:\n            'npx cypress run --record --parallel --group firefox --browser\n            firefox --spec\n            cypress/e2e/app.cy.js,cypress/e2e/login.cy.js,cypress/e2e/about.cy.js'\n          start-command: 'npm start'\n          parallelism: 2\n          install-browsers: true\n"})}),"\n",(0,n.jsx)(s.h3,{id:"Running-Specific-Tests-by-Browser",children:"Running Specific Tests by Browser"}),"\n",(0,n.jsx)(s.p,{children:"There may be instances where it can be useful to run or ignore one or more tests\nwhen in specific browsers. For example, test run duration can be reduced by only\nrunning smoke-tests against Chrome and not Firefox. This type of granular\nselection of test execution depends on the type of tests and the level of\nconfidence those specific tests provide to the overall project."}),"\n",(0,n.jsx)(s.admonition,{type:"info",children:(0,n.jsx)(s.p,{children:"When considering to ignore or only run a particular test within a given browser,\nassess the true need for the test to run on multiple browsers."})}),"\n",(0,n.jsxs)(s.p,{children:["You can specify a browser to run or exclude by passing a matcher to the suite or\ntest within the\n",(0,n.jsx)(s.a,{href:"/app/references/configuration#Test-Configuration",children:"test configuration"}),". The\n",(0,n.jsx)(s.code,{children:"browser"})," option accepts the same arguments as\n",(0,n.jsx)(s.a,{href:"/api/cypress-api/isbrowser#Arguments",children:"Cypress.isBrowser()"}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-js",metastring:"title='test.cy.js'",children:"// Run the test if Cypress is running\n// using the built-in Electron browser\nit('has access to clipboard', { browser: 'electron' }, () => {\n  // ...\n})\n\n// Run the test if Cypress is run via Firefox\nit('Download extension in Firefox', { browser: 'firefox' }, () => {\n  cy.get('#dl-extension').should('contain', 'Download Firefox Extension')\n})\n\n// Run happy path tests if Cypress is run via Firefox\ndescribe('happy path suite', { browser: 'firefox' }, () => {\n  it('...')\n})\n\n// Ignore test if Cypress is running via Chrome\n// This test is not recorded to Cypress Cloud\nit('Show warning outside Chrome', { browser: '!chrome' }, () => {\n  cy.get('.browser-warning').should(\n    'contain',\n    'For optimal viewing, use Chrome browser'\n  )\n})\n"})}),"\n",(0,n.jsx)(s.h2,{id:"See-also",children:"See also"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"/api/node-events/browser-launch-api",children:"Browser Launch API"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"/api/cypress-api/browser",children:"Cypress.browser"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"/api/cypress-api/isbrowser",children:"Cypress.isBrowser"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"/app/references/launching-browsers",children:"Launching Browsers"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"/app/references/configuration#Test-Configuration",children:"Test Configuration"})}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,o.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}function h(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,s,r)=>{r.d(s,{Z:()=>c,a:()=>t});var n=r(7294);const o={},i=n.createContext(o);function t(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);