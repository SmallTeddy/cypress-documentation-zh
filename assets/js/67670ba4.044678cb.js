"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[5279],{5947:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>a});var t=s(5893),i=s(1151);const r={title:"Writing and Organizing Tests",sidebar_position:30},o=void 0,c={id:"app/core-concepts/writing-and-organizing-tests",title:"Writing and Organizing Tests",description:"What you'll learn",source:"@site/docs/app/core-concepts/writing-and-organizing-tests.mdx",sourceDirName:"app/core-concepts",slug:"/app/core-concepts/writing-and-organizing-tests",permalink:"/app/core-concepts/writing-and-organizing-tests",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/core-concepts/writing-and-organizing-tests.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",sidebarPosition:30,frontMatter:{title:"Writing and Organizing Tests",sidebar_position:30},sidebar:"app",previous:{title:"Testing Types",permalink:"/app/core-concepts/testing-types"},next:{title:"Interacting with Elements",permalink:"/app/core-concepts/interacting-with-elements"}},l={},a=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"Folder structure",id:"Folder-structure",level:2},{value:"Configuring Folder Structure",id:"Configuring-Folder-Structure",level:3},{value:"Spec files",id:"Spec-files",level:3},{value:"Fixture Files",id:"Fixture-Files",level:3},{value:"Asset Files",id:"Asset-Files",level:3},{value:"Download Files",id:"Download-Files",level:4},{value:"Screenshot Files",id:"Screenshot-Files",level:4},{value:"Video Files",id:"Video-Files",level:4},{value:"Asset File Paths",id:"Asset-File-Paths",level:4},{value:"Assets in Cypress Cloud",id:"Assets-in-Cypress-Cloud",level:4},{value:"Plugins file",id:"Plugins-file",level:3},{value:"Support file",id:"Support-file",level:3},{value:"Execution",id:"Execution",level:4},{value:"Troubleshooting",id:"Troubleshooting",level:3},{value:"Writing tests",id:"Writing-tests",level:2},{value:"Test Structure",id:"Test-Structure",level:3},{value:"Hooks",id:"Hooks",level:3},{value:"The order of hook and test execution is as follows:",id:"The-order-of-hook-and-test-execution-is-as-follows",level:4},{value:"Excluding and Including Tests",id:"Excluding-and-Including-Tests",level:3},{value:"Test Isolation",id:"Test-Isolation",level:3},{value:"Test Configuration",id:"Test-Configuration",level:3},{value:"Syntax",id:"Syntax",level:4},{value:"Allowed config values",id:"Allowed-config-values",level:4},{value:"Suite configuration",id:"Suite-configuration",level:4},{value:"Single test configuration",id:"Single-test-configuration",level:4},{value:"Dynamically Generate Tests",id:"Dynamically-Generate-Tests",level:3},{value:"Assertion Styles",id:"Assertion-Styles",level:3},{value:"Running tests",id:"Running-tests",level:2},{value:"Test statuses",id:"Test-statuses",level:2},{value:"Passed",id:"Passed",level:3},{value:"Failed",id:"Failed",level:3},{value:"Pending",id:"Pending",level:3},{value:"Skipped",id:"Skipped",level:3},{value:"Watching tests",id:"Watching-tests",level:2},{value:"What is watched?",id:"What-is-watched",level:3},{value:"Files",id:"Files",level:4},{value:"Folders",id:"Folders",level:4},{value:"What isn&#39;t watched?",id:"What-isnt-watched",level:3},{value:"Configuration",id:"Configuration",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components},{DocsImage:s,Icon:r,Logo:o,TabItem:c,Tabs:l}=n;return s||p("DocsImage",!0),r||p("Icon",!0),o||p("Logo",!0),c||p("TabItem",!0),l||p("Tabs",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.h5,{id:"What-youll-learn",children:[(0,t.jsx)(r,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"How to organize your tests in Cypress and the types of supported files"}),"\n",(0,t.jsx)(n.li,{children:"How to write tests in Cypress including hooks, exclusions, and configurations"}),"\n",(0,t.jsx)(n.li,{children:"Test statuses and how to interpret them"}),"\n",(0,t.jsx)(n.li,{children:"What files are automatically watched while writing Cypress tests"}),"\n"]})]}),"\n",(0,t.jsx)(n.h2,{id:"Folder-structure",children:"Folder structure"}),"\n",(0,t.jsx)(n.p,{children:"After adding a new project, Cypress will automatically scaffold out a suggested\nfolder structure. By default it will create:"}),"\n",(0,t.jsxs)(l,{children:[(0,t.jsx)(c,{value:"JavaScript",active:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"E2E:\n/cypress.config.js\n/cypress/fixtures/example.json\n/cypress/support/commands.js\n/cypress/support/e2e.js\n\nComponent:\n/cypress.config.js\n/cypress/fixtures/example.json\n/cypress/support/commands.js\n/cypress/support/component.js\n/cypress/support/component-index.html\n\nBoth:\n/cypress.config.js\n/cypress/fixtures/example.json\n/cypress/support/commands.js\n/cypress/support/e2e.js\n/cypress/support/component.js\n/cypress/support/component-index.html\n"})})}),(0,t.jsx)(c,{value:"TypeScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"E2E:\n/cypress.config.ts\n/cypress/fixtures/example.json\n/cypress/support/commands.ts\n/cypress/support/e2e.ts\n\nComponent:\n/cypress.config.ts\n/cypress/fixtures/example.json\n/cypress/support/commands.ts\n/cypress/support/component.ts\n/cypress/support/component-index.html\n\nBoth:\n/cypress.config.ts\n/cypress/fixtures/example.json\n/cypress/support/commands.ts\n/cypress/support/e2e.ts\n/cypress/support/component.ts\n/cypress/support/component-index.html\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"Configuring-Folder-Structure",children:"Configuring Folder Structure"}),"\n",(0,t.jsx)(n.p,{children:"While Cypress allows you to configure where your tests, fixtures, and support\nfiles are located, if you're starting your first project, we recommend you use\nthe above structure."}),"\n",(0,t.jsxs)(n.p,{children:["You can modify the folder configuration in your configuration file. See the\n",(0,t.jsx)(n.a,{href:"/app/references/configuration",children:"Cypress configuration"})," for more\ndetail."]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)("strong",{children:"What files should I add to my '.gitignore file' ?"}),(0,t.jsxs)(n.p,{children:["Cypress will create a\n",(0,t.jsx)(n.a,{href:"/app/references/configuration#Screenshots",children:(0,t.jsx)(n.code,{children:"screenshotsFolder"})})," and a\n",(0,t.jsx)(n.a,{href:"/app/references/configuration#Videos",children:(0,t.jsx)(n.code,{children:"videosFolder"})})," to store the\nscreenshots and videos taken during the testing of your application. Many users\nwill opt to add these folders to their ",(0,t.jsx)(n.code,{children:".gitignore"})," file. Additionally, if you\nare storing sensitive environment variables in your\n",(0,t.jsx)(n.a,{href:"/app/references/configuration",children:"Cypress configuration"})," or\n",(0,t.jsx)(n.a,{href:"/app/references/environment-variables#Option-2-cypressenvjson",children:(0,t.jsx)(n.code,{children:"cypress.env.json"})}),",\nthese should also be ignored when you check into source control."]})]}),"\n",(0,t.jsx)(n.h3,{id:"Spec-files",children:"Spec files"}),"\n",(0,t.jsxs)(n.p,{children:["Test files are located in ",(0,t.jsx)(n.code,{children:"cypress/e2e"})," by default, but can be\n",(0,t.jsx)(n.a,{href:"/app/references/configuration#e2e",children:"configured"})," to another\ndirectory. Test files may be written as:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:".js"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:".jsx"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:".ts"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:".tsx"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:".coffee"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:".cjsx"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Cypress also supports ",(0,t.jsx)(n.code,{children:"ES2015"})," out of the box. You can use either\n",(0,t.jsx)(n.code,{children:"ES2015 modules"})," or ",(0,t.jsx)(n.code,{children:"CommonJS modules"}),". This means you can ",(0,t.jsx)(n.code,{children:"import"})," or ",(0,t.jsx)(n.code,{children:"require"}),"\nboth ",(0,t.jsx)(n.strong,{children:"npm packages"})," and ",(0,t.jsx)(n.strong,{children:"local relative modules"}),"."]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)("strong",{children:"Example Recipe"}),(0,t.jsxs)(n.p,{children:["Check out our recipe using\n",(0,t.jsx)(n.a,{href:"/app/references/recipes#Fundamentals",children:"ES2015 and CommonJS modules"}),"."]})]}),"\n",(0,t.jsxs)(n.p,{children:["To see an example of every command used in Cypress, open the\n",(0,t.jsxs)(n.a,{href:"https://github.com/cypress-io/cypress-example-kitchensink/tree/master/cypress/e2e/2-advanced-examples",children:[(0,t.jsx)(n.code,{children:"2-advanced-examples"})," folder"]}),"\nwithin your ",(0,t.jsx)(n.code,{children:"cypress/e2e"})," folder."]}),"\n",(0,t.jsx)(n.h3,{id:"Fixture-Files",children:"Fixture Files"}),"\n",(0,t.jsxs)(n.p,{children:["Fixtures are used as external pieces of static data that can be used by your\ntests. Fixture files are located in ",(0,t.jsx)(n.code,{children:"cypress/fixtures"})," by default, but can be\n",(0,t.jsx)(n.a,{href:"/app/references/configuration#Folders--Files",children:"configured"})," to another\ndirectory."]}),"\n",(0,t.jsxs)(n.p,{children:["You would typically use them with the ",(0,t.jsx)(n.a,{href:"/api/commands/fixture",children:(0,t.jsx)(n.code,{children:"cy.fixture()"})}),"\ncommand and most often when you're stubbing\n",(0,t.jsx)(n.a,{href:"/app/guides/network-requests",children:"Network Requests"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"Asset-Files",children:"Asset Files"}),"\n",(0,t.jsx)(n.p,{children:"There are some folders that may be generated after a test run, containing assets\nthat were generated during the test run."}),"\n",(0,t.jsxs)(n.p,{children:["You may consider adding these folders to your ",(0,t.jsx)(n.code,{children:".gitignore"})," file to ignore\nchecking these files into source control."]}),"\n",(0,t.jsx)(n.h4,{id:"Download-Files",children:"Download Files"}),"\n",(0,t.jsxs)(n.p,{children:["Any files downloaded while testing an application's file download feature will\nbe stored in the ",(0,t.jsx)(n.a,{href:"/app/references/configuration#Downloads",children:(0,t.jsx)(n.code,{children:"downloadsFolder"})}),"\nwhich is set to ",(0,t.jsx)(n.code,{children:"cypress/downloads"})," by default."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"/cypress\n  /downloads\n    - records.csv\n"})}),"\n",(0,t.jsx)(n.h4,{id:"Screenshot-Files",children:"Screenshot Files"}),"\n",(0,t.jsxs)(n.p,{children:["If screenshots were taken via the ",(0,t.jsx)(n.a,{href:"/api/commands/screenshot",children:"cy.screenshot()"}),"\ncommand or automatically when a test fails, the screenshots are stored in the\n",(0,t.jsx)(n.a,{href:"/app/references/configuration#Screenshots",children:(0,t.jsx)(n.code,{children:"screenshotsFolder"})})," which is set\nto ",(0,t.jsx)(n.code,{children:"cypress/screenshots"})," by default."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"/cypress\n  /screenshots\n    /app.cy.js\n      - Navigates to main menu (failures).png\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To learn more about screenshots and settings available, see\n",(0,t.jsx)(n.a,{href:"/app/guides/screenshots-and-videos#Screenshots",children:"Screenshots and Videos"})]}),"\n",(0,t.jsx)(n.h4,{id:"Video-Files",children:"Video Files"}),"\n",(0,t.jsxs)(n.p,{children:["Any videos recorded of the run are stored in the\n",(0,t.jsx)(n.a,{href:"/app/references/configuration#Videos",children:(0,t.jsx)(n.code,{children:"videosFolder"})})," which is set to\n",(0,t.jsx)(n.code,{children:"cypress/videos"})," by default."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"/cypress\n  /videos\n    - app.cy.js.mp4\n"})}),"\n",(0,t.jsx)(n.h4,{id:"Asset-File-Paths",children:"Asset File Paths"}),"\n",(0,t.jsxs)(n.p,{children:["Generated screenshots and videos are saved inside their respective folders\n(",(0,t.jsx)(n.code,{children:"cypress/screenshots"}),", ",(0,t.jsx)(n.code,{children:"cypress/videos"}),"). The paths of the generated files will\nbe stripped of any common ancestor paths shared between all spec files found by\nthe ",(0,t.jsx)(n.code,{children:"specPattern"})," option (or via the ",(0,t.jsx)(n.code,{children:"--spec"})," command line option or ",(0,t.jsx)(n.code,{children:"spec"}),"\nmodule API option, if specified)"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Spec file found","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/e2e/path/to/file/one.cy.js"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Common ancestor paths (calculated at runtime)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/e2e/path/to/file"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Generated screenshot file","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/screenshots/one.cy.js/your-screenshot.png"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Generated video file","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/videos/one.cy.js.mp4"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Spec files found","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/e2e/path/to/file/one.cy.js"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/e2e/path/to/two.cy.js"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Common ancestor paths (calculated at runtime)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/e2e/path/to/"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Generated screenshot files","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/screenshots/file/one.cy.js/your-screenshot.png"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/screenshots/two.cy.js/your-screenshot.png"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Generated video files","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/videos/file/one.cy.js.mp4"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/videos/two.cy.js.mp4"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"Assets-in-Cypress-Cloud",children:"Assets in Cypress Cloud"}),"\n",(0,t.jsx)(s,{src:"/img/cloud/features/test-replay/test-replay-ui.png",alt:"View of Test Replay"}),"\n",(0,t.jsxs)(n.p,{children:["Instead of administering assets yourself, you can\n",(0,t.jsx)(n.a,{href:"/cloud/features/recorded-runs#Run-Details",children:"save them to the cloud with Cypress Cloud"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Replay the test as it executed during the recorded run with full debug capability using ",(0,t.jsxs)(n.a,{href:"/cloud/features/test-replay",children:[(0,t.jsx)(o,{src:"/img/cloud/features/test-replay/replay-icon.svg",alt:"Replay Icon"})," Cypress Test Replay"]}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Screenshots and videos are stored permanently, attached to their respective test\nresults, and easily shared or browsed through our web interface. To learn more about videos and settings available, see\n",(0,t.jsx)(n.a,{href:"/app/guides/screenshots-and-videos#Screenshots",children:"Screenshots and Videos"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"Plugins-file",children:"Plugins file"}),"\n",(0,t.jsxs)(n.p,{children:["The plugins file is a special file that executes in Node before the project is\nloaded, before the browser launches, and during your test execution. While the\nCypress tests execute in the browser, the plugins file runs in the background\nNode process, giving your tests the ability to access the file system and the\nrest of the operating system by calling the ",(0,t.jsx)(n.a,{href:"/api/commands/task",children:"cy.task()"}),"\ncommand."]}),"\n",(0,t.jsxs)(n.p,{children:["The plugins file is a good place to define how you want to bundle the spec files\nvia the ",(0,t.jsx)(n.a,{href:"/api/node-events/preprocessors-api",children:"preprocessors"}),", how to find and launch\nthe browsers via the ",(0,t.jsx)(n.a,{href:"/api/node-events/browser-launch-api",children:"browser launch API"}),", and\nother cool things. Read our ",(0,t.jsx)(n.a,{href:"/app/plugins/plugins-guide",children:"plugins guide"})," for\nmore details and examples."]}),"\n",(0,t.jsxs)(n.p,{children:["The initial imported plugins file can be\n",(0,t.jsx)(n.a,{href:"/app/references/configuration#Folders--Files",children:"configured to another file"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"Support-file",children:"Support file"}),"\n",(0,t.jsxs)(n.p,{children:["To include code before your test files, set the\n",(0,t.jsx)(n.a,{href:"/app/references/configuration#Testing-Type-Specific-Options",children:(0,t.jsx)(n.code,{children:"supportFile"})}),"\npath. By default,\n",(0,t.jsx)(n.a,{href:"/app/references/configuration#Testing-Type-Specific-Options",children:(0,t.jsx)(n.code,{children:"supportFile"})}),"\nis set to look for one of the following files:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Component:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/support/component.js"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/support/component.jsx"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/support/component.ts"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/support/component.tsx"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"E2E:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/support/e2e.js"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/support/e2e.jsx"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/support/e2e.ts"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/support/e2e.tsx"})}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"danger",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{name:"exclamation-triangle"})," For a given testing type, multiple matching\n",(0,t.jsx)(n.code,{children:"supportFile"})," files will result in an error when Cypress loads."]})}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{name:"cogs"})," ",(0,t.jsx)(n.strong,{children:"supportFile per testing type"})]}),(0,t.jsxs)(n.p,{children:["Depending on which ",(0,t.jsx)(n.a,{href:"/app/core-concepts/testing-types",children:"testing type"})," you are\nusing, you can configure your ",(0,t.jsx)(n.code,{children:"supportFile"})," accordingly."]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/app/references/configuration#component",children:"Component"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/app/references/configuration#e2e",children:"E2E"})}),"\n"]})]}),"\n",(0,t.jsx)(n.p,{children:"Cypress automatically creates an example support file for each configured\ntesting type, which has several commented out examples."}),"\n",(0,t.jsxs)(n.p,{children:["This file runs ",(0,t.jsx)(n.strong,{children:"before"})," every single spec file. We do this purely as a\nconvenience mechanism so you don't have to import this file."]}),"\n",(0,t.jsxs)(n.p,{children:["By default Cypress will automatically include type-specific support files. For\nE2E, the default is ",(0,t.jsx)(n.code,{children:"cypress/support/e2e.{js,jsx,ts,tsx}"}),", and for Component\nTesting ",(0,t.jsx)(n.code,{children:"cypress/support/component.{js,jsx,ts,tsx}"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The support file is a great place to put reusable behavior such as\n",(0,t.jsx)(n.a,{href:"/api/cypress-api/custom-commands",children:"custom commands"})," or global overrides that you\nwant applied and available to all of your spec files."]}),"\n",(0,t.jsxs)(n.p,{children:["The initial imported support file can be configured to another file or turned\noff completely using the\n",(0,t.jsx)(n.a,{href:"/app/references/configuration#Testing-Type-Specific-Options",children:"supportFile"})," configuration.\nFrom your support file you can ",(0,t.jsx)(n.code,{children:"import"})," or ",(0,t.jsx)(n.code,{children:"require"})," other files to keep things\norganized."]}),"\n",(0,t.jsxs)(n.p,{children:["You can define behaviors in a ",(0,t.jsx)(n.code,{children:"before"})," or ",(0,t.jsx)(n.code,{children:"beforeEach"})," within any of the\n",(0,t.jsx)(n.code,{children:"cypress/support"})," files:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"beforeEach(() => {\n  cy.log('I run before every test in every spec file!!!!!!')\n})\n"})}),"\n",(0,t.jsx)(s,{src:"/img/app/core-concepts/global-hooks.png",alt:"Global hooks for tests"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," This example assumes you are already familiar with Mocha\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/writing-and-organizing-tests#Hooks",children:"hooks"}),"."]})}),"\n",(0,t.jsx)(n.h4,{id:"Execution",children:"Execution"}),"\n",(0,t.jsxs)(n.p,{children:["Cypress executes the support file before the spec file. For example, when\nCypress executes a spec file via ",(0,t.jsx)(n.code,{children:"cypress open"})," or ",(0,t.jsx)(n.code,{children:"cypress run"}),", it executes\nthe files in the following order:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"e2e example:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"support/e2e.js"})," (your support file)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"e2e/spec-a.cy.js"})," (your spec file)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"component example:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"support/component.js"})," (your support file)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"components/Button/Button.cy.js"})," (your spec file)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"Troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsxs)(n.p,{children:["If Cypress does not find the spec files for some reason, you can troubleshoot\nits logic by opening or running Cypress with\n",(0,t.jsx)(n.a,{href:"/app/references/troubleshooting#Print-DEBUG-logs",children:"debug logs"})," enabled:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"DEBUG=cypress:cli,cypress:data-context:sources:FileDataSource,cypress:data-context:sources:ProjectDataSource npx cypress open\n## or\nDEBUG=cypress:cli,cypress:data-context:sources:FileDataSource,cypress:data-context:sources:ProjectDataSource npx cypress run\n"})}),"\n",(0,t.jsx)(n.h2,{id:"Writing-tests",children:"Writing tests"}),"\n",(0,t.jsxs)(n.p,{children:["Cypress is built on top of ",(0,t.jsx)(n.a,{href:"/app/references/bundled-libraries#Mocha",children:"Mocha"}),"\nand ",(0,t.jsx)(n.a,{href:"/app/references/bundled-libraries#Chai",children:"Chai"}),". We support both Chai's\n",(0,t.jsx)(n.code,{children:"BDD"})," and ",(0,t.jsx)(n.code,{children:"TDD"})," assertion styles. Tests you write in Cypress will mostly adhere\nto this style."]}),"\n",(0,t.jsx)(n.p,{children:"If you're familiar with writing tests in JavaScript, then writing tests in\nCypress will be a breeze."}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["To start writing tests for your app, follow our guides for writing your first\n",(0,t.jsx)(n.a,{href:"/app/component-testing/get-started",children:"Component"})," or\n",(0,t.jsx)(n.a,{href:"/app/end-to-end-testing/writing-your-first-end-to-end-test",children:"End-to-End"}),"\ntest."]})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Needing a low code approach to create tests? Use\n",(0,t.jsx)(n.a,{href:"/app/guides/cypress-studio",children:"Cypress Studio"})," to record your browser\ninteractions."]})}),"\n",(0,t.jsx)(n.h3,{id:"Test-Structure",children:"Test Structure"}),"\n",(0,t.jsxs)(n.p,{children:["The test interface, borrowed from\n",(0,t.jsx)(n.a,{href:"/app/references/bundled-libraries#Mocha",children:"Mocha"}),", provides ",(0,t.jsx)(n.code,{children:"describe()"}),",\n",(0,t.jsx)(n.code,{children:"context()"}),", ",(0,t.jsx)(n.code,{children:"it()"})," and ",(0,t.jsx)(n.code,{children:"specify()"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"context()"})," is identical to ",(0,t.jsx)(n.code,{children:"describe()"})," and ",(0,t.jsx)(n.code,{children:"specify()"})," is identical to ",(0,t.jsx)(n.code,{children:"it()"}),",\nso choose whatever terminology works best for you."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// -- Start: Our Application Code --\nfunction add(a, b) {\n  return a + b\n}\n\nfunction subtract(a, b) {\n  return a - b\n}\n\nfunction divide(a, b) {\n  return a / b\n}\n\nfunction multiply(a, b) {\n  return a * b\n}\n// -- End: Our Application Code --\n\n// -- Start: Our Cypress Tests --\ndescribe('Unit test our math functions', () => {\n  context('math', () => {\n    it('can add numbers', () => {\n      expect(add(1, 2)).to.eq(3)\n    })\n\n    it('can subtract numbers', () => {\n      expect(subtract(5, 12)).to.eq(-7)\n    })\n\n    specify('can divide numbers', () => {\n      expect(divide(27, 9)).to.eq(3)\n    })\n\n    specify('can multiply numbers', () => {\n      expect(multiply(5, 4)).to.eq(20)\n    })\n  })\n})\n// -- End: Our Cypress Tests --\n"})}),"\n",(0,t.jsx)(n.h3,{id:"Hooks",children:"Hooks"}),"\n",(0,t.jsxs)(n.p,{children:["Cypress also provides hooks (borrowed from\n",(0,t.jsx)(n.a,{href:"/app/references/bundled-libraries#Mocha",children:"Mocha"}),")."]}),"\n",(0,t.jsx)(n.p,{children:"These are helpful to set conditions that you want to run before a set of tests\nor before each test. They're also helpful to clean up conditions after a set of\ntests or after each test."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"before(() => {\n  // root-level hook\n  // runs once before all tests\n})\n\nbeforeEach(() => {\n  // root-level hook\n  // runs before every test block\n})\n\nafterEach(() => {\n  // runs after each test block\n})\n\nafter(() => {\n  // runs once all tests are done\n})\n\ndescribe('Hooks', () => {\n  before(() => {\n    // runs once before all tests in the block\n  })\n\n  beforeEach(() => {\n    // runs before each test in the block\n  })\n\n  afterEach(() => {\n    // runs after each test in the block\n  })\n\n  after(() => {\n    // runs once after all tests in the block\n  })\n})\n"})}),"\n",(0,t.jsx)(n.h4,{id:"The-order-of-hook-and-test-execution-is-as-follows",children:"The order of hook and test execution is as follows:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["All ",(0,t.jsx)(n.code,{children:"before()"})," hooks run (once)"]}),"\n",(0,t.jsxs)(n.li,{children:["Any ",(0,t.jsx)(n.code,{children:"beforeEach()"})," hooks run"]}),"\n",(0,t.jsx)(n.li,{children:"Tests run"}),"\n",(0,t.jsxs)(n.li,{children:["Any ",(0,t.jsx)(n.code,{children:"afterEach()"})," hooks run"]}),"\n",(0,t.jsxs)(n.li,{children:["All ",(0,t.jsx)(n.code,{children:"after()"})," hooks run (once)"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"danger",children:(0,t.jsxs)(n.p,{children:["\ud83d\udea8 Before writing ",(0,t.jsx)(n.code,{children:"after()"})," or ",(0,t.jsx)(n.code,{children:"afterEach()"})," hooks, please see our\n",(0,t.jsxs)(n.a,{href:"/app/core-concepts/best-practices#Using-after-Or-afterEach-Hooks",children:["thoughts on the anti-pattern of cleaning up state with ",(0,t.jsx)(n.code,{children:"after()"})," or ",(0,t.jsx)(n.code,{children:"afterEach()"})]}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"Excluding-and-Including-Tests",children:"Excluding and Including Tests"}),"\n",(0,t.jsxs)(n.p,{children:["To run a specified suite or test, append ",(0,t.jsx)(n.code,{children:".only"})," to the function. All nested\nsuites will also be executed. This gives us the ability to run one test at a\ntime and is the recommended way to write a test suite."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// -- Start: Our Application Code --\nfunction fizzbuzz(num) {\n  if (num % 3 === 0 && num % 5 === 0) {\n    return 'fizzbuzz'\n  }\n\n  if (num % 3 === 0) {\n    return 'fizz'\n  }\n\n  if (num % 5 === 0) {\n    return 'buzz'\n  }\n}\n// -- End: Our Application Code --\n\n// -- Start: Our Cypress Tests --\ndescribe('Unit Test FizzBuzz', () => {\n  function numsExpectedToEq(arr, expected) {\n    // loop through the array of nums and make\n    // sure they equal what is expected\n    arr.forEach((num) => {\n      expect(fizzbuzz(num)).to.eq(expected)\n    })\n  }\n\n  // highlight-start\n  it.only('returns \"fizz\" when number is multiple of 3', () => {\n    numsExpectedToEq([9, 12, 18], 'fizz')\n  })\n  // highlight-end\n\n  it('returns \"buzz\" when number is multiple of 5', () => {\n    numsExpectedToEq([10, 20, 25], 'buzz')\n  })\n\n  it('returns \"fizzbuzz\" when number is multiple of both 3 and 5', () => {\n    numsExpectedToEq([15, 30, 60], 'fizzbuzz')\n  })\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To skip a specified suite or test, append ",(0,t.jsx)(n.code,{children:".skip()"})," to the function. All nested\nsuites will also be skipped."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"it.skip('returns \"fizz\" when number is multiple of 3', () => {\n  numsExpectedToEq([9, 12, 18], 'fizz')\n})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"Test-Isolation",children:"Test Isolation"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{name:"check-circle",color:"green"})," ",(0,t.jsx)(n.strong,{children:"Best Practice:"})," Tests should always\nbe able to be run independently from one another ",(0,t.jsx)(n.strong,{children:"and still pass"}),"."]})}),"\n",(0,t.jsx)(n.p,{children:"As stated in our mission, we hold ourselves accountable to champion a testing\nprocess that actually works, and have built Cypress to guide developers towards\nwriting independent tests from the start."}),"\n",(0,t.jsxs)(n.p,{children:["We do this by cleaning up test state and the browser context ",(0,t.jsx)(n.em,{children:"before"})," each test\nto ensure that the operation of one test does not affect another test later on.\nThe goal for each test should be to ",(0,t.jsx)(n.strong,{children:"reliably pass"})," whether run in isolation\nor consecutively with other tests. Having tests that depend on the state of an\nearlier test can potentially cause nondeterministic test failures which makes\ndebugging challenging."]}),"\n",(0,t.jsxs)(n.p,{children:["The behavior of running tests in a clean browser context is described as\n",(0,t.jsx)(n.code,{children:"testIsolation"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The test isolation is a global configuration and can be overridden for\nend-to-end testing at the ",(0,t.jsx)(n.code,{children:"describe"})," level with the\n",(0,t.jsx)(n.a,{href:"/app/references/configuration#e2e",children:(0,t.jsx)(n.code,{children:"testIsolation"})})," option."]}),"\n",(0,t.jsxs)(n.p,{children:["To learn more about this behavior and the trade-offs of disabling it, review our\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/test-isolation",children:"Test Isolation guide"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"Test-Configuration",children:"Test Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["It is possible to apply\n",(0,t.jsx)(n.a,{href:"/app/references/configuration#Test-Configuration",children:"test configuration"})," values\nto a suite or test. Pass a configuration object to the test or suite function as\nthe second argument."]}),"\n",(0,t.jsx)(n.p,{children:"This configuration will take effect during the suite or tests where they are set\nthen return to their previous default values after the suite or tests are\ncomplete."}),"\n",(0,t.jsx)(n.h4,{id:"Syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"describe(name, config, fn)\ncontext(name, config, fn)\nit(name, config, fn)\nspecify(name, config, fn)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"Allowed-config-values",children:"Allowed config values"}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," Some configuration values are readonly and cannot be changed via test\nconfiguration. Be sure to review the list of\n",(0,t.jsx)(n.a,{href:"/app/references/configuration#Test-Configuration",children:"test configuration options"}),"."]})}),"\n",(0,t.jsx)(n.h4,{id:"Suite-configuration",children:"Suite configuration"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to target a suite of tests to run or be excluded when run in a\nspecific browser, you can override the ",(0,t.jsx)(n.code,{children:"browser"})," configuration within the suite\nconfiguration. The ",(0,t.jsx)(n.code,{children:"browser"})," option accepts the same arguments as\n",(0,t.jsx)(n.a,{href:"/api/cypress-api/isbrowser",children:"Cypress.isBrowser()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The following suite of tests will be skipped if running tests in Chrome\nbrowsers."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describe('When NOT in Chrome', { browser: '!chrome' }, () => {\n  it('Shows warning', () => {\n    cy.get('[data-testid=\"browser-warning\"]').should(\n      'contain',\n      'For optimal viewing, use Chrome browser'\n    )\n  })\n\n  it('Links to browser compatibility doc', () => {\n    cy.get('a.browser-compat')\n      .should('have.attr', 'href')\n      .and('include', 'browser-compatibility')\n  })\n})\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following suite of tests will only execute when running in the Firefox\nbrowser. It will overwrite the viewport resolution in one of the tests, and will\nmerge any current environment variables with the provided ones."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describe(\n  'When in Firefox',\n  {\n    browser: 'firefox',\n    viewportWidth: 1024,\n    viewportHeight: 700,\n    env: {\n      DEMO: true,\n      API: 'http://localhost:9000',\n    },\n  },\n  () => {\n    it('Sets the expected viewport and API URL', () => {\n      expect(cy.config('viewportWidth')).to.equal(1024)\n      expect(cy.config('viewportHeight')).to.equal(700)\n      expect(cy.env('API')).to.equal('http://localhost:9000')\n    })\n\n    it(\n      'Uses the closest API environment variable',\n      {\n        env: {\n          API: 'http://localhost:3003',\n        },\n      },\n      () => {\n        expect(cy.env('API')).to.equal('http://localhost:3003')\n        // other environment variables remain unchanged\n        expect(cy.env('DEMO')).to.be.true\n      }\n    )\n  }\n)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"Single-test-configuration",children:"Single test configuration"}),"\n",(0,t.jsxs)(n.p,{children:["You can configure the number of retry attempts during ",(0,t.jsx)(n.code,{children:"cypress run"})," or\n",(0,t.jsx)(n.code,{children:"cypress open"}),". See ",(0,t.jsx)(n.a,{href:"/app/guides/test-retries",children:"Test Retries"})," for more\ninformation."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"it('should redirect unauthenticated user to sign-in page', {\n    retries: {\n      runMode: 3,\n      openMode: 2\n    }\n  } () => {\n    // test code...\n  })\n})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"Dynamically-Generate-Tests",children:"Dynamically Generate Tests"}),"\n",(0,t.jsx)(n.p,{children:"You can dynamically generate tests using JavaScript."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"describe('if your app uses jQuery', () => {\n  ;['mouseover', 'mouseout', 'mouseenter', 'mouseleave'].forEach((event) => {\n    it('triggers event: ' + event, () => {\n      // if your app uses jQuery, then we can trigger a jQuery\n      // event that causes the event callback to fire\n      cy.get('#with-jquery')\n        .invoke('trigger', event)\n        .get('[data-testid=\"messages\"]')\n        .should('contain', 'the event ' + event + 'was fired')\n    })\n  })\n})\n"})}),"\n",(0,t.jsx)(n.p,{children:"The code above will produce a suite with 4 tests:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"> if your app uses jQuery\n  > triggers event: 'mouseover'\n  > triggers event: 'mouseout'\n  > triggers event: 'mouseenter'\n  > triggers event: 'mouseleave'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"Assertion-Styles",children:"Assertion Styles"}),"\n",(0,t.jsxs)(n.p,{children:["Cypress supports both BDD (",(0,t.jsx)(n.code,{children:"expect"}),"/",(0,t.jsx)(n.code,{children:"should"}),") and TDD (",(0,t.jsx)(n.code,{children:"assert"}),") style plain\nassertions. ",(0,t.jsx)(n.a,{href:"/app/references/assertions",children:"Read more about plain assertions."})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"it('can add numbers', () => {\n  expect(add(1, 2)).to.eq(3)\n})\n\nit('can subtract numbers', () => {\n  assert.equal(subtract(5, 12), -7, 'these numbers are equal')\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/api/commands/should",children:".should()"})," command and its alias\n",(0,t.jsx)(n.a,{href:"/api/commands/and",children:".and()"})," can also be used to more easily chain assertions off\nof Cypress commands.\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/introduction-to-cypress#Assertions",children:"Read more about assertions."})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"cy.wrap(add(1, 2)).should('equal', 3)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"Running-tests",children:"Running tests"}),"\n",(0,t.jsxs)(n.p,{children:["You can run a test by clicking on the spec filename. For example the\n",(0,t.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-example-realworld",children:"Cypress RealWorld App"}),'\nhas multiple test files, but below we run the "new-transaction.spec.ts" test\nfile by clicking on it.']}),"\n",(0,t.jsx)(s,{src:"/img/app/core-concepts/run-single-spec.gif",alt:"Running a single spec"}),"\n",(0,t.jsx)(n.h2,{id:"Test-statuses",children:"Test statuses"}),"\n",(0,t.jsxs)(n.p,{children:["After the Cypress spec completes every test has one of four statuses:\n",(0,t.jsx)(n.strong,{children:"passed"}),", ",(0,t.jsx)(n.strong,{children:"failed"}),", ",(0,t.jsx)(n.strong,{children:"pending"}),", or ",(0,t.jsx)(n.strong,{children:"skipped"}),". The behavior of these\nstatuses are inherited from the Mocha, since this is the test runner leveraged\nby Cypress."]}),"\n",(0,t.jsx)(n.h3,{id:"Passed",children:"Passed"}),"\n",(0,t.jsx)(n.p,{children:"Passed tests have successfully completed all their hooks and commands without\nfailing any assertions. The test screenshot below shows a passed test:"}),"\n",(0,t.jsx)(s,{src:"/img/app/core-concepts/todo-mvc-passing-test.png",alt:"Cypress with a single passed test"}),"\n",(0,t.jsxs)(n.p,{children:["Note that a test can pass after several\n",(0,t.jsx)(n.a,{href:"/app/guides/test-retries",children:"test retries"}),". In that case the Command Log shows\nsome failed attempts, but ultimately the entire test finishes successfully."]}),"\n",(0,t.jsx)(n.h3,{id:"Failed",children:"Failed"}),"\n",(0,t.jsx)(n.p,{children:"Good news - the failed hook or test has found a problem. Could be much worse -\nit could be a user hitting this bug!"}),"\n",(0,t.jsx)(s,{src:"/img/app/core-concepts/todo-mvc-failing-test.png",alt:"Cypress with a single failed test"}),"\n",(0,t.jsxs)(n.p,{children:["After a test fails, the ",(0,t.jsx)(n.a,{href:"/cloud/features/test-replay",children:"Test Replay"})," or screenshots and videos with Cypress Cloud can help find the problem so it\ncan be fixed."]}),"\n",(0,t.jsx)(n.h3,{id:"Pending",children:"Pending"}),"\n",(0,t.jsxs)(n.p,{children:["You can write ",(0,t.jsx)(n.em,{children:"placeholder"})," tests in several ways as shown below, and Cypress\nknows NOT to run them. Additionally, you can conditionally specify which\nbrowser(s) and tests should run, including if the test should not run for the\nbrowser currently being tested, it is marked as ",(0,t.jsx)(n.em,{children:"pending"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Cypress marks all the tests below as ",(0,t.jsx)(n.em,{children:"pending"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describe('TodoMVC', () => {\n  it('is not written yet')\n\n  it.skip('adds 2 todos', function () {\n    cy.visit('/')\n    cy.get('[data-testid=\"new-todo\"]').as('new').type('learn testing{enter}')\n\n    cy.get('@new').type('be cool{enter}')\n\n    cy.get('[data-testid=\"todo-list\"] li').should('have.length', 100)\n  })\n\n  xit('another test', () => {\n    expect(false).to.true\n  })\n\n  it('only test chrome', { browser: 'chrome' }, () => {\n    cy.visit('/')\n    cy.contains('To Do')\n  })\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["All four tests above are marked ",(0,t.jsx)(n.em,{children:"pending"})," when Cypress finishes running the spec\nfile."]}),"\n",(0,t.jsx)(s,{src:"/img/app/core-concepts/todo-mvc-pending-tests.png",alt:"Cypress with four pending test"}),"\n",(0,t.jsxs)(n.p,{children:["So remember - if you (the test writer) knowingly skip a test using one of the\nabove three ways, Cypress counts it as a ",(0,t.jsx)(n.em,{children:"pending"})," test."]}),"\n",(0,t.jsx)(n.h3,{id:"Skipped",children:"Skipped"}),"\n",(0,t.jsxs)(n.p,{children:["The last test status is for tests that you ",(0,t.jsx)(n.em,{children:"meant"})," to run, but these tests were\nskipped due to some run-time error. For example, imagine a group of tests\nsharing the same ",(0,t.jsx)(n.code,{children:"beforeEach"})," hook - where you visit the page in the\n",(0,t.jsx)(n.code,{children:"beforeEach"})," hook."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/// <reference types=\"cypress\" />\n\ndescribe('TodoMVC', () => {\n  beforeEach(() => {\n    cy.visit('/')\n  })\n\n  it('hides footer initially', () => {\n    cy.get('[data-testid=\"filters\"]').should('not.exist')\n  })\n\n  it('adds 2 todos', () => {\n    cy.get('[data-testid=\"new-todo\"]').as('new').type('learn testing{enter}')\n\n    cy.get('@new').type('be cool{enter}')\n\n    cy.get('[data-testid=\"todo-list\"] li').should('have.length', 2)\n  })\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"beforeEach"})," hook completes and both tests finish, two tests are passing."]}),"\n",(0,t.jsx)(s,{src:"/img/app/core-concepts/todo-mvc-2-tests-passing.png",alt:"Cypress showing two passing tests"}),"\n",(0,t.jsxs)(n.p,{children:["But what happens if a command inside the ",(0,t.jsx)(n.code,{children:"beforeEach"})," hook fails? For example,\nlet's pretend we want to visit a non-existent page ",(0,t.jsx)(n.code,{children:"/does-not-exist"})," instead of\nthe ",(0,t.jsx)(n.code,{children:"/"}),". If we change our ",(0,t.jsx)(n.code,{children:"beforeEach"})," to fail:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"beforeEach(() => {\n  cy.visit('/does-not-exist')\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When Cypress starts executing the first test, the ",(0,t.jsx)(n.code,{children:"beforeEach"})," hook fails. Now\nthe first test is marked as ",(0,t.jsx)(n.strong,{children:"failed"}),". BUT if the ",(0,t.jsx)(n.code,{children:"beforeEach"})," hook failed\nonce, why would we execute it ",(0,t.jsx)(n.em,{children:"again"})," before the second test? It would just fail\nthe same way! So Cypress ",(0,t.jsx)(n.em,{children:"skips"})," the remaining tests in that block, because they\nwould also fail due to the ",(0,t.jsx)(n.code,{children:"beforeEach"})," hook failure."]}),"\n",(0,t.jsx)(s,{src:"/img/app/core-concepts/todo-mvc-failed-and-skipped-tests.png",alt:"Cypress showing one failed and one skipped test"}),"\n",(0,t.jsx)(n.p,{children:'If we collapse the test commands, we can see the empty box marking the skipped\ntest "adds 2 todos".'}),"\n",(0,t.jsx)(s,{src:"/img/app/core-concepts/todo-mvc-skipped-test.png",alt:"Cypress showing one skipped test"}),"\n",(0,t.jsxs)(n.p,{children:['The tests that were meant to be executed but were skipped due to some run-time\nproblem are marked "skipped" by Cypress. This is typically observed when a\n',(0,t.jsx)(n.code,{children:"before"}),", ",(0,t.jsx)(n.code,{children:"beforeEach"})," or ",(0,t.jsx)(n.code,{children:"afterEach"})," hook fails."]}),"\n",(0,t.jsx)(n.h2,{id:"Watching-tests",children:"Watching tests"}),"\n",(0,t.jsxs)(n.p,{children:["When running in using ",(0,t.jsx)(n.a,{href:"/app/references/command-line#cypress-open",children:"cypress open"}),",\nCypress watches the filesystem for changes to your spec files. Soon after adding\nor updating a test Cypress will reload it and run all of the tests in that spec\nfile."]}),"\n",(0,t.jsx)(n.p,{children:"This makes for a productive development experience because you can add and edit\ntests as you're implementing a feature and the Cypress user interface will\nalways reflect the results of your latest edits."}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Remember to use\n",(0,t.jsx)(n.a,{href:"/app/core-concepts/writing-and-organizing-tests#Excluding-and-Including-Tests",children:(0,t.jsx)(n.code,{children:".only"})}),"\nto limit which tests are run: this can be especially useful when you've got a\nlot of tests in a single spec file that you're constantly editing; consider also\nsplitting your tests into smaller files each dealing with logically related\nbehavior."]})}),"\n",(0,t.jsx)(n.h3,{id:"What-is-watched",children:"What is watched?"}),"\n",(0,t.jsx)(n.h4,{id:"Files",children:"Files"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/app/references/configuration",children:"Cypress configuration"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/app/references/environment-variables",children:"cypress.env.json"})}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"Folders",children:"Folders"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["E2E directory (",(0,t.jsx)(n.code,{children:"cypress/e2e/"})," by default)"]}),"\n",(0,t.jsxs)(n.li,{children:["Support directory (",(0,t.jsx)(n.code,{children:"cypress/support/"})," by default)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The folder, the files within the folder, and all child folders and their files\n(recursively) are watched."}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Those folder paths refer to the\n",(0,t.jsx)(n.a,{href:"/app/references/configuration#Folders--Files",children:"default folder paths"}),". If\nyou've configured Cypress to use different folder paths then the folders\nspecific to your configuration will be watched."]})}),"\n",(0,t.jsx)(n.h3,{id:"What-isnt-watched",children:"What isn't watched?"}),"\n",(0,t.jsx)(n.p,{children:"Everything else; this includes, but isn't limited to, the following:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Your application code"}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"node_modules"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cypress/fixtures/"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"If you're developing using a modern JS-based web application stack then you've\nlikely got support for some form of hot module replacement which is responsible\nfor watching your application code\u2014HTML, CSS, JS, etc.\u2014and\ntransparently reloading your application in response to changes."}),"\n",(0,t.jsx)(n.h3,{id:"Configuration",children:"Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Set the ",(0,t.jsx)(n.a,{href:"/app/references/configuration#Global",children:(0,t.jsx)(n.code,{children:"watchForFileChanges"})}),"\nconfiguration property to ",(0,t.jsx)(n.code,{children:"false"})," to disable file watching."]}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Nothing"})," is watched during\n",(0,t.jsx)(n.a,{href:"/app/references/command-line#cypress-run",children:"cypress run"}),"."]}),(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"watchForFileChanges"})," property is only in effect when running Cypress using\n",(0,t.jsx)(n.a,{href:"/app/references/command-line#cypress-open",children:"cypress open"}),"."]})]}),"\n",(0,t.jsxs)(n.p,{children:["The component responsible for the file-watching behavior in Cypress is the\n",(0,t.jsx)(n.a,{href:"https://github.com/cypress-io/cypress/tree/develop/npm/webpack-preprocessor",children:(0,t.jsx)(n.code,{children:"webpack-preprocessor"})}),".\nThis is the default file-watcher packaged with Cypress."]}),"\n",(0,t.jsxs)(n.p,{children:["If you need further control of the file-watching behavior you can configure this\npreprocessor explicitly: it exposes options that allow you to configure behavior\nsuch as ",(0,t.jsx)(n.em,{children:"what"}),' is watched and the delay before emitting an "update" event after\na change.']}),"\n",(0,t.jsxs)(n.p,{children:["Cypress also ships other ",(0,t.jsx)(n.a,{href:"/app/plugins/plugins-list",children:"file-watching preprocessors"})," -\nyou'll have to configure these explicitly if you want to use them."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-watch-preprocessor",children:"Cypress Watch Preprocessor"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/cypress-io/cypress/tree/develop/npm/webpack-preprocessor",children:"Cypress webpack Preprocessor"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>o});var t=s(7294);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);