"use strict";(self.webpackChunkcypress_docusaurus_zh=self.webpackChunkcypress_docusaurus_zh||[]).push([[8989],{4170:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var o=t(5893),s=t(1151);const r={title:"Vue Examples",sidebar_position:30,sidebar_label:"Examples"},i=void 0,a={id:"app/component-testing/vue/examples",title:"Vue Examples",description:"What you'll learn",source:"@site/docs/app/component-testing/vue/examples.mdx",sourceDirName:"app/component-testing/vue",slug:"/app/component-testing/vue/examples",permalink:"/app/component-testing/vue/examples",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/component-testing/vue/examples.mdx",tags:[],version:"current",lastUpdatedAt:1732009455,formattedLastUpdatedAt:"Nov 19, 2024",sidebarPosition:30,frontMatter:{title:"Vue Examples",sidebar_position:30,sidebar_label:"Examples"},sidebar:"app",previous:{title:"Overview",permalink:"/app/component-testing/vue/overview"},next:{title:"API",permalink:"/app/component-testing/vue/api"}},l={},c=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"Mounting Components",id:"Mounting-Components",level:2},{value:"Using <code>cy.mount()</code>",id:"Using-cymount",level:3},{value:"Passing Data to a Component",id:"Passing-Data-to-a-Component",level:3},{value:"Testing Event Handlers",id:"Testing-Event-Handlers",level:3},{value:"Using JSX",id:"Using-JSX",level:3},{value:"Using Slots",id:"Using-Slots",level:2},{value:"Default Slot",id:"Default-Slot",level:3},{value:"Named Slot",id:"Named-Slot",level:3},{value:"Using Vue Test Utils",id:"Using-Vue-Test-Utils",level:2},{value:"Custom Mount Commands",id:"Custom-Mount-Commands",level:2},{value:"Customizing <code>cy.mount()</code>",id:"Customizing-cymount",level:3},{value:"Replicating Plugins",id:"Replicating-Plugins",level:3},{value:"Replicating the expected Component Hierarchy",id:"Replicating-the-expected-Component-Hierarchy",level:3},{value:"Vue Router",id:"Vue-Router",level:3},{value:"Vue 3",id:"Vue-3",level:4},{value:"Vue 2",id:"Vue-2",level:4},{value:"Vuex",id:"Vuex",level:3},{value:"Vue 3",id:"Vue-3-1",level:4},{value:"Vue 2",id:"Vue-2-1",level:4},{value:"Global Components",id:"Global-Components",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components},{Icon:t,TabItem:r,Tabs:i}=n;return t||m("Icon",!0),r||m("TabItem",!0),i||m("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.admonition,{type:"info",children:[(0,o.jsxs)(n.h5,{id:"What-youll-learn",children:[(0,o.jsx)(t,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"How to mount Vue components in Cypress"}),"\n",(0,o.jsx)(n.li,{children:"How to pass props and events to components"}),"\n",(0,o.jsx)(n.li,{children:"How to use slots in components"}),"\n",(0,o.jsx)(n.li,{children:"How to use Vue Test Utils with Cypress"}),"\n",(0,o.jsxs)(n.li,{children:["How to customize ",(0,o.jsx)(n.code,{children:"cy.mount()"})," with Vue"]}),"\n"]})]}),"\n",(0,o.jsx)(n.h2,{id:"Mounting-Components",children:"Mounting Components"}),"\n",(0,o.jsxs)(n.h3,{id:"Using-cymount",children:["Using ",(0,o.jsx)(n.code,{children:"cy.mount()"})]}),"\n",(0,o.jsxs)(n.p,{children:["To mount a component with ",(0,o.jsx)(n.code,{children:"cy.mount()"}),", import the component and pass it to the\nmethod:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { Stepper } from './Stepper.vue'\n\nit('mounts', () => {\n  cy.mount(Stepper)\n})\n"})}),"\n",(0,o.jsx)(n.h3,{id:"Passing-Data-to-a-Component",children:"Passing Data to a Component"}),"\n",(0,o.jsxs)(n.p,{children:["You can pass props and events to a component by setting ",(0,o.jsx)(n.code,{children:"props"})," in the options:"]}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)(r,{value:"Vue 3",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"cy.mount(Stepper, {\n  props: {\n    initial: 100,\n  },\n})\n"})})}),(0,o.jsx)(r,{value:"Vue 2",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"cy.mount(Stepper, {\n  propsData: {\n    initial: 100,\n  },\n})\n"})})})]}),"\n",(0,o.jsx)(n.h3,{id:"Testing-Event-Handlers",children:"Testing Event Handlers"}),"\n",(0,o.jsxs)(n.p,{children:["Pass a Cypress ",(0,o.jsx)(n.a,{href:"/app/guides/stubs-spies-and-clocks#Spies",children:"spy"})," to an event\nprop and validate it was called:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"it('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(Stepper, { props: { onChange: onChangeSpy } })\n  cy.get('[data-cy=increment]').click()\n  cy.get('@onChangeSpy').should('have.been.calledWith', 1)\n})\n"})}),"\n",(0,o.jsx)(n.h3,{id:"Using-JSX",children:"Using JSX"}),"\n",(0,o.jsx)(n.p,{children:"The mount command also supports JSX syntax (provided that you've configured your\nbundler to support transpiling JSX or TSX files). Some might find using JSX\nsyntax beneficial when writing tests."}),"\n",(0,o.jsx)(n.p,{children:"Sample with JSX:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"it('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(<Stepper initial={100} onChange={onChangeSpy} />)\n  cy.get('[data-cy=increment]').click()\n  cy.get('@onChangeSpy').should('have.been.calledWith', 101)\n})\n"})}),"\n",(0,o.jsx)(n.h2,{id:"Using-Slots",children:"Using Slots"}),"\n",(0,o.jsx)(n.h3,{id:"Default-Slot",children:"Default Slot"}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)(r,{value:"DefaultSlot.cy.js",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import DefaultSlot from './DefaultSlot.vue'\n\ndescribe('<DefaultSlot />', () => {\n  it('renders', () => {\n    cy.mount(DefaultSlot, {\n      slots: {\n        default: 'Hello there!',\n      },\n    })\n    cy.get('div.content').should('have.text', 'Hello there!')\n  })\n})\n"})})}),(0,o.jsx)(r,{value:"DefaultSlot.cy.jsx (JSX)",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import DefaultSlot from './DefaultSlot.vue'\n\ndescribe('<DefaultSlot />', () => {\n  it('renders', () => {\n    cy.mount(<DefaultSlot>Hello there!</DefaultSlot>)\n    cy.get('div.content').should('have.text', 'Hello there!')\n  })\n})\n"})})}),(0,o.jsx)(r,{value:"DefaultSlot.vue",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'<template>\n  <div>\n    <div class="content">\n      <slot />\n    </div>\n  </div>\n</template>\n\n<script setup><\/script>\n'})})})]}),"\n",(0,o.jsx)(n.h3,{id:"Named-Slot",children:"Named Slot"}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)(r,{value:"NamedSlot.cy.js",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import NamedSlot from './NamedSlot.vue'\n\ndescribe('<NamedSlot />', () => {\n  it('renders', () => {\n    const slots = {\n      header: 'my header',\n      footer: 'my footer',\n    }\n    cy.mount(NamedSlot, {\n      slots,\n    })\n    cy.get('header').should('have.text', 'my header')\n    cy.get('footer').should('have.text', 'my footer')\n  })\n})\n"})})}),(0,o.jsx)(r,{value:"NamedSlot.cy.jsx (JSX)",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import NamedSlot from './NamedSlot.vue'\n\ndescribe('<NamedSlot />', () => {\n  it('renders', () => {\n    const slots = {\n      header: 'my header',\n      footer: 'my footer',\n    }\n    cy.mount(<NamedSlot>{{ ...slots }}</NamedSlot>)\n    cy.get('header').should('have.text', 'my header')\n    cy.get('footer').should('have.text', 'my footer')\n  })\n})\n"})})}),(0,o.jsx)(r,{value:"NamedSlot.vue",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'<template>\n  <div>\n    <header>\n      <slot name="header" />\n    </header>\n    <footer>\n      <slot name="footer" />\n    </footer>\n  </div>\n</template>\n\n<script setup><\/script>\n'})})})]}),"\n",(0,o.jsxs)(n.p,{children:["For more info on testing Vue components with slots, refer to the\n",(0,o.jsx)(n.a,{href:"https://test-utils.vuejs.org/guide/advanced/slots.html",children:"Vue Test Utils Slots guide"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"Using-Vue-Test-Utils",children:"Using Vue Test Utils"}),"\n",(0,o.jsx)(n.p,{children:"In order to encourage interoperability between your existing component tests and\nCypress, we support using Vue Test Utils' API."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"cy.mount(Stepper).then(({ wrapper, component }) => {\n  // `wrapper` is the Vue Test Utils wrapper\n  // `component` is the component instance itself\n})\n"})}),"\n","\n",(0,o.jsxs)(n.p,{children:["If you intend to use the ",(0,o.jsx)(n.code,{children:"wrapper"})," frequently and use Vue Test Util's API, we\nrecommend you write a ",(0,o.jsx)(n.a,{href:"/api/commands/mount",children:"custom mount command"})," and create a\nCypress alias to get back at the ",(0,o.jsx)(n.code,{children:"wrapper"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { mount } from 'cypress/vue'\n\nCypress.Commands.add('mount', (...args) => {\n  return mount(...args).then(({ wrapper }) => {\n    return cy.wrap(wrapper).as('vue')\n  })\n})\n\n// the \"@vue\" alias will now work anywhere\n// after you've mounted your component\ncy.mount(Stepper).doStuff().get('@vue') // The subject is now the Vue Wrapper\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This means that you are able to get to the resulting ",(0,o.jsx)(n.code,{children:"wrapper"})," returned from the\n",(0,o.jsx)(n.code,{children:"mount"})," command and use ",(0,o.jsx)(n.code,{children:"wrapper.emitted()"})," in order to gain access to Native\nDOM events that were fired, as well as custom events that were emitted by your\ncomponent under test."]}),"\n",(0,o.jsxs)(n.p,{children:["Because ",(0,o.jsx)(n.code,{children:"wrapper.emitted()"})," is only data, and NOT spy-based you will have to\nunpack its results to write assertions."]}),"\n",(0,o.jsxs)(n.p,{children:["Your test failure messages will not be as helpful because you're not able to use\nthe Sinon-Chai library that Cypress ships, which comes with methods such as\n",(0,o.jsx)(n.code,{children:"to.have.been.called"})," and ",(0,o.jsx)(n.code,{children:"to.have.been.calledWith"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Usage of the ",(0,o.jsx)(n.code,{children:"cy.get('@vue')"})," alias may look something like the below code\nsnippet."]}),"\n",(0,o.jsxs)(n.p,{children:["Notice that we're using the ",(0,o.jsx)(n.code,{children:"'should'"})," function signature in order to take\nadvantage of Cypress's ",(0,o.jsx)(n.a,{href:"/app/guides/test-retries",children:"retryability"}),". If we\nchained using ",(0,o.jsx)(n.code,{children:"cy.then"})," instead of ",(0,o.jsx)(n.code,{children:"cy.should"}),", we may run into the kinds of\nissues you have in Vue Test Utils tests where you have to use ",(0,o.jsx)(n.code,{children:"await"})," frequently\nin order to make sure the DOM has updated or any reactive events have fired."]}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)(r,{value:"With emitted",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"cy.mount(Stepper, { props: { initial: 100 } })\ncy.get(incrementSelector).click()\ncy.get('@vue').should(({ wrapper }) => {\n  expect(wrapper.emitted('change')).to.have.length\n  expect(wrapper.emitted('change')[0][0]).to.equal('101')\n})\n"})})}),(0,o.jsx)(r,{value:"With spies",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const onChangeSpy = cy.spy().as('onChangeSpy')\n\ncy.mount(Stepper, { props: { initial: 100, onChange: onChangeSpy } })\n\ncy.get(incrementSelector).click()\ncy.get('@onChangeSpy').should('have.been.calledWith', '101')\n"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["Regardless of our recommendation to use spies instead of the internal Vue Test\nUtils API, you may decide to continue using ",(0,o.jsx)(n.code,{children:"emitted"})," as it ",(0,o.jsx)(n.em,{children:"automatically"}),"\nrecords every single event emitted from the component, and so you won't have to\ncreate a spy for every event emitted."]}),"\n",(0,o.jsxs)(n.p,{children:["This auto-spying behavior could be useful for components that emit ",(0,o.jsx)(n.em,{children:"many"})," custom\nevents."]}),"\n",(0,o.jsx)(n.h2,{id:"Custom-Mount-Commands",children:"Custom Mount Commands"}),"\n",(0,o.jsxs)(n.h3,{id:"Customizing-cymount",children:["Customizing ",(0,o.jsx)(n.code,{children:"cy.mount()"})]}),"\n",(0,o.jsxs)(n.p,{children:["While you can use the ",(0,o.jsx)(n.a,{href:"/app/component-testing/vue/api#mount",children:"mount()"}),"\nfunction in your tests, we recommend using ",(0,o.jsx)(n.a,{href:"/api/commands/mount",children:(0,o.jsx)(n.code,{children:"cy.mount()"})}),",\nwhich is a ",(0,o.jsx)(n.a,{href:"/api/cypress-api/custom-commands",children:"custom command"})," that is defined in\nthe ",(0,o.jsx)(n.strong,{children:"cypress/support/component.js"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:"title=cypress/support/component.js",children:"import { mount } from 'cypress/vue'\n\nCypress.Commands.add('mount', mount)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This allows you to use ",(0,o.jsx)(n.code,{children:"cy.mount()"})," in any test without having to import the\n",(0,o.jsx)(n.code,{children:"mount()"})," function in each and every spec file."]}),"\n",(0,o.jsxs)(n.p,{children:["By default, ",(0,o.jsx)(n.code,{children:"cy.mount()"})," is a simple passthrough to ",(0,o.jsx)(n.code,{children:"mount()"}),", however, you can\ncustomize ",(0,o.jsx)(n.code,{children:"cy.mount()"})," to fit your needs. For instance, if you are using plugins\nor other global app-level setups in your Vue app, you can configure them here."]}),"\n",(0,o.jsx)(n.p,{children:"Below are a few examples that demonstrate using a custom mount command. These\nexamples can be adjusted for most other providers that you will need to support."}),"\n",(0,o.jsx)(n.h3,{id:"Replicating-Plugins",children:"Replicating Plugins"}),"\n",(0,o.jsx)(n.p,{children:"Most applications will have state management or routing. Both of these are Vue\nplugins."}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)(r,{value:"cypress/support/component.js",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { createPinia } from 'pinia' // or Vuex\nimport { createI18n } from 'vue-i18n'\nimport { mount } from 'cypress/vue'\nimport { h } from 'vue'\n\n// We recommend that you pull this out\n// into a constants file that you share with\n// your main.js file.\nconst i18nOptions = {\n  locale: 'en',\n  messages: {\n    en: {\n      hello: 'hello!',\n    },\n    ja: {\n      hello: '\u3053\u3093\u306b\u3061\u306f\uff01',\n    },\n  },\n}\n\nCypress.Commands.add('mount', (component, ...args) => {\n  args.global = args.global || {}\n  args.global.plugins = args.global.plugins || []\n  args.global.plugins.push(createPinia())\n  args.global.plugins.push(createI18n())\n\n  return mount(\n    () => {\n      return h(VApp, {}, component)\n    },\n    ...args\n  )\n})\n"})})}),(0,o.jsx)(r,{value:"With JSX",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import { createPinia } from 'pinia' // or Vuex\nimport { createI18n } from 'vue-i18n'\nimport { mount } from 'cypress/vue'\n\n// We recommend that you pull this out\n// into a constants file that you share with\n// your main.js file.\nconst i18nOptions = {\n  locale: 'en',\n  messages: {\n    en: {\n      hello: 'hello!',\n    },\n    ja: {\n      hello: '\u3053\u3093\u306b\u3061\u306f\uff01',\n    },\n  },\n}\n\nCypress.Commands.add('mount', (component, ...args) => {\n  args.global = args.global || {}\n  args.global.plugins = args.global.plugins || []\n  args.global.plugins.push(createPinia())\n  args.global.plugins.push(createI18n())\n\n  // <component> is a built-in component that comes with Vue\n  return mount(\n    () => (\n      <VApp>\n        <component is={component} />\n      </VApp>\n    ),\n    ...args\n  )\n})\n"})})})]}),"\n",(0,o.jsx)(n.h3,{id:"Replicating-the-expected-Component-Hierarchy",children:"Replicating the expected Component Hierarchy"}),"\n",(0,o.jsx)(n.p,{children:"Some Vue applications, most famously Vue apps built on top of Vuetify, require\ncertain components to be structured in a specific hierarchy."}),"\n",(0,o.jsxs)(n.p,{children:["All Vuetify applications require that you wrap your app in a ",(0,o.jsx)(n.code,{children:"VApp"})," component\nwhen you build it. This is an implementation detail of Vuetify, but once users\ntry to test components that depend on Vuetify, they get Vuetify-specific\ncompilation errors and quickly find out that ",(0,o.jsx)(n.strong,{children:"they need to replicate that\ncomponent hierarchy any time they need to mount a component that uses a Vuetify\ncomponent"}),"!"]}),"\n",(0,o.jsxs)(n.p,{children:["Custom ",(0,o.jsx)(n.code,{children:"cy.mount"})," commands to the rescue! You may find the JSX syntax to be more\nstraightforward."]}),"\n",(0,o.jsx)(n.p,{children:"You'll also need to replicate the plugin setup steps from the Vuetify docs for\neverything to compile."}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)(r,{value:"cypress/support/component.js",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import Vuetify from 'vuetify/lib'\nimport { VApp } from 'vuetify'\nimport { mount } from 'cypress/vue'\nimport { h } from 'vue'\n\n// We recommend that you pull this out\n// into a constants file that you share with\n// your main.js file.\nconst vuetifyOptions = {}\n\nCypress.Commands.add('mount', (component, ...args) => {\n  args.global = args.global || {}\n  args.global.plugins = args.global.plugins || []\n  args.global.plugins.push(new Vuetify(vuetifyOptions))\n\n  return mount(\n    () => {\n      return h(VApp, {}, component)\n    },\n    ...args\n  )\n})\n"})})}),(0,o.jsx)(r,{value:"With JSX",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import Vuetify from 'vuetify/lib'\nimport { VApp } from 'vuetify'\nimport { mount } from 'cypress/vue'\n\n// We recommend that you pull this out\n// into a constants file that you share with\n// your main.js file.\nconst vuetifyOptions = {}\n\nCypress.Commands.add('mount', (component, ...args) => {\n  args.global = args.global || {}\n  args.global.plugins = args.global.plugins || []\n  args.global.plugins.push(new Vuetify(vuetifyOptions))\n\n  // <component> is a built-in component that comes with Vue\n  return mount(\n    () => (\n      <VApp>\n        <component is={component} />\n      </VApp>\n    ),\n    ...args\n  )\n})\n"})})})]}),"\n",(0,o.jsx)(n.h3,{id:"Vue-Router",children:"Vue Router"}),"\n",(0,o.jsx)(n.p,{children:"To use Vue Router, create a command to register the plugin and pass in a custom\nimplementation of the router via the options param."}),"\n",(0,o.jsx)(n.h4,{id:"Vue-3",children:"Vue 3"}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)(r,{value:"cypress/support/component.js",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { mount } from 'cypress/vue'\nimport { createMemoryHistory, createRouter } from 'vue-router'\nimport { routes } from '../../src/router'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Setup options object\n  options.global = options.global || {}\n  options.global.plugins = options.global.plugins || []\n\n  // create router if one is not provided\n  if (!options.router) {\n    options.router = createRouter({\n      routes: routes,\n      history: createMemoryHistory(),\n    })\n  }\n\n  // Add router plugin\n  options.global.plugins.push({\n    install(app) {\n      app.use(options.router)\n    },\n  })\n\n  return mount(component, options)\n})\n"})})}),(0,o.jsx)(r,{value:"Typings",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { mount } from 'cypress/vue'\nimport { Router } from 'vue-router'\n\ntype MountParams = Parameters<typeof mount>\ntype OptionsParam = MountParams[1] & { router?: Router }\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Helper mount function for Vue Components\n       * @param component Vue Component or JSX Element to mount\n       * @param options Options passed to Vue Test Utils\n       */\n      mount(component: any, options?: OptionsParam): Chainable<any>\n    }\n  }\n}\n"})})}),(0,o.jsxs)(r,{value:"Spec Usage",children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import Navigation from './Navigation.vue'\nimport { routes } from '../router'\nimport { createMemoryHistory, createRouter } from 'vue-router'\n\nit('home link should be active when url is \"/\"', () => {\n  // No need to pass in custom router as default url is '/'\n  cy.mount(<Navigation />)\n\n  cy.get('a').contains('Home').should('have.class', 'router-link-active')\n})\n\nit('login link should be active when url is \"/login\"', () => {\n  // Create a new router instance for each test\n  const router = createRouter({\n    routes: routes,\n    history: createMemoryHistory(),\n  })\n\n  // Change location to `/login`,\n  // and await on the promise with cy.wrap\n  cy.wrap(router.push('/login'))\n\n  // Pass the already initialized router for use\n  cy.mount(<Navigation />, { router })\n\n  cy.get('a').contains('Login').should('have.class', 'router-link-active')\n})\n"})}),(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["Calling ",(0,o.jsx)(n.code,{children:"router.push()"})," in the router for Vue 3 is an asynchronous operation.\nUse the ",(0,o.jsx)(n.a,{href:"/api/commands/wrap",children:"cy.wrap"})," command to have Cypress await the\npromise's resolve before it continues with other commands:"]})})]})]}),"\n",(0,o.jsx)(n.h4,{id:"Vue-2",children:"Vue 2"}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)(r,{value:"cypress/support/component.js",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { mount } from 'cypress/vue'\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport { router } from '../../src/router'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Add the VueRouter plugin\n  Vue.use(VueRouter)\n\n  // Use the router passed in via options,\n  // or the default one if not provided\n  options.router = options.router || router\n\n  return mount(component, options)\n})\n"})})}),(0,o.jsx)(r,{value:"Typings",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { mount } from 'cypress/vue'\nimport VueRouter from 'vue-router'\n\ntype MountParams = Parameters<typeof mount>\ntype OptionsParam = MountParams[1] & { router?: VueRouter }\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Helper mount function for Vue Components\n       * @param component Vue Component or JSX Element to mount\n       * @param options Options passed to Vue Test Utils\n       */\n      mount(component: any, options?: OptionsParam): Chainable<any>\n    }\n  }\n}\n"})})}),(0,o.jsx)(r,{value:"Spec Usage",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import VueRouter from 'vue-router'\nimport Navigation from './Navigation.vue'\nimport { routes } from '../router'\n\nit('home link should be active when url is \"/\"', () => {\n  // No need to pass in custom router as default url is '/'\n  cy.mount(Navigation)\n\n  cy.get('a').contains('Home').should('have.class', 'router-link-active')\n})\n\nit('login link should be active when url is \"/login\"', () => {\n  // Create a new router instance for each test\n  const router = new VueRouter({\n    mode: 'history',\n    routes,\n  })\n\n  // Change location to `/login`\n  router.push('/login')\n\n  // Pass the already initialized router for use\n  cy.mount(Navigation, { router })\n\n  cy.get('a').contains('Login').should('have.class', 'router-link-active')\n})\n"})})})]}),"\n",(0,o.jsx)(n.h3,{id:"Vuex",children:"Vuex"}),"\n",(0,o.jsxs)(n.p,{children:["To use a component that uses ",(0,o.jsx)(n.a,{href:"https://vuex.vuejs.org/",children:"Vuex"}),", create a ",(0,o.jsx)(n.code,{children:"mount"}),"\ncommand that configures a Vuex store for your component."]}),"\n",(0,o.jsx)(n.h4,{id:"Vue-3-1",children:"Vue 3"}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsxs)(r,{value:"cypress/support/component.js",children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { mount } from 'cypress/vue'\nimport { getStore } from '../../src/plugins/store'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Setup options object\n  options.global = options.global || {}\n  options.global.stubs = options.global.stubs || {}\n  options.global.stubs['transition'] = false\n  options.global.components = options.global.components || {}\n  options.global.plugins = options.global.plugins || []\n\n  // Use store passed in from options, or initialize a new one\n  const { store = getStore(), ...mountOptions } = options\n\n  // Add Vuex plugin\n  options.global.plugins.push({\n    install(app) {\n      app.use(store)\n    },\n  })\n\n  return mount(component, mountOptions)\n})\n"})}),(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"getStore"})," method is a factory method that initializes Vuex and creates a\nnew store. It is important that the store be initialized with each new test to\nensure changes to the store don't affect other tests."]})})]}),(0,o.jsx)(r,{value:"Typings",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { mount } from 'cypress/vue'\nimport { Store } from 'vuex'\n\ntype MountParams = Parameters<typeof mount>\ntype OptionsParam = MountParams[1]\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Helper mount function for Vue Components\n       * @param component Vue Component or JSX Element to mount\n       * @param options Options passed to Vue Test Utils\n       */\n      mount(\n        component: any,\n        options?: OptionsParam & { store?: Store }\n      ): Chainable<any>\n    }\n  }\n}\n"})})}),(0,o.jsx)(r,{value:"Spec Usage",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { getStore } from '@/plugins/store'\nimport UserProfile from './UserProfile.vue'\n\nit.only('User profile should display user name', () => {\n  const user = { name: 'test person' }\n\n  // getStore is a factory method that creates a new store\n  const store = getStore()\n\n  // mutate the store with user\n  store.commit('setUser', user)\n\n  cy.mount(UserProfile, {\n    store,\n  })\n\n  cy.get('div.name').should('have.text', user.name)\n})\n"})})})]}),"\n",(0,o.jsx)(n.h4,{id:"Vue-2-1",children:"Vue 2"}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsxs)(r,{value:"cypress/support/component.js",children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { mount } from 'cypress/vue'\nimport Vuex from 'vuex'\nimport { getStore } from '../../src/plugins/store'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Setup options object\n  options.extensions = options.extensions || {}\n  options.extensions.plugins = options.extensions.plugins || []\n\n  // Use store passed in from options, or initialize a new one\n  options.store = options.store || getStore()\n\n  // Add Vuex plugin\n  options.extensions.plugins.push(Vuex)\n\n  return mount(component, options)\n})\n"})}),(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"getStore"})," method is a factory method that initializes Vuex and creates a\nnew store. It is important that the store be initialized with each new test to\nensure changes to the store don't affect other tests."]})})]}),(0,o.jsx)(r,{value:"Typings",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { mount } from 'cypress/vue'\nimport { Store } from 'vuex'\n\ntype MountParams = Parameters<typeof mount>\ntype OptionsParam = MountParams[1]\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Helper mount function for Vue Components\n       * @param component Vue Component or JSX Element to mount\n       * @param options Options passed to Vue Test Utils\n       */\n      mount(\n        component: any,\n        options?: OptionsParam & { store?: Store }\n      ): Chainable<any>\n    }\n  }\n}\n"})})}),(0,o.jsx)(r,{value:"Spec Usage",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { getStore } from '@/plugins/store'\nimport UserProfile from './UserProfile.vue'\n\nit.only('User profile should display user name', () => {\n  const user = { name: 'test person' }\n\n  // getStore is a factory method that creates a new store\n  const store = getStore()\n\n  // mutate the store with user\n  store.commit('setUser', user)\n\n  cy.mount(UserProfile, {\n    store,\n  })\n\n  cy.get('div.name').should('have.text', user.name)\n})\n"})})})]}),"\n",(0,o.jsx)(n.h3,{id:"Global-Components",children:"Global Components"}),"\n",(0,o.jsx)(n.p,{children:"If you have components that are registered globally in the main application\nfile, set them up in your mount command so your component will render them\nproperly:"}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)(r,{value:"Vue 3",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { mount } from 'cypress/vue'\nimport Button from '../../src/components/Button.vue'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Setup options object\n  options.global = options.global || {}\n  options.global.components = options.global.components || {}\n\n  // Register global components\n  options.global.components['Button'] = Button\n\n  return mount(component, options)\n})\n"})})}),(0,o.jsx)(r,{value:"Vue 2",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { mount } from 'cypress/vue2'\nimport Button from '../../src/components/Button.vue'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Setup options object\n  options.extensions = options.extensions || {}\n  options.extensions.components = options.extensions.components || {}\n\n  // Register global components\n  options.extensions.components['Button'] = Button\n\n  return mount(component, options)\n})\n"})})})]})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>i});var o=t(7294);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);